<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Docker镜像01]]></title>
    <url>%2F2019%2F04%2F29%2FDocker%E9%95%9C%E5%83%8F01%2F</url>
    <content type="text"><![CDATA[Docker镜像层镜像为什么是有层的？镜像分层是为了解决什么？ 虽然镜像解决了打包，但是实际应用中我们的应用都是基于同一个rootfs来打包和迭代的，难道每个rootfs都会多份吗？ 为此docker利用了存储驱动AUFS，devicemapper，overlay，overlay2的存储技术实现了分层。初期是AUFS，到现在的overlay2驱动（不推荐devicemapper坑很多）。例如一个nginx:alpine和python:alpine镜像可以从分层角度这样去理解。 实际上只有不同的层才占据存储空间，相同的层则是引用关系。抽象地看镜像是一个实体，实际上是/var/lib/docker目录里的分层文件外加一些json和db文件把层联系起来组成了镜像。存储路径是/var/lib/docker/存储驱动类型/。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[proxmox中cloud-init使用方法]]></title>
    <url>%2F2019%2F04%2F18%2Fproxmox%E4%B8%ADcloud-init%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[模版制作标准分区ext4，不添加swap分区，原因下文说。 系统装完后，将网卡配置文件内的onboot打开，清除uuid。关闭selinux和firewalld以及碍事的NetworkManager。123systemctl disable --now firewalld NetworkManagersetenforce 0sed -ri '/^[^#]*SELINUX=/s#=.+$#=disabled#' /etc/selinux/config 为了让虚拟化层可以重启和关闭虚拟机，必须安装acpid服务；为了使根分区正确调整大小安装cloud-utils-growpart，cloud-init支持下发前设置信息写入。12yum install -y acpid cloud-init cloud-utils-growpartsystemctl enable acpid 禁用默认zeroconf路线1echo "NOZEROCONF=yes" &gt;&gt; /etc/sysconfig/network 防止ssh连接使用dns导致访问过慢12sed -ri '/UseDNS/&#123;s@#@@;s@\s+.+@ no@&#125;' /etc/ssh/sshd_configsystemctl restart sshd cloud-init配置文件:1. ssh_pwauth 为 0 是禁止使用password登陆。2. disable_root：1 是禁止root登陆。3. package-update-upgrade-install会在第一次开机启动时自动yum update -y。123sed -ri '/disable_root/&#123;s#\S$#0#&#125;' /etc/cloud/cloud.cfgsed -ri '/ssh_pwauth/&#123;s#\S$#1#&#125;' /etc/cloud/cloud.cfgsed -ri '/package-update/s@^@#@' /etc/cloud/cloud.cfg 默认cloud-init会创建一个系统类型的用户,可以注释掉。1234567# default_user:# name: centos# lock_passwd: true# gecos: Cloud User# groups: [wheel, adm, systemd-journal]# sudo: ["ALL=(ALL) NOPASSWD:ALL"]# shell: /bin/bash 安装些基础包和预设一些脚本的话就可以关机。12yum install vim git wget -ypoweroff 转换模版12345678root@pve:~# qm list VMID NAME STATUS MEM(MB) BOOTDISK(GB) PID 100 cloud-init stopped 2048 20.00 0 101 k8s-m1 running 2048 20.00 7438root@pve:~# qm set 100 --ide2 local-lvm:cloudinitupdate VM 100: -ide2 local-lvm:cloudinit Using default stripesize 64.00 KiB. Logical volume "vm-100-cloudinit" created. 在Dashboard上可以看到虚拟机的could-init部分已经可以更改属性了。 在Dashboard上把它转换成模板,部署时完整克隆,开机之前双击需要设置的信息即可,否则例如密码不设置默认是模板的密码。也可以通过命令行初始化虚拟机信息。1qm set &lt;vmid&gt; --ipconfig0 ip=10.105.26.x/23,gw=10.105.26.1 备份和恢复虚拟机123456789101112131415161718192021222324252627282930313233root@pve:~# vzdump 100INFO: starting new backup job: vzdump 100INFO: Starting Backup of VM 100 (qemu)INFO: status = stoppedINFO: update VM 100: -lock backupINFO: backup mode: stopINFO: ionice priority: 7INFO: VM Name: cloud-initINFO: include disk 'scsi0' 'local-lvm:vm-100-disk-0' 20GINFO: creating archive '/var/lib/vz/dump/vzdump-qemu-100-2019_04_18-12_48_38.vma'INFO: starting kvm to execute backup taskTotal translation table size: 0Total rockridge attributes bytes: 417Total directory bytes: 0Path table size(bytes): 10Max brk space used 0178 extents written (0 MB)INFO: started backup task 'd65a8f26-20fe-4232-abd3-ec0bcf4623cd'INFO: status: 3% (785645568/21474836480), sparse 1% (395206656), duration 3, read/write 261/130 MB/sINFO: status: 21% (4593876992/21474836480), sparse 19% (4184059904), duration 6, read/write 1269/6 MB/sINFO: status: 34% (7457996800/21474836480), sparse 32% (6929133568), duration 9, read/write 954/39 MB/sINFO: status: 50% (10746396672/21474836480), sparse 46% (10083291136), duration 12, read/write 1096/44 MB/sINFO: status: 61% (13169524736/21474836480), sparse 57% (12349382656), duration 15, read/write 807/52 MB/sINFO: status: 70% (15039004672/21474836480), sparse 64% (13956280320), duration 18, read/write 623/87 MB/sINFO: status: 80% (17196580864/21474836480), sparse 74% (15934279680), duration 21, read/write 719/59 MB/sINFO: status: 89% (19120455680/21474836480), sparse 82% (17667883008), duration 24, read/write 641/63 MB/sINFO: status: 95% (20594622464/21474836480), sparse 88% (18997477376), duration 27, read/write 491/48 MB/sINFO: status: 100% (21474836480/21474836480), sparse 92% (19877691392), duration 28, read/write 880/0 MB/sINFO: transferred 21474 MB in 28 seconds (766 MB/s)INFO: stopping kvm after backup taskINFO: archive file size: 1.49GBINFO: Finished Backup of VM 100 (00:00:32)INFO: Backup job finished 输出路径在：/var/lib/vz/dump/，导入的话使用如下命令1qmrestore vzdump-qemu-xx.vma &lt;vmid&gt;]]></content>
      <categories>
        <category>Proxmox</category>
      </categories>
      <tags>
        <tag>virtualization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[k8s配置secret拉取私有仓库镜像]]></title>
    <url>%2F2019%2F04%2F10%2Fk8s%E9%85%8D%E7%BD%AEsecret%E6%8B%89%E5%8F%96%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[https://kubernetes.io/docs 样例1234567891011# cat ~/.docker/config.json &#123; "auths": &#123; "harbor.station.com": &#123; "auth": "YWRtaW46SGFyYm9yMTIzNDU=" &#125; &#125;, "HttpHeaders": &#123; "User-Agent": "Docker-Client/18.06.1-ce (linux)" &#125;&#125; 这个时候我们虽然可以通过交互式登录，使用docker pull拉取镜像，但无法通过k8s创建Pod时拉取镜像。 生成密钥secret1# kubectl create secret docker-registry harbor --docker-server=x.x.x.x --docker-username=admin --docker-password=Harbor12345 --docker-email=xx@qq.com 1) harbor: 指定密钥的键名称，可自行定义 2）–docker-server：指定docker仓库地址 3）–docker-username：指定docker仓库帐号 4) –docker-password：指定docker仓库密码 5) –docker-email：指定邮件地址（选填）` 查看密钥可以看到当前除了默认的密钥, 还有我们刚才生成的. 另外要注意的是, 该密钥只能在对应namespace使用, 也就是这里的default, 如果需要用到其他namespace, 比如说test, 就需要在生成的时候指定参数 -n test。1234# kubectl get secretsNAME TYPE DATA AGEdefault-token-mzmtj kubernetes.io/service-account-token 3 22mharbor kubernetes.io/dockerconfigjson 1 22m YAML例子其中imagePullSecrets是声明拉取镜像时需要指定密钥, harbor必须和上面生成密钥的键名一致, 另外检查一下pod和密钥是否在同一个namespace, 之后k8s便可以拉取镜像。1234567891011121314151617apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: nginx-deploy namespace: harborspec: replicas: 3 template: metadata: labels: app: web_server spec: containers: - name: nginx image: harbor.station.com/library/nginx:latest imagePullSecrets: - name: harbor]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Harbor</tag>
      </tags>
  </entry>
</search>
