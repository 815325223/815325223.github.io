<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Cheng</title>
  
  <subtitle>Kubernetes,Devops,Service Mesh 实践</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-29T06:25:01.801Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dockerfile FROM</title>
    <link href="http://yoursite.com/2019/04/29/Dockerfile-FROM-1/"/>
    <id>http://yoursite.com/2019/04/29/Dockerfile-FROM-1/</id>
    <published>2019-04-29T05:37:00.000Z</published>
    <updated>2019-04-29T06:25:01.801Z</updated>
    
    <content type="html"><![CDATA[<h6 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;baseimage&gt; 或者 FROM &lt;baseimage&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p><p>指定从哪个镜像为基础迭代，如果本地没有镜像则会从仓库拉取，通常是第一行，而scratch是空镜像，是所有rootfs和一些单独可执行文件做镜像的根源，关于scratch后续会说。</p><p>例如centos的Dockerfile是下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /</span><br><span class="line"></span><br><span class="line">LABEL org.label-schema.schema-version=<span class="string">"1.0"</span> \</span><br><span class="line">    org.label-schema.name=<span class="string">"CentOS Base Image"</span> \</span><br><span class="line">    org.label-schema.vendor=<span class="string">"CentOS"</span> \</span><br><span class="line">    org.label-schema.license=<span class="string">"GPLv2"</span> \</span><br><span class="line">    org.label-schema.build-date=<span class="string">"20190305"</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"/bin/bash"</span>]</span><br></pre></td></tr></table></figure></p><p>而hello-world为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">COPY hello /</span><br><span class="line">CMD [<span class="string">"/hello"</span>]</span><br><span class="line"></span><br><span class="line">docker images | grep hello</span><br><span class="line">hello-world         latest              fce289e99eb9        3 months ago        1.84kB</span><br></pre></td></tr></table></figure></p><p>nginx:alpine镜像的dockerfile 链接为<a href="https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile，大家可以仿照这个经典案例写出自己的Dockerfile。" target="_blank" rel="noopener">https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile，大家可以仿照这个经典案例写出自己的Dockerfile。</a></p><p>nginx:alpine既满足运行的最小环境下大小又很小，主要归功于FROM alpine ，现在alpine这个系统和rootfs得益于docker发展非常快，也有很多应用镜像都有alpine版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.9</span><br><span class="line"></span><br><span class="line">LABEL maintainer=<span class="string">"NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;"</span></span><br><span class="line"></span><br><span class="line">ENV NGINX_VERSION 1.15.11</span><br><span class="line"></span><br><span class="line">RUN ...省略步骤，步骤是下载源码，安装编译需要的依赖，编译安装完删掉源码包和编译的依赖保留运编译出来的nginx二进制和需要的所有so文件</span><br><span class="line"></span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">STOPSIGNAL SIGTERM</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;FROM&quot;&gt;&lt;a href=&quot;#FROM&quot; class=&quot;headerlink&quot; title=&quot;FROM&quot;&gt;&lt;/a&gt;FROM&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker镜像03</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F03/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像03/</id>
    <published>2019-04-29T04:51:00.000Z</published>
    <updated>2019-04-29T05:36:01.255Z</updated>
    
    <content type="html"><![CDATA[<h6 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h6><p>构建镜像只有两种方式，docker build 和 docker commit。实际上docker build是调用的docker commit。不推荐手动去docker commmit运行的容器成镜像。所以主要讲docker build和dockerfile。</p><p>使用docker build 指定Dockerfile来完成一个新镜像的构建。命令格式一般为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [option] [-t &lt;image&gt;:&lt;tag&gt;]  &lt;path&gt;</span><br></pre></td></tr></table></figure></p><p>其中path指向的文件称为context（上下文），context包含docker build镜像过程中需要的Dockerfile以及其他的资源文件。执行build命令后执行流程如下：</p><ul><li>Docker client端<ul><li>解析命令行参数，完成对相关信息的设置，Docker client向Docker server发送POST/build的HTTP请求，包含了所需的上下文文件。</li></ul></li><li>Docker server端<ul><li>创建一个临时目录，并将context指定的文件系统解压到该目录下</li><li>读取并解析Dockerfile</li><li>根据解析出的Dockerfile遍历其中的所有指令，并分发到不同的模块（parser）去执行</li><li>parser为Dockerfile的每一个指令创建一个对应的临时容器，在临时容器中执行当前指令，然后通过commit使用此镜像生成一个镜像层</li><li>Dockerfile中所有的指令对应的层的集合，就是此次build后的结果。如果指定了tag参数，便给镜像打上对应的tag。最后一次commit生成的镜像ID就会作为最终的镜像ID返回。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;构建镜像&quot;&gt;&lt;a href=&quot;#构建镜像&quot; class=&quot;headerlink&quot; title=&quot;构建镜像&quot;&gt;&lt;/a&gt;构建镜像&lt;/h6&gt;&lt;p&gt;构建镜像只有两种方式，docker build 和 docker commit。实际上docker build是调用的doc
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker镜像02</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F02/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像02/</id>
    <published>2019-04-29T02:22:00.000Z</published>
    <updated>2019-04-29T04:43:23.063Z</updated>
    
    <content type="html"><![CDATA[<h6 id="容器是单独的一层读写层"><a href="#容器是单独的一层读写层" class="headerlink" title="容器是单独的一层读写层"></a>容器是单独的一层读写层</h6><p>一个镜像可以运行无数个容器，容器需要读取文件的场景和对应原理是如下。</p><ul><li>在无挂载卷情况下，通过docker cp或exec产生的数据，文件会在读写层里，删除容器则文件也一并删除。</li><li>读取文件，从上层往下找到镜像层，找到即可返回，复制到容器层读入内存。</li><li>修改文件，从上层往下找到镜像层，找到即可返回，复制到容器层后修改。</li><li>删除文件，找到后在容器层记录下删除操作(类似盖层布，后续读取的时候会认为文件不存在)</li></ul><p>容器与镜像关系为下图<br><img src="/images/pasted-5.png" alt="upload successful"></p><p>通过docker ps 的-s选项可以看出容器的size和容器层总大小，这里我用docker命令演示下容器是单独一层读写层和容器被删除后数据消失。</p><p><img src="/images/pasted-6.png" alt="upload successful"><br><img src="/images/pasted-7.png" alt="upload successful"></p><p>创建一个容器，在容器里写入1g数据，宿主机的可用容量减少1G，docker的overlay2存储目录记录了下这个文件，但是删除后文件也被删除了。在抽象逻辑上一个容器就是单独一个读写层，而删除容器后这层在宿主机上的文件也会被删除。</p><p>计算实际占用大小时镜像的大小不会被重复计算，只需要计算一个大小+它起的所有容器大小。<br>目前启动了5个nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps -s</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES               SIZE</span><br><span class="line">ac5c0d1f8d6b        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   7 seconds ago       Up 5 seconds        80/tcp              web5                2B (virtual 16.1MB)</span><br><span class="line">0dd2c0c36084        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   11 seconds ago      Up 9 seconds        80/tcp              web4                2B (virtual 16.1MB)</span><br><span class="line">413d9270c702        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   15 seconds ago      Up 13 seconds       80/tcp              web3                2B (virtual 16.1MB)</span><br><span class="line">43f8e010f7bb        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   19 seconds ago      Up 17 seconds       80/tcp              web2                2B (virtual 16.1MB)</span><br><span class="line">610abcfab29d        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   25 seconds ago      Up 23 seconds       80/tcp              web1                2B (virtual 16.1MB)</span><br></pre></td></tr></table></figure></p><p>使用exec往容器里写数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> web1 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=10'</span></span><br><span class="line">docker <span class="built_in">exec</span> web2 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=20'</span></span><br><span class="line">docker <span class="built_in">exec</span> web3 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=30'</span></span><br><span class="line">docker <span class="built_in">exec</span> web4 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=40'</span></span><br><span class="line">docker <span class="built_in">exec</span> web5 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=50'</span></span><br><span class="line">]<span class="comment"># docker ps -as</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES               SIZE</span><br><span class="line">ac5c0d1f8d6b        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   56 seconds ago       Up 54 seconds       80/tcp              web5                50MB (virtual 66.1MB)</span><br><span class="line">0dd2c0c36084        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up 58 seconds       80/tcp              web4                40MB (virtual 56.1MB)</span><br><span class="line">413d9270c702        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              web3                30MB (virtual 46.1MB)</span><br><span class="line">43f8e010f7bb        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              web2                20MB (virtual 36.1MB)</span><br><span class="line">610abcfab29d        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              web1                10MB (virtual 26.1MB)</span><br></pre></td></tr></table></figure></p><p>实际占用量计算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 x 16.1MB 只读镜像层</span><br><span class="line">1 x 10MB</span><br><span class="line">1 x 20MB</span><br><span class="line">1 x 30MB</span><br><span class="line">1 x 40MB</span><br><span class="line">1 x 50MB</span><br><span class="line">===========================</span><br><span class="line">161.1MB</span><br></pre></td></tr></table></figure></p><p>这样我们可以推导出docker镜像是分层和容器是单独一层只读镜像的。也有部分人不懂这些知识，每次是进容器里安装东西然后commit，导致最后容器越来越大，甚至看到过16g的镜像。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;容器是单独的一层读写层&quot;&gt;&lt;a href=&quot;#容器是单独的一层读写层&quot; class=&quot;headerlink&quot; title=&quot;容器是单独的一层读写层&quot;&gt;&lt;/a&gt;容器是单独的一层读写层&lt;/h6&gt;&lt;p&gt;一个镜像可以运行无数个容器，容器需要读取文件的场景和对应原理是如下。
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker镜像01</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F01/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像01/</id>
    <published>2019-04-29T02:12:00.000Z</published>
    <updated>2019-04-29T02:20:31.125Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Docker镜像层"><a href="#Docker镜像层" class="headerlink" title="Docker镜像层"></a>Docker镜像层</h6><p>镜像为什么是有层的？镜像分层是为了解决什么？</p><p>虽然镜像解决了打包，但是实际应用中我们的应用都是基于同一个rootfs来打包和迭代的，难道每个rootfs都会多份吗？</p><p>为此docker利用了存储驱动AUFS，devicemapper，overlay，overlay2的存储技术实现了分层。初期是AUFS，到现在的overlay2驱动（不推荐devicemapper坑很多）。例如一个nginx:alpine和python:alpine镜像可以从分层角度这样去理解。</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>实际上只有不同的层才占据存储空间，相同的层则是引用关系。抽象地看镜像是一个实体，实际上是/var/lib/docker目录里的分层文件外加一些json和db文件把层联系起来组成了镜像。存储路径是/var/lib/docker/存储驱动类型/。</p><p><img src="/images/pasted-4.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;Docker镜像层&quot;&gt;&lt;a href=&quot;#Docker镜像层&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像层&quot;&gt;&lt;/a&gt;Docker镜像层&lt;/h6&gt;&lt;p&gt;镜像为什么是有层的？镜像分层是为了解决什么？&lt;/p&gt;
&lt;p&gt;虽然镜像解决了打包，但是
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>proxmox中cloud-init使用方法</title>
    <link href="http://yoursite.com/2019/04/18/proxmox%E4%B8%ADcloud-init%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/18/proxmox中cloud-init使用方法/</id>
    <published>2019-04-18T03:06:00.000Z</published>
    <updated>2019-04-18T05:14:02.283Z</updated>
    
    <content type="html"><![CDATA[<h6 id="模版制作"><a href="#模版制作" class="headerlink" title="模版制作"></a>模版制作</h6><p>标准分区ext4，不添加swap分区，原因下文说。<br><img src="/images/pasted-1.png" alt="upload successful"></p><p>系统装完后，将网卡配置文件内的onboot打开，清除uuid。关闭selinux和firewalld以及碍事的NetworkManager。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> --now firewalld NetworkManager</span><br><span class="line">setenforce 0</span><br><span class="line">sed -ri <span class="string">'/^[^#]*SELINUX=/s#=.+$#=disabled#'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure></p><p>为了让虚拟化层可以重启和关闭虚拟机，必须安装acpid服务；为了使根分区正确调整大小安装cloud-utils-growpart，cloud-init支持下发前设置信息写入。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y acpid cloud-init cloud-utils-growpart</span><br><span class="line">systemctl <span class="built_in">enable</span> acpid</span><br></pre></td></tr></table></figure></p><p>禁用默认zeroconf路线<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"NOZEROCONF=yes"</span> &gt;&gt; /etc/sysconfig/network</span><br></pre></td></tr></table></figure></p><p>防止ssh连接使用dns导致访问过慢<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">'/UseDNS/&#123;s@#@@;s@\s+.+@ no@&#125;'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></p><p>cloud-init配置文件:1. ssh_pwauth 为 0 是禁止使用password登陆。2. disable_root：1 是禁止root登陆。3. package-update-upgrade-install会在第一次开机启动时自动yum update -y。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">'/disable_root/&#123;s#\S$#0#&#125;'</span> /etc/cloud/cloud.cfg</span><br><span class="line">sed -ri <span class="string">'/ssh_pwauth/&#123;s#\S$#1#&#125;'</span> /etc/cloud/cloud.cfg</span><br><span class="line">sed -ri <span class="string">'/package-update/s@^@#@'</span> /etc/cloud/cloud.cfg</span><br></pre></td></tr></table></figure></p><p>默认cloud-init会创建一个系统类型的用户,可以注释掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  default_user:</span></span><br><span class="line"><span class="comment">#    name: centos</span></span><br><span class="line"><span class="comment">#    lock_passwd: true</span></span><br><span class="line"><span class="comment">#    gecos: Cloud User</span></span><br><span class="line"><span class="comment">#    groups: [wheel, adm, systemd-journal]</span></span><br><span class="line"><span class="comment">#    sudo: ["ALL=(ALL) NOPASSWD:ALL"]</span></span><br><span class="line"><span class="comment">#    shell: /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>安装些基础包和预设一些脚本的话就可以关机。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install vim git wget -y</span><br><span class="line">poweroff</span><br></pre></td></tr></table></figure></p><h6 id="转换模版"><a href="#转换模版" class="headerlink" title="转换模版"></a>转换模版</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~<span class="comment"># qm list</span></span><br><span class="line">      VMID NAME                 STATUS     MEM(MB)    BOOTDISK(GB) PID</span><br><span class="line">       100 cloud-init           stopped    2048              20.00 0</span><br><span class="line">       101 k8s-m1               running    2048              20.00 7438</span><br><span class="line">root@pve:~<span class="comment"># qm set 100 --ide2 local-lvm:cloudinit</span></span><br><span class="line">update VM 100: -ide2 <span class="built_in">local</span>-lvm:cloudinit</span><br><span class="line">  Using default stripesize 64.00 KiB.</span><br><span class="line">  Logical volume <span class="string">"vm-100-cloudinit"</span> created.</span><br></pre></td></tr></table></figure><p>在Dashboard上可以看到虚拟机的could-init部分已经可以更改属性了。</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>在Dashboard上把它转换成模板,部署时完整克隆,开机之前双击需要设置的信息即可,否则例如密码不设置默认是模板的密码。也可以通过命令行初始化虚拟机信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm <span class="built_in">set</span> &lt;vmid&gt; --ipconfig0 ip=10.105.26.x/23,gw=10.105.26.1</span><br></pre></td></tr></table></figure></p><h6 id="备份和恢复虚拟机"><a href="#备份和恢复虚拟机" class="headerlink" title="备份和恢复虚拟机"></a>备份和恢复虚拟机</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~<span class="comment"># vzdump 100</span></span><br><span class="line">INFO: starting new backup job: vzdump 100</span><br><span class="line">INFO: Starting Backup of VM 100 (qemu)</span><br><span class="line">INFO: status = stopped</span><br><span class="line">INFO: update VM 100: -lock backup</span><br><span class="line">INFO: backup mode: stop</span><br><span class="line">INFO: ionice priority: 7</span><br><span class="line">INFO: VM Name: cloud-init</span><br><span class="line">INFO: include disk <span class="string">'scsi0'</span> <span class="string">'local-lvm:vm-100-disk-0'</span> 20G</span><br><span class="line">INFO: creating archive <span class="string">'/var/lib/vz/dump/vzdump-qemu-100-2019_04_18-12_48_38.vma'</span></span><br><span class="line">INFO: starting kvm to execute backup task</span><br><span class="line">Total translation table size: 0</span><br><span class="line">Total rockridge attributes bytes: 417</span><br><span class="line">Total directory bytes: 0</span><br><span class="line">Path table size(bytes): 10</span><br><span class="line">Max brk space used 0</span><br><span class="line">178 extents written (0 MB)</span><br><span class="line">INFO: started backup task <span class="string">'d65a8f26-20fe-4232-abd3-ec0bcf4623cd'</span></span><br><span class="line">INFO: status: 3% (785645568/21474836480), sparse 1% (395206656), duration 3, <span class="built_in">read</span>/write 261/130 MB/s</span><br><span class="line">INFO: status: 21% (4593876992/21474836480), sparse 19% (4184059904), duration 6, <span class="built_in">read</span>/write 1269/6 MB/s</span><br><span class="line">INFO: status: 34% (7457996800/21474836480), sparse 32% (6929133568), duration 9, <span class="built_in">read</span>/write 954/39 MB/s</span><br><span class="line">INFO: status: 50% (10746396672/21474836480), sparse 46% (10083291136), duration 12, <span class="built_in">read</span>/write 1096/44 MB/s</span><br><span class="line">INFO: status: 61% (13169524736/21474836480), sparse 57% (12349382656), duration 15, <span class="built_in">read</span>/write 807/52 MB/s</span><br><span class="line">INFO: status: 70% (15039004672/21474836480), sparse 64% (13956280320), duration 18, <span class="built_in">read</span>/write 623/87 MB/s</span><br><span class="line">INFO: status: 80% (17196580864/21474836480), sparse 74% (15934279680), duration 21, <span class="built_in">read</span>/write 719/59 MB/s</span><br><span class="line">INFO: status: 89% (19120455680/21474836480), sparse 82% (17667883008), duration 24, <span class="built_in">read</span>/write 641/63 MB/s</span><br><span class="line">INFO: status: 95% (20594622464/21474836480), sparse 88% (18997477376), duration 27, <span class="built_in">read</span>/write 491/48 MB/s</span><br><span class="line">INFO: status: 100% (21474836480/21474836480), sparse 92% (19877691392), duration 28, <span class="built_in">read</span>/write 880/0 MB/s</span><br><span class="line">INFO: transferred 21474 MB <span class="keyword">in</span> 28 seconds (766 MB/s)</span><br><span class="line">INFO: stopping kvm after backup task</span><br><span class="line">INFO: archive file size: 1.49GB</span><br><span class="line">INFO: Finished Backup of VM 100 (00:00:32)</span><br><span class="line">INFO: Backup job finished</span><br></pre></td></tr></table></figure><p>输出路径在：/var/lib/vz/dump/，导入的话使用如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmrestore vzdump-qemu-xx.vma &lt;vmid&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;模版制作&quot;&gt;&lt;a href=&quot;#模版制作&quot; class=&quot;headerlink&quot; title=&quot;模版制作&quot;&gt;&lt;/a&gt;模版制作&lt;/h6&gt;&lt;p&gt;标准分区ext4，不添加swap分区，原因下文说。&lt;br&gt;&lt;img src=&quot;/images/pasted-1.png&quot; a
      
    
    </summary>
    
      <category term="Proxmox" scheme="http://yoursite.com/categories/Proxmox/"/>
    
    
      <category term="virtualization" scheme="http://yoursite.com/tags/virtualization/"/>
    
  </entry>
  
  <entry>
    <title>k8s配置secret拉取私有仓库镜像</title>
    <link href="http://yoursite.com/2019/04/10/k8s%E9%85%8D%E7%BD%AEsecret%E6%8B%89%E5%8F%96%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/04/10/k8s配置secret拉取私有仓库镜像/</id>
    <published>2019-04-10T09:11:00.000Z</published>
    <updated>2019-04-18T05:01:30.701Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs" target="_blank" rel="noopener">https://kubernetes.io/docs</a></p><h6 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat ~/.docker/config.json </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"auths"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">"harbor.station.com"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">"auth"</span><span class="string">:</span> <span class="string">"YWRtaW46SGFyYm9yMTIzNDU="</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"HttpHeaders"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">"User-Agent"</span><span class="string">:</span> <span class="string">"Docker-Client/18.06.1-ce (linux)"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>这个时候我们虽然可以通过交互式登录，使用docker pull拉取镜像，但无法通过k8s创建Pod时拉取镜像。</p><h6 id="生成密钥secret"><a href="#生成密钥secret" class="headerlink" title="生成密钥secret"></a>生成密钥secret</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl create secret docker-registry harbor --docker-server=x.x.x.x --docker-username=admin --docker-password=Harbor12345 --docker-email=xx@qq.com</span></span><br></pre></td></tr></table></figure><p>1) harbor: 指定密钥的键名称，可自行定义 2）–docker-server：指定docker仓库地址 3）–docker-username：指定docker仓库帐号 4) –docker-password：指定docker仓库密码 5) –docker-email：指定邮件地址（选填）`</p><h6 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h6><p>可以看到当前除了默认的密钥, 还有我们刚才生成的. 另外要注意的是, 该密钥只能在对应namespace使用, 也就是这里的default, 如果需要用到其他namespace, 比如说test, 就需要在生成的时候指定参数 -n test。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get secrets</span></span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-mzmtj   kubernetes.io/service-account-token   3      22m</span><br><span class="line">harbor                kubernetes.io/dockerconfigjson        1      22m</span><br></pre></td></tr></table></figure></p><h6 id="YAML例子"><a href="#YAML例子" class="headerlink" title="YAML例子"></a>YAML例子</h6><p>其中imagePullSecrets是声明拉取镜像时需要指定密钥, harbor必须和上面生成密钥的键名一致, 另外检查一下pod和密钥是否在同一个namespace, 之后k8s便可以拉取镜像。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deploy</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">harbor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">web_server</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">harbor.station.com/library/nginx:latest</span></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">harbor</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kubernetes.io/docs&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Harbor" scheme="http://yoursite.com/tags/Harbor/"/>
    
  </entry>
  
</feed>
