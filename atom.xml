<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Cheng</title>
  
  <subtitle>While the world sleeps, you dream</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-08T16:25:17.682Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes证书说明</title>
    <link href="http://yoursite.com/2019/06/08/Kubernetes%E8%AF%81%E4%B9%A6%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2019/06/08/Kubernetes证书说明/</id>
    <published>2019-06-08T15:30:00.000Z</published>
    <updated>2019-06-08T16:25:17.682Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>CFSSL是CloudFlare开源的一款PKI/TLS工具。CFSSL包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。</p>          </div><h6 id="安装CFSSL"><a href="#安装CFSSL" class="headerlink" title="安装CFSSL"></a>安装CFSSL</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure><h6 id="集群相关证书类型"><a href="#集群相关证书类型" class="headerlink" title="集群相关证书类型"></a>集群相关证书类型</h6><p>client certificate：用于服务端认证客户端，例如etcdctl、etcd proxy、fleetctl、docker客户端。</p><p>server certificate：服务端使用，客户端以此验证服务端身份，例如docker服务端、kube-apiserver。</p><p>peer certificate：双向证书，用于etcd集群成员间通信。</p><p>根据认证对象可以将证书分成三类：服务器证书server cert，客户端证书client cert，对等证书peer cert（表示既是server cert又是client cert），在kubernetes集群中需要的证书种类如下：</p><ul><li>etcd节点需要标识自己服务的server cert，也需要client cert与etcd集群其他节点交互，当然可以分别指定2个证书，也可以使用一个对等证书。</li><li>master节点需要标识apiserver服务的server cert，也需要client cert连接etcd集群，这里也使用一个对等证书。</li><li>kubectl，calico，kube-proxy只需要client cert，因此证书请求中hosts字段可以为空。</li><li>kubelet证书比较特殊，不是手动生成，它由node节点TLS BootStrap向apiserver请求，由master节点的controller-manager 自动签发，包含一个client cert和一个server cert。</li></ul><h6 id="创建CA配置文件"><a href="#创建CA配置文件" class="headerlink" title="创建CA配置文件"></a>创建CA配置文件</h6><p>配置证书生成策略，规定CA可以颁发哪种类型的证书<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"signing"</span>: &#123;</span><br><span class="line">        <span class="attr">"default"</span>: &#123;</span><br><span class="line">            <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">            <span class="attr">"kubernetes"</span>: &#123;</span><br><span class="line">                <span class="attr">"usages"</span>: [</span><br><span class="line">                    <span class="string">"signing"</span>,</span><br><span class="line">                    <span class="string">"key encipherment"</span>,</span><br><span class="line">                    <span class="string">"server auth"</span>,</span><br><span class="line">                    <span class="string">"client auth"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>signing：表示该证书可用于签名其它证书，生成的ca.pem证书中CA=TRUE</li><li>server auth：表示client可以用该该证书对server提供的证书进行验证</li><li>client auth：表示server可以用该该证书对client提供的证书进行验证</li></ul><h6 id="创建CA证书签名请求"><a href="#创建CA证书签名请求" class="headerlink" title="创建CA证书签名请求"></a>创建CA证书签名请求</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ca-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 4096</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ca"</span>: &#123;</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CN：Common Name，kube-apiserver从证书中提取该字段作为请求的用户名 (User Name)，浏览器使用该字段验证网站是否合法</li><li>O：Organization，kube-apiserver从证书中提取该字段作为请求用户所属的组 (Group)</li><li>kube-apiserver将提取的User、Group作为RBAC授权的用户标识</li><li>请不要修改证书配置的CN、O字段，这两个字段名称比较特殊，大多数为system:开头，实际上是为了匹配RBAC规则</li></ul><h6 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h6><p>生成CA所必需的文件ca-key.pem（私钥）和ca.pem（证书），还会生成ca.csr（证书签名请求），用于交叉签名或重新签名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">CA</span><br><span class="line">├── ca-config.json</span><br><span class="line">├── ca.csr</span><br><span class="line">├── ca-csr.json</span><br><span class="line">├── ca-key.pem</span><br><span class="line">└── ca.pem</span><br><span class="line"></span><br><span class="line">0 directories, 5 files</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;CFSSL是CloudFlare开源的一款PKI/TLS工具。CFSSL包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。&lt;/p&gt;
          &lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Harbor彻底删除镜像</title>
    <link href="http://yoursite.com/2019/05/16/Harbor%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/05/16/Harbor彻底删除镜像/</id>
    <published>2019-05-16T01:10:00.000Z</published>
    <updated>2019-05-16T01:21:18.221Z</updated>
    
    <content type="html"><![CDATA[<p>Harbor私有仓库运行一段时间后，仓库中存有大量镜像，会占用太多的存储空间。直接通过Harbor界面删除相关镜像，并不会自动删除存储中的文件和镜像。需要停止Harbor服务，执行垃圾回收命令，进行存储空间清理和回收。</p><h1 id="先在Harbor-UI中删除不需要的镜像"><a href="#先在Harbor-UI中删除不需要的镜像" class="headerlink" title="先在Harbor UI中删除不需要的镜像"></a>先在Harbor UI中删除不需要的镜像</h1><p><img src="/images/pasted-16.png" alt="upload successful"></p><p><img src="/images/pasted-17.png" alt="upload successful"></p><h1 id="停止Harbor服务，执行垃圾回收命令"><a href="#停止Harbor服务，执行垃圾回收命令" class="headerlink" title="停止Harbor服务，执行垃圾回收命令"></a>停止Harbor服务，执行垃圾回收命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br><span class="line">docker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect --dry-run /etc/registry/config.yml \\使用--dry-run参数运行容器，预览运行效果，但不删除任何数据</span><br><span class="line">docker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect  /etc/registry/config.yml \\不使用--dry-run参数，将删除相关的文件和镜像</span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure><h1 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h1><ul><li><p>统计目录/data/registry/docker/registry/v2/blobs&amp;repositories，对比之前大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /data/registry/docker/registry/v2/blobs&amp;repositories</span><br></pre></td></tr></table></figure></li><li><p>重新上传之前删除的镜像，如没成功删除会报镜像已存在。</p></li></ul><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>搭建镜像仓库是容器云最核心的步骤之一。基本上最近几年大家都在自己的容器集群中搭建了镜像仓库。作为开源项目，Docker发布的Registry(V1版本)和最后发布了一份Distribution(V2版本)都在解决这个事情。但是不管是当初快速迭代的时候没有仔细考虑，还是迭代速度太快欠下来的技术债，反正是把我们这些实际应用者郁闷了良久。因为真正运营起一套容器云系统之后，会产生大量的镜像，这些镜像的管理就会摆上日程。一般用了没多久，就发现在单机上可以轻易删除镜像的操作在镜像仓库上尽然没有提供。当然在社区发现此问题后在第二个版本中，已经提供了相关的删除方案。当时因为其中细节有趣，我拿出来讲讲，让各位看官能顺着文字知道个前后因果。</p><p>在Distribution的代码库中查看ROADMAP.md中有明确的说明删除操作的利弊。首先，镜像内容是存储在一层虚拟文件系统(VFS)之上，由多个文件块(Blobs)、描述清单文件(Manifests)和 标签文件（tags）组成，因为镜像设计是多层的。所以这些文件会互相依赖，在没有确认文件块(Blob)是否被其他镜像使用的情况下，直接删除会让仓库不完整。所以一般的做法是只做删除标记，而不是真删除，通过垃圾回收机制来遍历当前仓库的有向关系图(DAG)，然后在删除没有被引用的文件块。</p><p>目前Docker Distribution属于维护阶段，已经再把实现标准往OCI社区迁移。所以未来大家应该以OCI镜像作为基准。通过<a href="https://github.com/docker/distribution/pull/2076" target="_blank" rel="noopener">代码补丁</a>来实现支持OCI版本的镜像仓库。</p><p>如何有效的删除镜像的方法也是有的，大致分为4种方法，请参考：</p><p>Reference Counting- 引用计数。</p><p>Lock the World GC- 全局垃圾回收。</p><p>Generational GC- 两代垃圾回收。</p><p>Centralized Oracle- 中央数据库。</p><p>每种方案都有利弊。所以在实现过程中一定要多考虑和实践。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Harbor私有仓库运行一段时间后，仓库中存有大量镜像，会占用太多的存储空间。直接通过Harbor界面删除相关镜像，并不会自动删除存储中的文件和镜像。需要停止Harbor服务，执行垃圾回收命令，进行存储空间清理和回收。&lt;/p&gt;
&lt;h1 id=&quot;先在Harbor-UI中删除不
      
    
    </summary>
    
    
      <category term="Harbor" scheme="http://yoursite.com/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>集群常用设置</title>
    <link href="http://yoursite.com/2019/05/15/%E9%9B%86%E7%BE%A4%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/05/15/集群常用设置/</id>
    <published>2019-05-15T15:35:00.000Z</published>
    <updated>2019-06-08T15:21:19.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器CentOS系统安装完毕后的基本配置"><a href="#服务器CentOS系统安装完毕后的基本配置" class="headerlink" title="服务器CentOS系统安装完毕后的基本配置"></a>服务器CentOS系统安装完毕后的基本配置</h1><p>使用root用户在管理节点和计算节点上进行以下操作：</p><ul><li><p>修改/etc/profile.d/perl-homedir.sh配置文件，以免每次登录用户，自动在家目录下生成perl5文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/PERL_HOMEDIR=1/PERL_HOMEDIR=0/'</span> /etc/profile.d/perl-homedir.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$(perl -Mlocal::lib=$HOME/.perl5)"'</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/sudoers配置文件，将自己的用户（例如 train）变成超级管理员用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -i.bak -e <span class="string">'while (&lt;&gt;) &#123; if (/^root/) &#123; print; print "train   ALL=(ALL)       NOPASSWD:ALL\n"; last; &#125; else &#123; print &#125; &#125;'</span> /etc/sudoers</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/selinux/config配置文件，永久关闭linux的一个安全机制，开启该安全机制会对很多操作造成阻碍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/ssh/sshd_config配置文件，使openssh远程登录更安全，更快速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/#RSAAuthentication/RSAAuthentication/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/#PubkeyAuthentication/PubkeyAuthentication/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/#AuthorizedKeysFile/AuthorizedKeysFile/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*PermitRootLogin.*/PermitRootLogin no/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*Protocol\s+2.*/Protocol 2/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*ClientAliveInterval.*/ClientAliveInterval 60/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*ClientAliveCountMax.*/ClientAliveCountMax 10/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*UseDNS.*/UseDNS no/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/GSSAPIAuthentication yes/GSSAPIAuthentication no/'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure></li><li><p>增加系统资源权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/^\*.*\n$//'</span> /etc/security/limits.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/security/limits.conf</span><br><span class="line">*       soft    nofile  10240</span><br><span class="line">*       hard    nofile  102400</span><br><span class="line">*       soft    stack   10240</span><br><span class="line">*       hard    stack   102400</span><br><span class="line">*       soft    core    unlimited</span><br><span class="line">*       hard    core    unlimited</span><br><span class="line">*       soft    nproc   10240</span><br><span class="line">*       hard    nproc   102400</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h1 id="配置集群中各服务器的主机名和IP地址"><a href="#配置集群中各服务器的主机名和IP地址" class="headerlink" title="配置集群中各服务器的主机名和IP地址"></a>配置集群中各服务器的主机名和IP地址</h1><p>使用root用户在管理节点 和计算节点服务器上对infiniband网口进行配置，修改 /etc/sysconfig/network-scripts/ifcfg-ib0 配置文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.1.12</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure></p><p>修改好ifcfg文件后，重启网络服务，使生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p><p>各节点服务器在infiniband网络之间的联通需要在控制节点node1上安装一些相关的系统软件，并启用相应服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install opensm* opensm-devel* infiniband-diags perftest* gperf* opensm*</span><br><span class="line">systemctl restart opensm.service</span><br><span class="line">systemctl <span class="built_in">enable</span> rdma.service</span><br><span class="line">systemctl <span class="built_in">enable</span> opensm.service</span><br></pre></td></tr></table></figure></p><p>然后将所有节点服务器的 /etc/hosts 文件内容修改成同样的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /etc/hosts</span><br><span class="line">192.168.1.12    master</span><br><span class="line">192.168.1.13    node01</span><br><span class="line">192.168.1.14    node02</span><br><span class="line">192.168.1.15    node03</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h1 id="将控制节点的以太网共享给计算节点"><a href="#将控制节点的以太网共享给计算节点" class="headerlink" title="将控制节点的以太网共享给计算节点"></a>将控制节点的以太网共享给计算节点</h1><p>控制节点通过电信100M宽带连接外网，通过网线将master控制节点连接到电信网关（光猫和路由器合一的电信盒子）上。设置网口自动使用DHCP方法分配IP地址即可。在外网可以正常连接的情况，可以将该网络通过infiniband网卡共享给其它计算节点。</p><p>在master控制节点上使用root用户进行操作：</p><ul><li>开启NAT转发</li><li>开放DNS使用的53端口并重启防火墙，否则可能导致内网服务器虽然设置正确的DNS，但是依然无法进行域名解析。</li><li><p>控制节点上是在eth0网口连接外网，对其网络进行共享。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> firewall-cmd --permanent --zone=public --add-masquerade</span><br><span class="line"></span><br><span class="line"> firewall-cmd --zone=public --add-port=53/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'net.ipv4.ip_forward=1'</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"> sysctl -p</span><br><span class="line"> firewall-cmd --permanent --direct --passthrough ipv4 -t nat -I POSTROUTING -o eth0 -j MASQUERADE -s 12.12.12.0/24</span><br><span class="line"> systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></li></ul><p>在计算节点上对infiniband网卡进行IP设置时，将网关设置成提供网络的主机IP即可，即将网关设置成master管理节点的IP地址。</p><h1 id="将控制节点的存储共享给计算节点"><a href="#将控制节点的存储共享给计算节点" class="headerlink" title="将控制节点的存储共享给计算节点"></a>将控制节点的存储共享给计算节点</h1><p>在控制节点master服务器上，修改NFS配置文件/etc/sysconfig/nfs配置文件，打开所有带有PORT的注释行，表示使用相应的防火墙端口，并修改防火墙配置，开放对应端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/^#(.*PORT)/$1/'</span> /etc/sysconfig/nfs</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=32803/udp --permanent</span><br><span class="line">firewall-cmd --add-port=32803/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=32769/udp --permanent</span><br><span class="line">firewall-cmd --add-port=32769/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=892/udp --permanent</span><br><span class="line">firewall-cmd --add-port=892/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=662/udp --permanent</span><br><span class="line">firewall-cmd --add-port=662/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=2020/udp --permanent</span><br><span class="line">firewall-cmd --add-port=2020/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=875/udp --permanent</span><br><span class="line">firewall-cmd --add-port=875/tcp --permanent</span><br><span class="line"></span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></p><p>然后，在控制节点master服务器上，启动NFS服务，并设置成开机启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rpcbind.service</span><br><span class="line">systemctl restart nfs.service</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs.service</span><br></pre></td></tr></table></figure></p><p>继续，在控制节点master服务器上， 修改/etc/exports文件内容，添加被共享的文件夹信息，并使配置生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/exports</span><br><span class="line">/disk   192.168.1.0/24(rw,sync,no_root_squash,no_subtree_check)</span><br><span class="line">/opt    192.168.1.0/24(rw,sync,no_root_squash,no_subtree_check)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure></p><p>在各计算节点服务器上，使用root用户修改配置文件/etc/fstab，对master的共享文件夹进行挂载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir /disk</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/fstab</span><br><span class="line">192.168.1.12:/disk        /disk   nfs     defaults        0       0</span><br><span class="line">192.168.1.12:/opt /opt    nfs     defaults        0       0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure></p><h1 id="在集群计算机上创建新用户"><a href="#在集群计算机上创建新用户" class="headerlink" title="在集群计算机上创建新用户"></a>在集群计算机上创建新用户</h1><p>首先，生成文件/disk/users.txt。该文件每行一个待生成的用户名。</p><p>然后，在所有节点服务器中进行操作，生成用户并使create_random_passwd.pl命令赋予随机密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /disk</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    useradd <span class="variable">$i</span> 2&gt; /dev/null</span><br><span class="line">    ./create_random_passwd.pl <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>在控制节点master服务器中进行操作：在大容量存储对应的共享文件夹中建立新用户的专属文件夹；使用root用户生成新用户的ssh密钥对数据和授权文件信息并放入到各新用户的家目录下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/bin/rm /disk/ssh_info/ -rf</span><br><span class="line">mkdir -p /disk/ssh_info/</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mkdir /disk/ssh_info//<span class="variable">$i</span> /disk/<span class="variable">$i</span></span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /disk/<span class="variable">$i</span></span><br><span class="line">    chmod 700 /disk/<span class="variable">$i</span></span><br><span class="line">    ssh-keygen -t dsa -P <span class="string">''</span> -f /disk/ssh_info/<span class="variable">$i</span>/id_dsa</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /disk/ssh_info/<span class="variable">$i</span></span><br><span class="line">    mkdir /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    /bin/cp -a /disk/ssh_info/<span class="variable">$i</span>/* /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chmod 700 /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    cat /disk/ssh_info/<span class="variable">$i</span>/id_dsa.pub &gt;&gt; /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chmod 600 /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>在各个计算节点服务器中使用root用户将上一步生成的ssh密钥对数据和授权文件信息放入到计算节点服务器中各新用户的家目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /disk</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    useradd <span class="variable">$i</span> 2&gt; /dev/null</span><br><span class="line">    ./create_random_passwd.pl <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mkdir /home/<span class="variable">$i</span>/.ssh </span><br><span class="line">    /bin/cp -a /disk/ssh_info/<span class="variable">$i</span>/* /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chmod 700 /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    cat /disk/ssh_info/<span class="variable">$i</span>/id_dsa.pub &gt;&gt; /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chmod 600 /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>create_random_passwd.pl程序代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="comment">#use strict;</span></span><br><span class="line"><span class="keyword">use</span> Getopt::Long;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $usage = &lt;&lt;USAGE;</span><br><span class="line">Usage:</span><br><span class="line">    $0 [options] username</span><br><span class="line"></span><br><span class="line">    使用root用户执行该程序，输入用户名，则能调用passwd命令给该用户创建一个随机密码。并将用户名及其密码输出到标准输出。</span><br><span class="line">    --<span class="keyword">length</span> &lt;<span class="keyword">int</span>&gt;    default:<span class="number">10</span></span><br><span class="line">    设置生成密码的字符长度。</span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line"><span class="keyword">if</span> (@ARGV==<span class="number">0</span>) &#123; <span class="keyword">die</span> $usage &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $length;</span><br><span class="line">GetOptions(</span><br><span class="line">    <span class="string">"length:i"</span> =&gt; \$length,</span><br><span class="line">);</span><br><span class="line">$length ||= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">my</span> @cha = (<span class="string">'!'</span>, <span class="string">'@'</span>, <span class="string">'#'</span>, <span class="string">'$'</span>, <span class="string">'%'</span>, <span class="string">'^'</span>, <span class="string">'&amp;'</span>, <span class="string">'*'</span>, <span class="string">'.'</span>, <span class="string">'_'</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="number">0</span>..<span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">push</span> @cha, $_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (a..z) &#123;</span><br><span class="line">    <span class="keyword">push</span> @cha, $_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (A..Z) &#123;</span><br><span class="line">    <span class="keyword">push</span> @cha, $_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $passwd;</span><br><span class="line"><span class="keyword">for</span> (<span class="number">1</span>..$length) &#123;</span><br><span class="line">    <span class="keyword">my</span> $cha_num = <span class="keyword">rand</span>(@cha);</span><br><span class="line">    $passwd .= $cha[$cha_num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"$ARGV[0]\t$passwd\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $cmdString = <span class="string">"echo \'$passwd\' | passwd --stdin $ARGV[0] &amp;&gt; /dev/null"</span>;</span><br><span class="line">(<span class="keyword">system</span> $cmdString) == <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">"Faield to excute: $cmdString, $!\n"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="远程桌面软件vncserver安装和使用"><a href="#远程桌面软件vncserver安装和使用" class="headerlink" title="远程桌面软件vncserver安装和使用"></a>远程桌面软件vncserver安装和使用</h1><p>由于控制节点master是连接到了电信网关上，没有固定IP地址，推荐使用vnc来对内网服务器使用图形化桌面方法进行控制。</p><p>首先，使用root用户在master服务器上进行操作，安装vncserver软件并开放相应的防火墙5901，5902，5903端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install vcn vnc-server</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=pulic --add-port=5901/tcp --permanent</span><br><span class="line">firewall-cmd --zone=pulic --add-port=5902/tcp --permanent</span><br><span class="line">firewall-cmd --zone=pulic --add-port=5903/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></p><p>然后，使用普通用户（例如，train）开启vncserver服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br><span class="line"><span class="comment"># 第一次启动需要输入密码</span></span><br></pre></td></tr></table></figure></p><p>进行其它vnc操作并修改桌面分辨率，提供更好的vnc体验：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看当前开启的vncserver桌面列表</span><br><span class="line">vncserver -list</span><br><span class="line"></span><br><span class="line">查看第一个vncserver桌面的端口号</span><br><span class="line">cat ~/.vnc/node1\:1.log</span><br><span class="line"></span><br><span class="line">关闭第一个vncserver桌面 </span><br><span class="line">vncserver -<span class="built_in">kill</span> :1</span><br><span class="line"></span><br><span class="line">修改vncserver桌面的分辨率</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; .vnc/config</span><br><span class="line">geometry=2000x1052</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">关闭后再次启动vncserver桌面，则分辨率变得更好了</span><br><span class="line">vncserve</span><br></pre></td></tr></table></figure></p><p>为了让vnc能在外网对master进行控制。需要将master控制节点服务器和公网服务器使用ssh进行连接，开启反向隧道，并进行端口转发，在master服务器上进行操作。以下命令将master服务器VNC服务对应的5901端口映射到公网服务器xxx.xx.xxx.xx的4497端口上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -f -R 4497:localhost:5901 train@xxx.xx.xxx.xx</span><br></pre></td></tr></table></figure></p><p>注意，以上命令需要在公网服务器xxx.xx.xxx.xx上拥有train用户的密码，才能ssh连接成功；并且，还需要使用该公网服务器的root用户开启4497防火墙端口，同时在ssh配置文件设置允许端口转发，才能使vnc访问生效。</p><p>最后，在windows系统下下载vncviewer软件，然后安装并打开软件，输入xxx.xx.xxx.xx:4497，再输入之前设置的密码，即可访问远程桌面。</p><h1 id="在控制节点上控制计算节点的开机和关机"><a href="#在控制节点上控制计算节点的开机和关机" class="headerlink" title="在控制节点上控制计算节点的开机和关机"></a>在控制节点上控制计算节点的开机和关机</h1><p>在控制节点上，对计算节点可以使用ssh连接并导入shutdown指令的方法进关机。基于此原理，编写名为poweroff的Perl程序来对指定的节点进行关机。该程序代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $usage = &lt;&lt;USAGE;</span><br><span class="line">Usage:</span><br><span class="line">    $0 node1<span class="number">0</span> node11 node12 ...</span><br></pre></td></tr></table></figure></p><p>使用此命令关闭目标节点。该命令后可以输入1个或多个主机名，关闭相应的计算节点。若命令后输入的主机名中有一个是all，则会关闭所有的计算节点（从node11到node20）。此外，支持node11-node15这样中间带有中划线的输入方法，表示多个连续的节点。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line">    $0 node11 node13-node16 node2<span class="number">0</span></span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line"><span class="keyword">if</span> (@ARGV==<span class="number">0</span>)&#123;<span class="keyword">die</span> $usage&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @node = <span class="keyword">qw</span>/node1<span class="number">0</span> node11 node12 node13 node14 node15 node16 node17 node18 node19 node2<span class="number">0</span>/;</span><br><span class="line"><span class="keyword">my</span> %node;</span><br><span class="line"><span class="keyword">foreach</span> (@node) &#123; $node&#123;$_&#125; = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> %target;</span><br><span class="line"><span class="keyword">foreach</span> (@ARGV) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_ eq <span class="string">"all"</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (@node) &#123; $target&#123;$_&#125; = <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elsif</span> (<span class="regexp">m/(\d+)-node(\d+)/</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($1 .. $2) &#123;</span><br><span class="line">            $target&#123;<span class="string">"node$_"</span>&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">exists</span> $node&#123;$_&#125;) &#123;</span><br><span class="line">            $target&#123;$_&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span> STDERR <span class="string">"Warning: $_不是能控制的目标节点。\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">sort</span> <span class="keyword">keys</span> %target) &#123;</span><br><span class="line">    &amp;guanji($_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">guanji</span> </span>&#123;</span><br><span class="line">    <span class="keyword">print</span> STDERR <span class="string">"正在检测到 $_ 的连接\n"</span>;</span><br><span class="line">    <span class="keyword">my</span> $ping = <span class="string">`ping $_ -c 1`</span>;</span><br><span class="line">    <span class="keyword">if</span> ($ping =~ <span class="regexp">m/Unreachable/</span>) &#123;</span><br><span class="line">        <span class="keyword">print</span> STDERR <span class="string">"Warning: $_连接失败，可能已经处于关机状态。\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">my</span> $cmdString = <span class="string">"ssh $_ 'sudo shutdown -h now' &amp;&gt; /dev/null"</span>;</span><br><span class="line">        <span class="keyword">system</span> $cmdString;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"对主机 $_ 已经发送关机指令\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在控制节点node1上，可以使用<a href="http://www.chenlianfu.com/?p=2874" target="_blank" rel="noopener">wol软件基于网络唤醒的方法对计算节点进行开机</a>。基于此原理，编写名为 kaiji 的Perl程序对指定节点进行开机。该程序代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $usage = &lt;&lt;USAGE;</span><br><span class="line">Usage:</span><br><span class="line">    $0 node1<span class="number">0</span> node11 node12 ...</span><br></pre></td></tr></table></figure></p><p>使用此命令开启目标节点。该命令后可以输入1个或多个主机名，开启相应的计算节点。若命令后输入的主机名中有一个是all，则会开启所有的计算节点（从node11到node20）。此外，支持node11-node15这样中间带有中划线的输入方法，表示多个连续的节点。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line">    $0 node11 node13-node16 node2<span class="number">0</span></span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line"><span class="keyword">if</span> (@ARGV==<span class="number">0</span>)&#123;<span class="keyword">die</span> $usage&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @node = <span class="keyword">qw</span>/node1<span class="number">0</span> node11 node12 node13 node14 node15 node16 node17 node18 node19 node2<span class="number">0</span>/;</span><br><span class="line"><span class="keyword">my</span> %node = (<span class="string">"node10"</span> =&gt; <span class="string">"00:e0:ec:27:e9:f0"</span>,</span><br><span class="line"><span class="string">"node11"</span> =&gt; <span class="string">"e8:61:1f:11:e9:4b"</span>,</span><br><span class="line"><span class="string">"node12"</span> =&gt; <span class="string">"e8:61:1f:11:e8:3f"</span>,</span><br><span class="line"><span class="string">"node13"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:80"</span>,</span><br><span class="line"><span class="string">"node14"</span> =&gt; <span class="string">"e8:61:1f:1b:ed:84"</span>,</span><br><span class="line"><span class="string">"node15"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:9e"</span>,</span><br><span class="line"><span class="string">"node16"</span> =&gt; <span class="string">"e8:61:1f:1b:ed:0e"</span>,</span><br><span class="line"><span class="string">"node17"</span> =&gt; <span class="string">"e8:61:1f:1b:ed:b4"</span>,</span><br><span class="line"><span class="string">"node18"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:94"</span>,</span><br><span class="line"><span class="string">"node19"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:5a"</span>,</span><br><span class="line"><span class="string">"node20"</span> =&gt; <span class="string">"e8:61:1f:1b:eb:d0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> %target;</span><br><span class="line"><span class="keyword">foreach</span> (@ARGV) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_ eq <span class="string">"all"</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (@node) &#123; $target&#123;$_&#125; = <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elsif</span> (<span class="regexp">m/(\d+)-node(\d+)/</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($1 .. $2) &#123;</span><br><span class="line">            $target&#123;<span class="string">"node$_"</span>&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">exists</span> $node&#123;$_&#125;) &#123;</span><br><span class="line">            $target&#123;$_&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span> STDERR <span class="string">"Warning: $_不是能控制的目标节点。\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">sort</span> <span class="keyword">keys</span> %target) &#123;</span><br><span class="line">        &amp;kaiji($_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">kaiji</span> </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"对主机 $_ 已经发送开机指令\n"</span>;</span><br><span class="line">        <span class="keyword">my</span> $cmdString = <span class="string">"/opt/sysoft/wol-0.7.1/bin/wol --host=10.10.10.255 $node&#123;$_&#125;"</span>;</span><br><span class="line">        <span class="keyword">system</span> $cmdString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器CentOS系统安装完毕后的基本配置&quot;&gt;&lt;a href=&quot;#服务器CentOS系统安装完毕后的基本配置&quot; class=&quot;headerlink&quot; title=&quot;服务器CentOS系统安装完毕后的基本配置&quot;&gt;&lt;/a&gt;服务器CentOS系统安装完毕后的基本配置&lt;/
      
    
    </summary>
    
      <category term="HPC" scheme="http://yoursite.com/categories/HPC/"/>
    
    
  </entry>
  
  <entry>
    <title>在Centos7部署SGE</title>
    <link href="http://yoursite.com/2019/05/15/%E5%9C%A8Centos7%E9%83%A8%E7%BD%B2SGE/"/>
    <id>http://yoursite.com/2019/05/15/在Centos7部署SGE/</id>
    <published>2019-05-15T14:41:00.000Z</published>
    <updated>2019-06-08T15:21:02.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置防火墙，放行SGE所需端口"><a href="#设置防火墙，放行SGE所需端口" class="headerlink" title="设置防火墙，放行SGE所需端口"></a>设置防火墙，放行SGE所需端口</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --add-port=992/udp --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --add-port=6444/tcp --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --add-port=6445/tcp --permanent</span></span><br><span class="line"><span class="comment"># systemctl restart firewalld.service</span></span><br></pre></td></tr></table></figure><h1 id="从SGE官网下载最新版本的SGE源码包并进行编译和安装"><a href="#从SGE官网下载最新版本的SGE源码包并进行编译和安装" class="headerlink" title="从SGE官网下载最新版本的SGE源码包并进行编译和安装"></a>从SGE官网下载最新版本的SGE源码包并进行编译和安装</h1><h2 id="安装依赖的系统软件"><a href="#安装依赖的系统软件" class="headerlink" title="安装依赖的系统软件"></a>安装依赖的系统软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install csh java-1.8.0-openjdk java-1.8.0-openjdk-devel gcc ant automake hwloc-devel openssl-devel libdb-devel pam-devel libXt-devel motif-devel ncurses-libs ncurses-devel</span></span><br><span class="line"><span class="comment"># yum install ant-junit junit javacc</span></span><br></pre></td></tr></table></figure><h2 id="下载SGE软件并进行编译"><a href="#下载SGE软件并进行编译" class="headerlink" title="下载SGE软件并进行编译"></a>下载SGE软件并进行编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://arc.liv.ac.uk/downloads/SGE/releases/8.1.9/sge-8.1.9.tar.gz -P ~/software/</span><br><span class="line">$ tar zxf ~/software/sge-8.1.9.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> sge-8.1.9/<span class="built_in">source</span></span><br><span class="line">$ ./scripts/bootstrap.sh</span><br><span class="line">$ ./aimk -no-herd -no-java</span><br></pre></td></tr></table></figure><h2 id="将编译好的SGE安装到指定的文件夹"><a href="#将编译好的SGE安装到指定的文件夹" class="headerlink" title="将编译好的SGE安装到指定的文件夹"></a>将编译好的SGE安装到指定的文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /opt/sysoft/sge</span></span><br><span class="line"><span class="comment"># export SGE_ROOT=/opt/sysoft/sge</span></span><br><span class="line"><span class="comment"># ./scripts/distinst -local -allall -noexit</span></span><br><span class="line"><span class="comment"># cd ../../ &amp;&amp; rm sge-8.1.9/ -rf</span></span><br><span class="line"><span class="comment"># echo 'export SGE_ROOT=/opt/sysoft/sge' &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="comment"># echo 'PATH=$PATH:/opt/sysoft/sge/bin/:/opt/sysoft/sge/bin/lx-amd64/' &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="comment"># source ~/.bashrc</span></span><br></pre></td></tr></table></figure><h1 id="部署SGE前设置主机名"><a href="#部署SGE前设置主机名" class="headerlink" title="部署SGE前设置主机名"></a>部署SGE前设置主机名</h1><p>部署SGE前，需要设置好各个节点的主机名，需要修改3个文件。修改配置文件 /etc/sysconfig/network 内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=master</span><br></pre></td></tr></table></figure></p><p>修改配置文件 /proc/sys/kernel/hostname 内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master</span><br></pre></td></tr></table></figure></p><p>修改配置文件 /etc/hosts 内容（注意删除掉127.0.0.1和localhost的行）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.30.1 master</span><br><span class="line">192.168.30.2 node1</span><br><span class="line">192.168.30.3 node2</span><br><span class="line">192.168.30.4 node3</span><br></pre></td></tr></table></figure></p><h1 id="在所有节点上部署SGE"><a href="#在所有节点上部署SGE" class="headerlink" title="在所有节点上部署SGE"></a>在所有节点上部署SGE</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SGE_ROOT</span></span><br><span class="line">./install_qmaster</span><br></pre></td></tr></table></figure><p>运行部署命令后，会进入交互式界面。基本上全部都按Enter键使用默认设置即可。需要注意的事项是：</p><div class="note warning">            <ol><li>有一步骤是启动Grid Engine qmasster服务，可能会启动不了导致失败。原因是多次运行该命令进行部署，第一次会成功运行qmaster daemon，以后重新运行该程序进行部署则会失败。需要删除相应的sge_qmaster进程再进行部署。 </li><li>启动Grid Engine qmasster服务，要提供部署SGE的节点主机名信息，按y和Enter键使用一个文件来提供主机信息，输入文件路径/etc/hosts提供主机信息。</li></ol>          </div><p>只有先进行一个控制节点部署后，才能对各个计算节点进行部署。计算节点的部署比较简单，交互过程全部按Enter即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install_execd</span><br></pre></td></tr></table></figure></p><h1 id="启动SGE软件"><a href="#启动SGE软件" class="headerlink" title="启动SGE软件"></a>启动SGE软件</h1><p>部署完毕后，若需要使用SGE软件，则执行如下命令载入SGE的环境变量信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /opt/sysoft/sge/default/common/settings.sh</span><br></pre></td></tr></table></figure></p><p>或将该信息添加到~/.bashrc从而永久生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'source /opt/sysoft/sge/default/common/settings.sh'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>启动SGE软件方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/sysoft/sge/default/common/sgemaster    <span class="comment"># 控制节点启动</span></span><br><span class="line">$ /opt/sysoft/sge/default/common/sgeexecd     <span class="comment"># 计算节点启动</span></span><br></pre></td></tr></table></figure></p><p>查看SGE软件运行日志文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Qmaster:      /opt/sysoft/sge/default/spool/qmaster/messages</span><br><span class="line">Exec daemon:  /opt/sysoft/sge/default/spool/&lt;hostname&gt;/messages</span><br></pre></td></tr></table></figure></p><h1 id="使用SGE软件"><a href="#使用SGE软件" class="headerlink" title="使用SGE软件"></a>使用SGE软件</h1><p>部署完毕SGE后，会生成一个默认主机用户组@allhosts，它包含所有的执行节点；生成一个默认的all.q队列名，它包含所有节点所有计算资源。默认的队列包含的计算资源是最大的。 通过使用命令qconf -mq queuename来对队列进行配置。修改hostlist来配置该队列可以使用执行主机；修改slots来配置各台执行主机可使用的线程数。从而对队列的计算资源进行设置。</p><p>使用qconf命令对SGE进行配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">qconf -ae hostname</span><br><span class="line">    添加执行主机</span><br><span class="line">qconf -de hostname</span><br><span class="line">    删除执行主机</span><br><span class="line">qconf -sel</span><br><span class="line">    显示执行主机列表</span><br><span class="line"></span><br><span class="line">qconf -ah hostname</span><br><span class="line">    添加管理主机</span><br><span class="line">qconf -dh hostname</span><br><span class="line">    删除管理主机</span><br><span class="line">qconf -sh</span><br><span class="line">    显示管理主机列表</span><br><span class="line"></span><br><span class="line">qconf -as hostname</span><br><span class="line">    添加提交主机</span><br><span class="line">qconf -ds hostname</span><br><span class="line">    删除提交主机</span><br><span class="line">qconf -ss</span><br><span class="line">    显示提交主机列表</span><br><span class="line"></span><br><span class="line">qconf -ahgrp groupname</span><br><span class="line">    添加主机用户组</span><br><span class="line">qconf -mhgrp groupname</span><br><span class="line">    修改主机用户组</span><br><span class="line">qconf -shgrp groupname</span><br><span class="line">    显示主机用户组成员</span><br><span class="line">qconf -shgrpl</span><br><span class="line">    显示主机用户组列表</span><br><span class="line"></span><br><span class="line">qconf -aq queuename</span><br><span class="line">    添加集群队列</span><br><span class="line">qconf -dq queuename</span><br><span class="line">    删除集群队列</span><br><span class="line">qconf -mq queuename</span><br><span class="line">    修改集群队列配置</span><br><span class="line">qconf -sq queuename</span><br><span class="line">    显示集群队列配置</span><br><span class="line">qconf -sql</span><br><span class="line">    显示集群队列列表</span><br><span class="line"></span><br><span class="line">qconf -ap PE_name</span><br><span class="line">    添加并行化环境</span><br><span class="line">qconf -mp PE_name</span><br><span class="line">    修改并行化环境</span><br><span class="line">qconf -dp PE_name</span><br><span class="line">    删除并行化环境</span><br><span class="line">qconf -sp PE_name</span><br><span class="line">    显示并行化环境</span><br><span class="line">qconf -spl</span><br><span class="line">    显示并行化环境名称列表</span><br><span class="line"></span><br><span class="line">qstat -f</span><br><span class="line">    显示执行主机状态</span><br><span class="line">qstat -u user</span><br><span class="line">    查看用户的作业</span><br><span class="line">qhost</span><br><span class="line">    显示执行主机资源信息</span><br></pre></td></tr></table></figure></p><p>使用qsub提交作业<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">qsub简单示例：</span><br><span class="line">$ qsub -V -cwd -o stdout.txt -e stderr.txt run.sh</span><br><span class="line"></span><br><span class="line">其中run.sh中包含需要运行的程序，其内容示例为如下三行：</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#$ -S /bin/bash</span></span><br><span class="line">perl -e <span class="string">'print "abc\n";print STDERR "123\n";'</span></span><br><span class="line"></span><br><span class="line">qsub的常用参数：</span><br><span class="line">-V</span><br><span class="line">    将当前shell中的环境变量输出到本次提交的任务中。</span><br><span class="line">-cwd</span><br><span class="line">    在当前工作目录下运行程序。默认设置下，程序的运行目录是当前用户在其计算节点的家目录。</span><br><span class="line">-o</span><br><span class="line">    将标准输出添加到指定文件尾部。默认输出文件名是<span class="variable">$job_name</span>.o<span class="variable">$job_id</span>。</span><br><span class="line">-e</span><br><span class="line">    将标准错误输出添加到指定文件尾部。默认输出文件名是<span class="variable">$job_name</span>.e<span class="variable">$job_id</span>。</span><br><span class="line">-q</span><br><span class="line">    指定投递的队列，若不指定，则会尝试寻找最小负荷且有权限的队列开始任务。</span><br><span class="line">-S</span><br><span class="line">    指定运行run.sh中命令行的软件，默认是tcsh。推荐使用bash，设置该参数的值为 /bin/bash 即可，或者在run.sh文件首部添加一行<span class="comment">#$ -S /bin/bash。若不设置为bash，则会在标准输出中给出警告信息：Warning: no access to tty (Bad file descriptor)。</span></span><br><span class="line">-hold_jid</span><br><span class="line">    后接多个使用逗号分隔的job_id，表示只有在这些job运行完毕后，才开始运行此任务。</span><br><span class="line">-N</span><br><span class="line">    设置任务名称。默认的job name为qsub的输入文件名。</span><br><span class="line">-p</span><br><span class="line">    设置任务优先级。其参数值范围为 -1023 ~ 1024 ，该值越高，越优先运行。但是该参数设置为正数需要较高的权限，系统普通用户不能设置为正数。</span><br><span class="line">-j y|n</span><br><span class="line">    设置是否将标准输出和标准错误输出流合并到 -o 参数结果中。</span><br><span class="line">-pe</span><br><span class="line">    设置并行化环境。</span><br></pre></td></tr></table></figure></p><p>任务提交后的管理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ qstat -f</span><br><span class="line">    查看当前用户在当前节点提交的所有任务，任务的状态有4中情况：qw，等待状态，刚提交任务的时候是该状态，一旦有计算资源了会马上运行；hqw，该任务依赖于其它正在运行的job，待前面的job执行完毕后再开始运行，qsub提交任务的时候使用-hold_jid参数则会是该状态；Eqw，投递任务出错；r，任务正在运行；s，被暂时挂起，往往是由于优先级更高的任务抢占了资源；dr，节点挂掉后，删除任务就会出现这个状态，只有节点重启后，任务才会消失。</span><br><span class="line"></span><br><span class="line">$ qstat -j jobID</span><br><span class="line">    按照任务id查看</span><br><span class="line"></span><br><span class="line">$ qstat -u user</span><br><span class="line">    按照用户查看</span><br><span class="line"></span><br><span class="line">$ qdel -j jobID</span><br><span class="line">    删除任务</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设置防火墙，放行SGE所需端口&quot;&gt;&lt;a href=&quot;#设置防火墙，放行SGE所需端口&quot; class=&quot;headerlink&quot; title=&quot;设置防火墙，放行SGE所需端口&quot;&gt;&lt;/a&gt;设置防火墙，放行SGE所需端口&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="HPC" scheme="http://yoursite.com/categories/HPC/"/>
    
    
  </entry>
  
  <entry>
    <title>cobbler批量部署系统</title>
    <link href="http://yoursite.com/2019/05/12/cobbler%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/05/12/cobbler批量部署系统/</id>
    <published>2019-05-12T14:24:53.000Z</published>
    <updated>2019-05-12T14:34:07.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="关闭防火墙和selinux"><a href="#关闭防火墙和selinux" class="headerlink" title="关闭防火墙和selinux"></a>关闭防火墙和selinux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># sed -i s#SELINUX=enforcing#SELINUX=disabled# /etc/selinux/config</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl disable firewalld</span></span><br></pre></td></tr></table></figure><h2 id="修改网卡信息"><a href="#修改网卡信息" class="headerlink" title="修改网卡信息"></a>修改网卡信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># nmcli connection modify eth0 ipv4.addresses 192.168.221.10/24 ipv4.gateway 192.168.221.2 ipv4.dns 192.168.221.2 ipv4.method manual connection.autoconnect yes connection.interface-name eth0</span></span><br></pre></td></tr></table></figure><h2 id="安装cobbler相关程序包"><a href="#安装cobbler相关程序包" class="headerlink" title="安装cobbler相关程序包"></a>安装cobbler相关程序包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># yum install cobbler cobbler-web pykickstart httpd dhcp tftp-server -y</span></span><br></pre></td></tr></table></figure><h2 id="启动cobbler和httpd服务"><a href="#启动cobbler和httpd服务" class="headerlink" title="启动cobbler和httpd服务"></a>启动cobbler和httpd服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># systemctl start httpd cobblerd</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl enable httpd cobblerd</span></span><br></pre></td></tr></table></figure><h2 id="检查cobbler配置"><a href="#检查cobbler配置" class="headerlink" title="检查cobbler配置"></a>检查cobbler配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># cobbler check</span></span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line"> </span><br><span class="line">1 : The <span class="string">'server'</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than localhost, or kickstarting features will not work.  This should be a resolvable hos</span><br><span class="line">tname or IP <span class="keyword">for</span> the boot server as reachable by all machines that will use it.2 : For PXE to be functional, the <span class="string">'next_server'</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than 127.0.0.1, and should match the IP of the boot serve</span><br><span class="line">r on the PXE network.3 : change <span class="string">'disable'</span> to <span class="string">'no'</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line">4 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="string">'cobbler get-loaders'</span> to download them, or, <span class="keyword">if</span> you only want to handle x86/x86_64 </span><br><span class="line">netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="string">'cobbler get-loaders'</span> <span class="built_in">command</span> is the easiest way to resolve these requirements.5 : <span class="built_in">enable</span> and start rsyncd.service with systemctl</span><br><span class="line">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class="line">7 : The default password used by the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) is still <span class="built_in">set</span> to <span class="string">'cobbler'</span> and sh</span><br><span class="line">ould be changed, try: <span class="string">"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'"</span> to generate new one</span><br><span class="line">8 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class="line"> </span><br><span class="line">Restart cobblerd and <span class="keyword">then</span> run <span class="string">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure><h1 id="Cobbler相关问题"><a href="#Cobbler相关问题" class="headerlink" title="Cobbler相关问题"></a>Cobbler相关问题</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>修改/etc/cobbler/settings文件中的server参数的值为提供cobbler服务的主机相应的IP地址或主机名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># cp /etc/cobbler/settings&#123;,.ori&#125;</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/server: 127.0.0.1/server: 192.168.221.10/' /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>修改/etc/cobbler/settings文件中的next_server参数的值为提供PXE服务的主机相应的IP地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/next_server: 127.0.0.1/next_server: 192.168.221.10/' /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep "server: 192.168.221.10" /etc/cobbler/settings</span></span><br><span class="line">next_server: 192.168.221.10</span><br><span class="line">server: 192.168.221.10</span><br></pre></td></tr></table></figure></p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>修改/etc/xinetd.d/tftp文件中的disable参数修改为 disable = no<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># cp /etc/xinetd.d/tftp&#123;,.bak&#125;</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/disable.*= yes/disable                 = no/g' /etc/xinetd.d/tftp</span></span><br></pre></td></tr></table></figure></p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>执行 cobbler get-loaders 命令即可；否则，需要安装syslinux程序包，而后复制/usr/share/syslinux/{pxelinux.0,memu.c32}等文件至/var/lib/cobbler/loaders/目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># cobbler get-loaders</span></span><br><span class="line">task started: 2018-08-30_170803_get_loaders</span><br><span class="line">task started (id=Download Bootloader Content, time=Thu Aug 30 17:08:03 2018)</span><br><span class="line">downloading https://cobbler.github.io/loaders/README to /var/lib/cobbler/loaders/README</span><br><span class="line">downloading https://cobbler.github.io/loaders/COPYING.elilo to /var/lib/cobbler/loaders/COPYING.elilo</span><br><span class="line">downloading https://cobbler.github.io/loaders/COPYING.yaboot to /var/lib/cobbler/loaders/COPYING.yaboot</span><br><span class="line">downloading https://cobbler.github.io/loaders/COPYING.syslinux to /var/lib/cobbler/loaders/COPYING.syslinux</span><br><span class="line">downloading https://cobbler.github.io/loaders/elilo-3.8-ia64.efi to /var/lib/cobbler/loaders/elilo-ia64.efi</span><br><span class="line">downloading https://cobbler.github.io/loaders/yaboot-1.3.17 to /var/lib/cobbler/loaders/yaboot</span><br><span class="line">downloading https://cobbler.github.io/loaders/pxelinux.0-3.86 to /var/lib/cobbler/loaders/pxelinux.0</span><br><span class="line">downloading https://cobbler.github.io/loaders/menu.c32-3.86 to /var/lib/cobbler/loaders/menu.c32</span><br><span class="line">downloading https://cobbler.github.io/loaders/grub-0.97-x86.efi to /var/lib/cobbler/loaders/grub-x86.efi</span><br><span class="line">downloading https://cobbler.github.io/loaders/grub-0.97-x86_64.efi to /var/lib/cobbler/loaders/grub-x86_64.efi</span><br><span class="line">*** TASK COMPLETE ***</span><br></pre></td></tr></table></figure></p><h2 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># systemctl start rsyncd</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># systemctl enable rsyncd</span></span><br><span class="line">问题6</span><br></pre></td></tr></table></figure><h2 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># yum install debmirror -y</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># vi /etc/debmirror.conf</span></span><br><span class="line"><span class="comment">#@dists="sid";</span></span><br><span class="line"><span class="comment">#@arches="i386";</span></span><br></pre></td></tr></table></figure><h2 id="问题7"><a href="#问题7" class="headerlink" title="问题7"></a>问题7</h2><p>生成密码来取代默认的密码，前者为干扰码，后者为真正的密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># openssl passwd -1 -salt 'jay.cheng' '123456'</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$jay</span>.chen<span class="variable">$1Ktf4J</span>.R.RsFfY3mz63Ro/</span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i s/'default_password_crypted:.*'/'default_password_crypted: "$1$jay.chen$1Ktf4J.R.RsFfY3mz63Ro\/"'/g /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep -n default_pass /etc/cobbler/settings</span></span><br><span class="line">101:default_password_crypted: <span class="string">"<span class="variable">$1</span><span class="variable">$jay</span>.chen<span class="variable">$1Ktf4J</span>.R.RsFfY3mz63Ro/"</span></span><br></pre></td></tr></table></figure></p><h2 id="问题8"><a href="#问题8" class="headerlink" title="问题8"></a>问题8</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># yum install -y fence-agents</span></span><br></pre></td></tr></table></figure><h2 id="由cobbler管理DHCP和防止循环装系统"><a href="#由cobbler管理DHCP和防止循环装系统" class="headerlink" title="由cobbler管理DHCP和防止循环装系统"></a>由cobbler管理DHCP和防止循环装系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/manage_dhcp: 0/manage_dhcp: 1/g' /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep -n manage_dhcp /etc/cobbler/settings</span></span><br><span class="line">242:manage_dhcp: 1</span><br><span class="line">269:<span class="comment"># if using cobbler with manage_dhcp, put the IP address</span></span><br><span class="line">355:<span class="comment"># Note that if manage_dhcp and manage_dns are disabled, the respective</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/pxe_just_once: 0/pxe_just_once: 1/' /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep -n pxe_just_once /etc/cobbler/settings</span></span><br><span class="line">292:pxe_just_once: 1</span><br></pre></td></tr></table></figure><h2 id="重启cobbler服务后，再次运行检查配置命令"><a href="#重启cobbler服务后，再次运行检查配置命令" class="headerlink" title="重启cobbler服务后，再次运行检查配置命令"></a>重启cobbler服务后，再次运行检查配置命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># systemctl restart cobblerd.service</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># cobbler check</span></span><br><span class="line">No configuration problems found.  All systems go.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;关闭防火墙和selinux&quot;&gt;&lt;a href=&quot;#关闭防火墙和selinux&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>构建标准且人性化镜像</title>
    <link href="http://yoursite.com/2019/05/02/%E6%9E%84%E5%BB%BA%E6%A0%87%E5%87%86%E4%B8%94%E4%BA%BA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/05/02/构建标准且人性化镜像/</id>
    <published>2019-05-02T13:48:00.000Z</published>
    <updated>2019-05-02T13:53:13.946Z</updated>
    
    <content type="html"><![CDATA[<h6 id="正确的FROM合适的镜像"><a href="#正确的FROM合适的镜像" class="headerlink" title="正确的FROM合适的镜像"></a>正确的FROM合适的镜像</h6><p>很多新手一上来就是FROM centos然后RUN 一堆yum install的，这样还停留在虚拟机的角度。可以FROM alpine或者干脆拿官方的改，alpine初期的时候问题蛮多的，很多人建议使用alpine做基础镜像最好是测试好再上线，现在alpine的快速发展，这种现象很少了。</p><h6 id="不要用imageID或者latest标签"><a href="#不要用imageID或者latest标签" class="headerlink" title="不要用imageID或者latest标签"></a>不要用imageID或者latest标签</h6><p>id的话不便于长期发展，而latest标签无法回滚。</p><h6 id="不要重复造轮子"><a href="#不要重复造轮子" class="headerlink" title="不要重复造轮子"></a>不要重复造轮子</h6><p>现在dockerhub上有很多的镜像了，很多人还是喜欢造轮子，造出来的镜像层又多，无用的文件又停留在层理，主进程还不是业务进程，还不支持传入环境变量来让用户选择场景和传入配置信息启动。</p><p>如果你的是一个java应用，那么你应该使用java作为基础应用，如果你是tomcat应用，你应该使用tomcat作为基础应用，而不是按照虚拟机的思维，把Java装好，然后装应用；tomcat也一样，装java，装tomcat，装应用。</p><h6 id="镜像大小"><a href="#镜像大小" class="headerlink" title="镜像大小"></a>镜像大小</h6><p>之前我举例的ADD添加源码包和RUN rm -f删掉ADD的源码包，虽说最终起来的容器看不到源码包。实际上文件还停留在镜像的层里，所以尽量合并和减少层防止层保持住文件。</p><p>最后一些零散的建议和常见错误</p><ul><li>编写entrypoint脚本让启动更人性化</li><li>同时如果是初期上docker到生产，考虑到排错啥的，可以在官方dockerfile里添加一些常见的排错命</li><li>尽量使用ENV和ARG让人不改或者少改Dockerfile即可做构建对应版本的镜像</li><li>容器时间不对的话可以安装包tzdate，声明变量TZ即可声明时区，或者构建的时候带上/etc/localtime或者运行的时候挂载宿主机的/etc/localtime。</li><li>如果是编译型语言，妥善利用多阶段构建（后面容器无法运行排错的时候会讲解多阶构建）</li><li>代码里应该要注意优雅退出。收到信号的时候释放东西啥的。</li></ul><h6 id="代码，war，jar，go编译的二进制到底应不应该放在镜像里？"><a href="#代码，war，jar，go编译的二进制到底应不应该放在镜像里？" class="headerlink" title="代码，war，jar，go编译的二进制到底应不应该放在镜像里？"></a>代码，war，jar，go编译的二进制到底应不应该放在镜像里？</h6><p>其实现在的java和php，还有go啥的依赖的运行环境基本不会变，变更发布新版本也就只有代码，war，jar和go编译的二进制，为此可以两种做法:</p><ul><li>全部打包到镜像里</li><li>不变的层做个镜像，启动利用entrypoint脚本接受传入的git分支或者war包啥的内网下载直链下载到容器里或者启动直接挂载nfs里的war包或者代码啥的启动</li></ul><p>很多人都是传统的第一种思维，看到第二种的时候直接张口说这样不行。如果后续接触到了k8s会发现k8s有个initContainers，谷歌也说了可以利用initContainers去初始化或者克隆git代码。</p><p>其实两种均可，例如第一种，在没有gc原生docker下，每一次发布都会老版本镜像存在，虽说层共享，但是最后的代码层的容量还是占据了宿主机容量的。</p><p>第二种每次启动都需要下载，需要网速，如果是内网可以尝试，代码或者war包啥的都是在容器层，不会吃宿主机多大容量。实在接受不了可以运维给研发做个这种通用镜像给他们用。</p><p>最后是推荐一个漠然大佬的示例，漠然大佬的github上很多镜像下载量很多，可以去他github看，这里我放下他的java的应用示例 <a href="https://github.com/Gozap/dockerfile" target="_blank" rel="noopener">https://github.com/Gozap/dockerfile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;正确的FROM合适的镜像&quot;&gt;&lt;a href=&quot;#正确的FROM合适的镜像&quot; class=&quot;headerlink&quot; title=&quot;正确的FROM合适的镜像&quot;&gt;&lt;/a&gt;正确的FROM合适的镜像&lt;/h6&gt;&lt;p&gt;很多新手一上来就是FROM centos然后RUN 一堆yu
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>exec与entrypoint使用脚本</title>
    <link href="http://yoursite.com/2019/05/02/exec%E4%B8%8Eentrypoint%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/05/02/exec与entrypoint使用脚本/</id>
    <published>2019-05-02T13:31:00.000Z</published>
    <updated>2019-05-02T13:48:10.245Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多有状态的官方镜像的ENTRYPOINT都是使用了一个脚本。例如redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [<span class="string">"redis-server"</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># first arg is `-f` or `--some-option`</span></span><br><span class="line"><span class="comment"># or first arg is `something.conf`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;1#-&#125;</span>"</span> != <span class="string">"<span class="variable">$1</span>"</span> ] || [ <span class="string">"<span class="variable">$&#123;1%.conf&#125;</span>"</span> != <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -- redis-server <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">find . \! -user redis -<span class="built_in">exec</span> chown redis <span class="string">'&#123;&#125;'</span> +</span><br><span class="line"><span class="built_in">exec</span> gosu redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>最终运行的是docker-entrypoint.sh redis-server</p><p>第一个if的逻辑是如果docker run 选项 redis -x 或者–xx或者xxx.conf，就把脚本收到的$@改编成redis-server $@,例如我们可同docker run -d redis –port 7379修改启动的容器里的redis端口。如果我们传入的command不是-开头的也不是.conf结尾的字符，例如是date，则会跑到最后的逻辑执行我们的date命令不会启动redis-server</p><p>第二个if这里，如果满足第一个if或者直接默认的cmd下而且容器里用户uid是0，则把属主不是redis的文件改成redis用户，然后切成redis用户去启动redis-server。</p><p>我们可以看到entrypoint能在业务进程启动前做很多事情。而且优秀的镜像都离不开entrypoint脚本，能够根据用户传入的变量和command来切换启动的场景和配置。</p><p>前面说了，主进程一定要是业务进程，这里怎么是个脚本呢，那业务进程不就不是pid为1了吗？ 这里用了exec来退位让贤，最终redis-server还是pid为1的。可以简单几个命令讲解下exec的作用。</p><p>写个test.sh脚本，在脚本里用pstree -p，运行脚本bash test.sh查看进程层次</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>发现pstree是在我们脚本bash(1998)的子进程</p><p>然后在脚本最后面加一行exec pstree -p看看输出</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>我们发现bash进程运行的时候pid是2022，然后第二个pstree上升到了2022这一层次了，假设pid为a的命令或者二进制exec执行了命令b，那b就接替了a的pid。如果说我们entrypoint或者cmd使用脚本，那么我们一定要在脚本最后启动业务进程的时候前面加个exec让脚本退位让贤。</p><p>最后环境变量写配置文件涉及到修改，还有一些判断是否初次启动的有下面一些工具或者套路。</p><ul><li>xmlstarlet 处理xml</li><li>pip安装shyaml 处理yaml</li><li>jq读取json</li><li>nodejs的npm安装json可以修改json文件</li><li>处理excel或者csv使用in2csv，csvkit 提供了 in2csv，csvcut，csvjoin，csvgrep</li><li>touch -d “@0”写在构建的最后一个RUN里把时间戳设置为1970-1-1，然后用stat命令判断</li><li>if [ “$(stat -c “%Y” “${CONF_INSTALL}/conf/server.xml”)” -eq “0” ]; then</li><li>另外entrypoint脚本COPY进去的时候注意可执行权限，如果Windows上传到Linux构建会因为entrpoint脚本没带权限无法运行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在很多有状态的官方镜像的ENTRYPOINT都是使用了一个脚本。例如redis&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile STOPSIGNAL</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-STOPSIGNAL/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-STOPSIGNAL/</id>
    <published>2019-05-02T13:20:00.000Z</published>
    <updated>2019-05-02T13:23:31.182Z</updated>
    
    <content type="html"><![CDATA[<p>格式，缺省信号为SIGTERM<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br><span class="line">------</span><br><span class="line">STOPSIGNAL SIGTERM</span><br><span class="line">STOPSIGNAL 9</span><br></pre></td></tr></table></figure></p><p>可以是kill -l的信号名字也可以信号数字:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure></p><p>docker run的选项可以覆盖镜像定义的STOPSIGNAL信号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--stop-signal string           Signal to stop a container (default <span class="string">"SIGTERM"</span>)</span><br></pre></td></tr></table></figure></p><p>在docker stop停止运行容器的时候指定发送给容器里pid为1角色的信号。默认超时10秒，超时则发送kill强杀进程。一般业务进程都是pid为1，所有官方的进程都会处理收到的SIGTERM信号进行优雅收尾退出。</p><p>前面说过了如果CMD是/bin/sh格式的话，主进程是一个sh -c的进程，shell不用trap处理的话是无法转发信号的。下面我举个例子</p><p>例子是是网上找的，两种CMD方式启动的redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y install redis-server &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD /usr/bin/redis-server</span><br><span class="line">----------------------------</span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y install redis-server &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [<span class="string">"/usr/bin/redis-server"</span>]</span><br></pre></td></tr></table></figure></p><p>构建两种镜像，然后docker run -d img_name，然后docker stop这俩镜像启动的容器会发现exec的redis能在docker stop的时候收到信号优雅退出Received SIGTERM, scheduling shutdown<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1] 11 Feb 08:13:01.633 * The server is now ready to accept connections on port 6379</span><br><span class="line">[1 | signal handler] (1455179074) Received SIGTERM, scheduling shutdown...</span><br><span class="line">[1] 11 Feb 08:24:34.259 <span class="comment"># User requested shutdown...</span></span><br><span class="line">[1] 11 Feb 08:24:34.259 * Saving the final RDB snapshot before exiting.</span><br><span class="line">[1] 11 Feb 08:24:34.262 * DB saved on disk</span><br><span class="line">[1] 11 Feb 08:24:34.262 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure></p><p>而/bin/sh的形式的redis在docker stop后去docker logs看日志会发现根本没有优雅退出，类似于强制杀掉一样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5] 11 Feb 08:12:40.109 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure></p><p>这是因为/bin/sh形式启动的redis主进程是一个sh，shell不会转发信号，所以最后sh被超时的docker stop发送了kill信号杀掉，整个容器生存周期结束，redis没有触发signal handler。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;格式，缺省信号为SIGTERM&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile VOLUME</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-VOLUME/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-VOLUME/</id>
    <published>2019-05-02T13:13:00.000Z</published>
    <updated>2019-05-02T13:14:48.141Z</updated>
    
    <content type="html"><![CDATA[<h6 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h6><p>两种写法，无区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [<span class="string">"/data"</span>,<span class="string">"/mysql"</span>]</span><br><span class="line">VOLUME /var/<span class="built_in">log</span> /var/db</span><br></pre></td></tr></table></figure></p><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。</p><p>为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;VOLUME&quot;&gt;&lt;a href=&quot;#VOLUME&quot; class=&quot;headerlink&quot; title=&quot;VOLUME&quot;&gt;&lt;/a&gt;VOLUME&lt;/h6&gt;&lt;p&gt;两种写法，无区别&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ENTRYPOINT</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-ENTRYPOINT/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-ENTRYPOINT/</id>
    <published>2019-05-02T13:01:00.000Z</published>
    <updated>2019-05-02T13:12:57.146Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h6><p>和CMD用法也一样两种格式，唯一要注意的就是区别，CMD和ENTRYPOINT只有一个或者两者都有都可以，容器最终运行的命令为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &lt;CMD&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>alpine的root目录是没有文件的，所以ls /root没有输出，我们用选项去覆盖住entrypoint可以看到输出了date。注意一点是覆盖entrypoint的时候镜像的CMD会被忽略，我们真要调试的时候需要加command的话，可以在docker run的镜像后面加command和arg。</p><p>上面例子可以很形象的证明了是这个关系，最终运行的是<strong><entrypoint> <cmd></cmd></entrypoint></strong>，同时不光在docker run的时候覆盖掉CMD，也可以覆盖掉默认的entrypoint。很多时候我们可以主进程bash或者sh进去手动启动看看。老版本接触不多，不确定老版本有没有–entrypoint的选项。</p><p>最后如果是/bin/sh的entrypoint会忽略掉CMD和docker run的command参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ENTRYPOINT&quot;&gt;&lt;a href=&quot;#ENTRYPOINT&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT&quot;&gt;&lt;/a&gt;ENTRYPOINT&lt;/h6&gt;&lt;p&gt;和CMD用法也一样两种格式，唯一要注意的就是区别，CMD和ENTRYPOIN
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>创建私有YUM源</title>
    <link href="http://yoursite.com/2019/05/01/%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89YUM%E6%BA%90/"/>
    <id>http://yoursite.com/2019/05/01/创建私有YUM源/</id>
    <published>2019-04-30T17:25:00.000Z</published>
    <updated>2019-04-30T17:28:51.101Z</updated>
    
    <content type="html"><![CDATA[<h6 id="安装httpd"><a href="#安装httpd" class="headerlink" title="安装httpd"></a>安装httpd</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure><h6 id="安装所需软件"><a href="#安装所需软件" class="headerlink" title="安装所需软件"></a>安装所需软件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rsync createrepo</span><br></pre></td></tr></table></figure><h6 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/repos/centos/7/&#123;os,updates,extras&#125;/x86_64</span><br></pre></td></tr></table></figure><h6 id="赋予读写权限"><a href="#赋予读写权限" class="headerlink" title="赋予读写权限"></a>赋予读写权限</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /var/www/repos</span><br></pre></td></tr></table></figure><h6 id="从清华源同步"><a href="#从清华源同步" class="headerlink" title="从清华源同步"></a>从清华源同步</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">rsync://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/ \</span><br><span class="line">/var/www/repos/centos/7/os/x86_64/</span><br><span class="line"> </span><br><span class="line">rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">rsync://mirrors.tuna.tsinghua.edu.cn/centos/7/updates/x86_64/ \</span><br><span class="line">/var/www/repos/centos/7/updates/x86_64/</span><br><span class="line"> </span><br><span class="line">rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">rsync://mirrors.tuna.tsinghua.edu.cn/centos/7/extras/x86_64/ \</span><br><span class="line">/var/www/repos/centos/7/extras/x86_64/</span><br></pre></td></tr></table></figure><h6 id="创建-metadata-repositories"><a href="#创建-metadata-repositories" class="headerlink" title="创建 metadata repositories"></a>创建 metadata repositories</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createrepo /var/www/repos/centos/7/os/x86_64/ </span><br><span class="line">createrepo /var/www/repos/centos/7/updates/x86_64/ </span><br><span class="line">createrepo /var/www/repos/centos/7/extras/x86_64/</span><br></pre></td></tr></table></figure><h6 id="设置定时任务，每天同步"><a href="#设置定时任务，每天同步" class="headerlink" title="设置定时任务，每天同步"></a>设置定时任务，每天同步</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/cron.daily/update-repo</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">VER=<span class="string">'7'</span></span><br><span class="line">ARCH=<span class="string">'x86_64'</span></span><br><span class="line">REPOS=(os updates extras)</span><br><span class="line"><span class="keyword">for</span> REPO <span class="keyword">in</span> <span class="variable">$&#123;REPOS[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">    rsync://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$&#123;VER&#125;</span>/<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;ARCH&#125;</span>/ /var/www/repos/centos/<span class="variable">$&#123;VER&#125;</span>/<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;ARCH&#125;</span>/</span><br><span class="line">    createrepo /var/www/repos/centos/<span class="variable">$&#123;VER&#125;</span>/<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;ARCH&#125;</span>/</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h6 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /etc/cron.daily/update-repo</span><br></pre></td></tr></table></figure><h6 id="配置httpd主机使其他客户端访问"><a href="#配置httpd主机使其他客户端访问" class="headerlink" title="配置httpd主机使其他客户端访问"></a>配置httpd主机使其他客户端访问</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/httpd/conf.d/repos.conf</span></span><br><span class="line">Alias /repos /var/www/repos</span><br><span class="line">&lt;directory /var/www/repos&gt;</span><br><span class="line">    Options +Indexes</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/directory&gt;</span><br></pre></td></tr></table></figure><h6 id="启动httpd服务"><a href="#启动httpd服务" class="headerlink" title="启动httpd服务"></a>启动httpd服务</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure><h6 id="客户端的配置文件，其中10-105-26-110是源服务器地址"><a href="#客户端的配置文件，其中10-105-26-110是源服务器地址" class="headerlink" title="客户端的配置文件，其中10.105.26.110是源服务器地址"></a>客户端的配置文件，其中10.105.26.110是源服务器地址</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra</span></span><br><span class="line">baseurl=http://10.105.26.110/repos/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span></span><br><span class="line">baseurl=http://10.105.26.110/repos/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span></span><br><span class="line">baseurl=http://10.105.26.110/repos/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;安装httpd&quot;&gt;&lt;a href=&quot;#安装httpd&quot; class=&quot;headerlink&quot; title=&quot;安装httpd&quot;&gt;&lt;/a&gt;安装httpd&lt;/h6&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7修改网卡名称</title>
    <link href="http://yoursite.com/2019/05/01/Centos7%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E5%90%8D%E7%A7%B0/"/>
    <id>http://yoursite.com/2019/05/01/Centos7修改网卡名称/</id>
    <published>2019-04-30T17:17:00.000Z</published>
    <updated>2019-04-30T17:20:35.355Z</updated>
    
    <content type="html"><![CDATA[<h6 id="修改设备名称"><a href="#修改设备名称" class="headerlink" title="修改设备名称"></a>修改设备名称</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/ens33/eth0/g"</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><h6 id="重命名网卡配置文件"><a href="#重命名网卡配置文件" class="headerlink" title="重命名网卡配置文件"></a>重命名网卡配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><h6 id="修改grub文件"><a href="#修改grub文件" class="headerlink" title="修改grub文件"></a>修改grub文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/root/root net.ifnames=0 biosdevname=0/g"</span> /etc/default/grub</span><br></pre></td></tr></table></figure><h6 id="重新生成GRUB配置并更新内核参数，稍后重启"><a href="#重新生成GRUB配置并更新内核参数，稍后重启" class="headerlink" title="重新生成GRUB配置并更新内核参数，稍后重启"></a>重新生成GRUB配置并更新内核参数，稍后重启</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;修改设备名称&quot;&gt;&lt;a href=&quot;#修改设备名称&quot; class=&quot;headerlink&quot; title=&quot;修改设备名称&quot;&gt;&lt;/a&gt;修改设备名称&lt;/h6&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Dockerfile CMD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-CMD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-CMD/</id>
    <published>2019-04-30T06:39:00.000Z</published>
    <updated>2019-04-30T09:25:57.567Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CMD-与进程前后台和容器存活的关系"><a href="#CMD-与进程前后台和容器存活的关系" class="headerlink" title="CMD 与进程前后台和容器存活的关系"></a>CMD 与进程前后台和容器存活的关系</h6><p>设置镜像运行出来的容器的缺省命令</p><p>有两种写法，写多个和FROM一个已经有CMD的镜像的话，以最后一个为准<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>] </span><br><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure></p><p>前者是exec格式也是推荐格式，后者是/bin/sh格式，exec和CMD还有ENTRYPOINT这三者之间联系非常紧密，后面单独将相关的知识点。这里先用一个例子讲/bin/sh格式啥意思</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>我们发现pid为1的是一个/bin/sh的进程，而我们的进程在容器里在后面。容器是单独一个pid namespaces的。这里懒得去做个图了，借用下别人的图</p><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>默认下所有进程在一个顶级的pid namespaces里，pid namespaces像一个树一样。从根到最后可以多级串。容器的pid namespaces实际上是在宿主机上能看到的，也就是下面，我们可以看到容器在宿主机上的进程，由于子namespaces无法看到父级的namespaces，所以容器里第一个进程(也就是cmd)认为自己是pid为1，容器里其余进程都是它的子进程</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p>在Linux中，只能给init已经安装信号处理函数的信号，其它信号都会被忽略，这可以防止init进程被误杀掉，即使是superuser。所以，kill -9 init不会kill掉init进程。但是容器的进程是在容器的ns里是init级别，我们可以在宿主机上杀掉它，之前线上的低版本docker 命令无法使用，同事无法停止错误容器，我便询问了进程名在宿主机找到后kill掉的。</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>接下来说说为啥推荐exec格式，exec格式的话第一个进程是我们的sleep进程，大家可以自己去构建镜像试试。推荐用exec格式是因为pid 为1的进程承担着pid namespaces的存活周期，听不懂的话我举个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -d alpine ls</span></span><br><span class="line">b2eedc510e718d2820ce79fcf630aa9521fc3525b9138a51f1f8bef496e2607a</span><br><span class="line">[root@docker ~]<span class="comment"># docker run -d alpine sleep 10</span></span><br><span class="line">bee830e62508b52796f588d6defe5419e35acb6c944f0151e0cb4b40a260ef81</span><br><span class="line">[root@docker ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">bee830e62508        alpine              <span class="string">"sleep 10"</span>          19 seconds ago      Exited (0) 7 seconds ago                        sad_lamarr</span><br><span class="line">b2eedc510e71        alpine              <span class="string">"ls"</span>                28 seconds ago      Exited (0) 26 seconds ago                       reverent_stallman</span><br></pre></td></tr></table></figure></p><p>先看下docker run命令格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure></p><p>docker run 后面镜像后面的command和arg会覆盖掉镜像的CMD。上面我那个例子覆盖掉centos镜像默认的CMD bash。我们可以看到ls的容器直接退出了，但是sleep 10的容器运行了10秒后就退出了。以上也说明了容器不是虚拟机，容器是个隔离的进程。</p><p>这说明了容器的存活是容器里pid为1的进程运行时长决定的。所以nginx的官方镜像里就是用的exec格式让nginx充当pid为1的角色。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br></pre></td></tr></table></figure></p><p>这里nginx启动带了选项是什么意思呢，我举个初学者自己造轮子做nginx镜像来举例，也顺带按照初学者重复造轮子碰到错误的时候应该怎样去排查？上面我是按照初学者虚拟机的思维去做一个nginx镜像，结果构建错误，我们发现有个失败的容器就是RUN那层创建出来的，前面我说的实际上docker build就是运行容器执行步骤然后最后底层调用commit的原因。</p><p>现在我们来手动排下错，哪步报错可以把那步到后面的全部注释掉后构建个镜像，然后我们run起来的时候带上-ti选项分配一个能输入的伪终端，最后的command用sh或者bash，这样容器的主进程就是bash或者sh了，我们在里面执行报错的RUN(这里我例子简单，所以我直接run -ti centos bash)。实际上会发现nginx是在epel-release的源里，接下来改下Dockerfile再构建试试.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install -y epel-release \</span><br><span class="line">    &amp;&amp; yum install -y nginx</span><br><span class="line">CMD [<span class="string">"nginx"</span>]</span><br><span class="line">$ docker build -t <span class="built_in">test</span> .</span><br></pre></td></tr></table></figure></p><p>然后又是一个新手自己做镜像遇到的问题了，这个镜像运行了根本跑不起来，我们手动bash或者sh进去排查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 <span class="built_in">test</span></span><br><span class="line">f13e98d4dc13b6fa13e375ca35cc58a23a340a07b677f0df245fc1ef3b7199c6</span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID     IMAGE        COMMAND      CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">f13e98d4dc13     <span class="built_in">test</span>         <span class="string">"nginx"</span>      3 seconds ago       Exited (0) 1 second ago                       determined_elgamal</span><br></pre></td></tr></table></figure></p><p>似乎是卡主了？我们可以访问宿主机的ip:80看看会发现实际能访问到的，也就是说这样也是在运行，当然我们把CMD改成和官方一样直接docker run -d -p 80:80 test的话容器是不会退出的。</p><p>至于说为啥？答案就是前台的概念！</p><p>我们有没有发现我们手动执行nginx带关闭daemon选项发现类似于hang住一样，实际上它就是前台跑。</p><p>单独的nginx回车，实际上是它拉起来了nginx，然后它退出了，但是！！！，别忘记了你这个nginx是pid为1的角色，你退出了你下面子进程全部完蛋，容器也会显示退出。所以既然你最终要跑nginx，你nginx得是前台跑。</p><p>但是这里肯定也有人说如果我主进程跑一个不退出的进程，然后进去启动nginx不也跑起来了吗？这样是可以的，但是存在信号转发机制和要考虑优雅退出，这块知识我在后面指令STOPSIGNAL讲。</p><p>判断一个命令(或者说带上选项)是不是前台跑的最简单一个验证就是(主进程sh或者bash进去后)执行它看它有没有回到终端。例如ls和yes命令，我们会发现yes命令一直刷y没有回到终端。</p><p>其实发展到现在，很多以前只有daemon后台跑的进程都慢慢的在docker火热下开始有前台运行的选项或者配置了，例如</p><ul><li>redis的配置文件不写日志文件路径它就默认前台跑</li><li>uwsgi也是一样，命令行参数或者配置文件指定了日志文件路径就后台跑，否则前台跑</li><li>node本身是前台跑，但是一些信号可能不好处理，于是有了pm2</li><li>zabbix 的日志路径写console的话就是前台跑</li></ul><p>其实我们用上前台选项的话也无法用docker logs看容器的log，是因为docker logs查看的是容器里的标准输出信息，我们可以看到官方nginx镜像Dockerfile是这样做的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forward request and error logs to docker log collector</span></span><br><span class="line">&amp;&amp; ln -sf /dev/stdout /var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">&amp;&amp; ln -sf /dev/stderr /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;CMD-与进程前后台和容器存活的关系&quot;&gt;&lt;a href=&quot;#CMD-与进程前后台和容器存活的关系&quot; class=&quot;headerlink&quot; title=&quot;CMD 与进程前后台和容器存活的关系&quot;&gt;&lt;/a&gt;CMD 与进程前后台和容器存活的关系&lt;/h6&gt;&lt;p&gt;设置镜像运行
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile EXPOSE</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-EXPOSE/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-EXPOSE/</id>
    <published>2019-04-30T06:33:00.000Z</published>
    <updated>2019-04-30T06:35:38.651Z</updated>
    
    <content type="html"><![CDATA[<h6 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80/tcp</span><br><span class="line">EXPOSE 80/udp</span><br><span class="line">EXPOSE 80 443</span><br></pre></td></tr></table></figure></p><p>声明需要暴露的端口（缺省tcp），仅仅是声明并没有说写了它才能映射端口，对容器网络不熟悉的话后面会讲容器网络的。我们可以看到nginx官方镜像的Dockerfile里有写80。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure></p><p>我们假设简单的run起来让外部访问的话可以这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure></p><p>这条命令是使用nginx:alpine镜像运行一个容器，把宿主机的80映射到容器的80端口上，我们可以访问宿主机ip:80就可以看到默认nginx的index页面，如果说是云主机80可能需要备案，可以改成81:80。可以自己把nginx官方dockerfile的EXPOSE删掉发现还可以映射的。</p><p>EXPOSE作用是告诉使用者应该把容器的哪个端口暴漏出去。另一个作用给docker run -P用的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P nginx:alpine</span><br></pre></td></tr></table></figure></p><p>会映射宿主机上随机没被bind的端口到EXPOSE的端口，例如 random_port:80</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;EXPOSE&quot;&gt;&lt;a href=&quot;#EXPOSE&quot; class=&quot;headerlink&quot; title=&quot;EXPOSE&quot;&gt;&lt;/a&gt;EXPOSE&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ONBUILD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ONBUILD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ONBUILD/</id>
    <published>2019-04-30T06:28:00.000Z</published>
    <updated>2019-04-30T06:29:26.101Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure></p><p>构建的时候并不会执行，只有在构建出来的镜像被FROM的时候才执行，例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM xxxx</span><br><span class="line">ONBUILD RUN <span class="built_in">cd</span> /root/ &amp;&amp; wget xxxx</span><br></pre></td></tr></table></figure></p><p>然后构建出镜像B里root目录并没有下载东西，只有FROM B构建的镜像才会执行这个RUN，这个用得很少，记住即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ONBUILD&quot;&gt;&lt;a href=&quot;#ONBUILD&quot; class=&quot;headerlink&quot; title=&quot;ONBUILD&quot;&gt;&lt;/a&gt;ONBUILD&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile USER</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-USER/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-USER/</id>
    <published>2019-04-30T06:27:00.000Z</published>
    <updated>2019-04-30T06:27:54.607Z</updated>
    
    <content type="html"><![CDATA[<h6 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h6><p>两种写法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER &lt;user&gt;[:&lt;group&gt;] or</span><br><span class="line">USER &lt;UID&gt;[:&lt;GID&gt;]</span><br></pre></td></tr></table></figure></p><p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p><p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。可用可不用。</p><p>不用的情况建议给容器的最终进程指定用户去运行，例如nginx官方添加了一个不登陆的nginx用户，配置文件里指定使用这个用户运行nginx。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;USER&quot;&gt;&lt;a href=&quot;#USER&quot; class=&quot;headerlink&quot; title=&quot;USER&quot;&gt;&lt;/a&gt;USER&lt;/h6&gt;&lt;p&gt;两种写法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile WORKDIR</title>
    <link href="http://yoursite.com/2019/04/30/Do/"/>
    <id>http://yoursite.com/2019/04/30/Do/</id>
    <published>2019-04-30T05:59:00.000Z</published>
    <updated>2019-04-30T06:12:29.352Z</updated>
    
    <content type="html"><![CDATA[<h6 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h6><p>声明后续指令的工作目录，目录不存在则创建，可以理解为mkdir -p dir &amp;&amp; cd dir</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure><p>可以在a中多次使用Dockerfile。如果提供了相对路径，则它将相对于前一条WORKDIR指令的路径 。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></p><p>最终pwd命令的输出Dockerfile将是 /a/b/c</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;WORKDIR&quot;&gt;&lt;a href=&quot;#WORKDIR&quot; class=&quot;headerlink&quot; title=&quot;WORKDIR&quot;&gt;&lt;/a&gt;WORKDIR&lt;/h6&gt;&lt;p&gt;声明后续指令的工作目录，目录不存在则创建，可以理解为mkdir -p dir &amp;amp;&amp;amp; 
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ADD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ADD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ADD/</id>
    <published>2019-04-30T05:56:00.000Z</published>
    <updated>2019-04-30T06:12:12.831Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h6><p>和COPY一样，但是源可以是一个url会自动下载，另外源是压缩包的话会自动解压，但是实际中不会使用它，因为前面讲RUN的时候说的层概念。例如下面是一个ADD用的多的举例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ADD https://xxxxx/name.tar.gz /home/<span class="built_in">test</span>/</span><br><span class="line">RUN <span class="built_in">cd</span> /home/<span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    编译安装... \</span><br><span class="line">    rm -rf /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>ADD下载源码包，然后RUN里编译安装完删除源码包。实际上后面的层起来的容器虽说读取不到源码包了，但是还是在镜像里，参照我之前的RUN里那个test.html的例子。</p><p>一般避免多余的层和容量都是RUN里去下载源码包，处理完后删掉源码包，参照nginx的dockerfile的第一个RUN。 </p><p><a href="https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile#L7" target="_blank" rel="noopener">https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile#L7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ADD&quot;&gt;&lt;a href=&quot;#ADD&quot; class=&quot;headerlink&quot; title=&quot;ADD&quot;&gt;&lt;/a&gt;ADD&lt;/h6&gt;&lt;p&gt;和COPY一样，但是源可以是一个url会自动下载，另外源是压缩包的话会自动解压，但是实际中不会使用它，因为前面讲RUN的时候说的层概
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile COPY</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-COPY/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-COPY/</id>
    <published>2019-04-30T05:42:00.000Z</published>
    <updated>2019-04-30T06:12:02.622Z</updated>
    
    <content type="html"><![CDATA[<h6 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt;  &lt;dest&gt;  </span><br><span class="line">COPY [<span class="string">"&lt;src&gt;"</span>,... <span class="string">"&lt;dest&gt;"</span>]  </span><br><span class="line">COPY home* /home</span><br></pre></td></tr></table></figure></p><p>复制本地的文件到容器中的目录，目录不存在则会自动创建，源可以是多个。在低版本的docker里如果源是绝对路径例如/root/data/nginx的话会把整个系统的根上传到docker daemon，会发现上传的内容等同于根的已用容量，例如下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM alpine</span><br><span class="line">COPY /root/data/nginx.tar.gz /root/home</span><br><span class="line">$ docker build -t <span class="built_in">test</span> .</span><br><span class="line">Sending build context to Docker daemon  7.8GB</span><br></pre></td></tr></table></figure></p><p>主要是因为上下文的概念，认为上下文的根是client的/，所以会把客户端的/上传到docker daemon，现在新版本是强制相对路径了，如果是绝对路径会报错。相对路径相对于build最后的.这个上下文路径为相对路径。</p><p>另外COPY还能指定uid:gid，如果容器的rootfs里没有文件/etc/passwd和/etc/group文件只能使用数字不能使用组名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY --chown=55:mygroup files* /somedir/</span><br><span class="line">COPY --chown=bin files* /somedir/</span><br><span class="line">COPY --chown=1 files* /somedir/</span><br><span class="line">COPY --chown=10:11 files* /somedir/</span><br></pre></td></tr></table></figure></p><p>COPY接受一个标志–from=&lt;name|index&gt;，该标志可用于将源位置设置为FROM .. AS <name> 主要用于多阶段构建，后面会举个例子来讲解多阶段构建，多阶段构建是17.05之后才出现的功能。</name></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;COPY&quot;&gt;&lt;a href=&quot;#COPY&quot; class=&quot;headerlink&quot; title=&quot;COPY&quot;&gt;&lt;/a&gt;COPY&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile RUN</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-RUN/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-RUN/</id>
    <published>2019-04-30T05:05:00.000Z</published>
    <updated>2019-04-30T06:11:56.631Z</updated>
    
    <content type="html"><![CDATA[<h6 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h6><p>有两种形式</p><ul><li>RUN command ( 该命令在shell中运行，默认情况下在Linux上是/bin/sh -c或windows的cmd /S /C)</li><li>RUN [“executable”, “param1”, “param2”] (exec 形式)</li></ul><p>exec形式不会调用shell先展开变量，也就是不会解析ENV或者ARG的变量，所以一般来讲用得比较多的就是第一种形式，多行的话可以利用\换行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN  .....\</span><br><span class="line">    &amp;&amp; addgroup -S nginx \</span><br><span class="line">&amp;&amp; adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \</span><br><span class="line">&amp;&amp; apk add --no-cache --virtual .build-deps \</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>这里要注意的是一个RUN是一层，dockerfile的一些涉及到文件的指令和RUN都会是新的一层，主要是构建过程实际上还是容器去commit，目的相同的RUN尽量合并在同一个RUN里减少大小。下面我做个例子来说明原因<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">RUN apk add wget  &amp;&amp; wget https://www.baidu.com -O test.html</span><br><span class="line">RUN <span class="built_in">echo</span> 123 &gt; test.html</span><br></pre></td></tr></table></figure></p><p>构建并运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t test .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/3 : FROM alpine</span><br><span class="line"> ---&gt; cdf98d1859c1</span><br><span class="line">Step 2/3 : RUN apk add wget  &amp;&amp; wget https://www.baidu.com -O test.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 07bd55d265b8</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing wget (1.20.3-r0)</span><br><span class="line">Executing busybox-1.29.3-r10.trigger</span><br><span class="line">OK: 6 MiB <span class="keyword">in</span> 15 packages</span><br><span class="line">--2019-04-30 05:38:10--  https://www.baidu.com/</span><br><span class="line">Resolving www.baidu.com... 58.217.200.39, 58.217.200.37</span><br><span class="line">Connecting to www.baidu.com|58.217.200.39|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 2443 (2.4K) [text/html]</span><br><span class="line">Saving to: <span class="string">'test.html'</span></span><br><span class="line"></span><br><span class="line">     0K ..                                                    100% 21.8M=0s</span><br><span class="line"></span><br><span class="line">2019-04-30 05:38:10 (21.8 MB/s) - <span class="string">'test.html'</span> saved [2443/2443]</span><br><span class="line"></span><br><span class="line">Removing intermediate container 07bd55d265b8</span><br><span class="line"> ---&gt; 9420c50ef6f7</span><br><span class="line">Step 3/3 : RUN <span class="built_in">echo</span> 123 &gt; test.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8724c012ff49</span><br><span class="line">Removing intermediate container 8724c012ff49</span><br><span class="line"> ---&gt; b924abffdb62</span><br><span class="line">Successfully built b924abffdb62</span><br><span class="line">Successfully tagged <span class="built_in">test</span>:latest</span><br></pre></td></tr></table></figure></p><p>运行然后查看docker的存储目录查找<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run --rm test cat test.html</span></span><br><span class="line">123</span><br><span class="line">[root@docker ~]<span class="comment"># find /var/lib/docker/overlay2/ -type f -name test.html</span></span><br><span class="line">/var/lib/docker/overlay2/3c4530c7cd077e1d6ec74135679fe7234eddc88fe72ada21f632cebfd26de4f5/diff/test.html</span><br><span class="line">/var/lib/docker/overlay2/802018b95e4f9b16e9946e2e827db5c3b0cd8631ac0759c31dffea212ff06d4f/diff/test.html</span><br><span class="line">[root@docker ~]<span class="comment"># cat /var/lib/docker/overlay2/3c4530c7cd077e1d6ec74135679fe7234eddc88fe72ada21f632cebfd26de4f5/diff/test.html</span></span><br><span class="line">123</span><br><span class="line">[root@docker ~]<span class="comment"># cat /var/lib/docker/overlay2/802018b95e4f9b16e9946e2e827db5c3b0cd8631ac0759c31dffea212ff06d4f/diff/test.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></p><p>发现两个文件都存在，前面说到了容器在读取文件的时候从上层往下查找，查找到了就返回，但是我的这个Dockerfile里第一个RUN下载了index页面，第二个改了文件内容。</p><p>可以证明一个RUN是一层，也证明了之前容器读取文件的逻辑。同时假设我们的目的是最终的123，我们可以俩个RUN合并了，这样就不会有多余的第一个RUN产生的test.html文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;RUN&quot;&gt;&lt;a href=&quot;#RUN&quot; class=&quot;headerlink&quot; title=&quot;RUN&quot;&gt;&lt;/a&gt;RUN&lt;/h6&gt;&lt;p&gt;有两种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RUN command ( 该命令在shell中运行，默认情况下在Linux上是/bin/sh
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
</feed>
