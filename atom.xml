<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Cheng</title>
  
  <subtitle>Kubernetes,Devops,Service Mesh 实践</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-02T13:53:13.946Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>构建标准且人性化镜像</title>
    <link href="http://yoursite.com/2019/05/02/%E6%9E%84%E5%BB%BA%E6%A0%87%E5%87%86%E4%B8%94%E4%BA%BA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/05/02/构建标准且人性化镜像/</id>
    <published>2019-05-02T13:48:00.000Z</published>
    <updated>2019-05-02T13:53:13.946Z</updated>
    
    <content type="html"><![CDATA[<h6 id="正确的FROM合适的镜像"><a href="#正确的FROM合适的镜像" class="headerlink" title="正确的FROM合适的镜像"></a>正确的FROM合适的镜像</h6><p>很多新手一上来就是FROM centos然后RUN 一堆yum install的，这样还停留在虚拟机的角度。可以FROM alpine或者干脆拿官方的改，alpine初期的时候问题蛮多的，很多人建议使用alpine做基础镜像最好是测试好再上线，现在alpine的快速发展，这种现象很少了。</p><h6 id="不要用imageID或者latest标签"><a href="#不要用imageID或者latest标签" class="headerlink" title="不要用imageID或者latest标签"></a>不要用imageID或者latest标签</h6><p>id的话不便于长期发展，而latest标签无法回滚。</p><h6 id="不要重复造轮子"><a href="#不要重复造轮子" class="headerlink" title="不要重复造轮子"></a>不要重复造轮子</h6><p>现在dockerhub上有很多的镜像了，很多人还是喜欢造轮子，造出来的镜像层又多，无用的文件又停留在层理，主进程还不是业务进程，还不支持传入环境变量来让用户选择场景和传入配置信息启动。</p><p>如果你的是一个java应用，那么你应该使用java作为基础应用，如果你是tomcat应用，你应该使用tomcat作为基础应用，而不是按照虚拟机的思维，把Java装好，然后装应用；tomcat也一样，装java，装tomcat，装应用。</p><h6 id="镜像大小"><a href="#镜像大小" class="headerlink" title="镜像大小"></a>镜像大小</h6><p>之前我举例的ADD添加源码包和RUN rm -f删掉ADD的源码包，虽说最终起来的容器看不到源码包。实际上文件还停留在镜像的层里，所以尽量合并和减少层防止层保持住文件。</p><p>最后一些零散的建议和常见错误</p><ul><li>编写entrypoint脚本让启动更人性化</li><li>同时如果是初期上docker到生产，考虑到排错啥的，可以在官方dockerfile里添加一些常见的排错命</li><li>尽量使用ENV和ARG让人不改或者少改Dockerfile即可做构建对应版本的镜像</li><li>容器时间不对的话可以安装包tzdate，声明变量TZ即可声明时区，或者构建的时候带上/etc/localtime或者运行的时候挂载宿主机的/etc/localtime。</li><li>如果是编译型语言，妥善利用多阶段构建（后面容器无法运行排错的时候会讲解多阶构建）</li><li>代码里应该要注意优雅退出。收到信号的时候释放东西啥的。</li></ul><h6 id="代码，war，jar，go编译的二进制到底应不应该放在镜像里？"><a href="#代码，war，jar，go编译的二进制到底应不应该放在镜像里？" class="headerlink" title="代码，war，jar，go编译的二进制到底应不应该放在镜像里？"></a>代码，war，jar，go编译的二进制到底应不应该放在镜像里？</h6><p>其实现在的java和php，还有go啥的依赖的运行环境基本不会变，变更发布新版本也就只有代码，war，jar和go编译的二进制，为此可以两种做法:</p><ul><li>全部打包到镜像里</li><li>不变的层做个镜像，启动利用entrypoint脚本接受传入的git分支或者war包啥的内网下载直链下载到容器里或者启动直接挂载nfs里的war包或者代码啥的启动</li></ul><p>很多人都是传统的第一种思维，看到第二种的时候直接张口说这样不行。如果后续接触到了k8s会发现k8s有个initContainers，谷歌也说了可以利用initContainers去初始化或者克隆git代码。</p><p>其实两种均可，例如第一种，在没有gc原生docker下，每一次发布都会老版本镜像存在，虽说层共享，但是最后的代码层的容量还是占据了宿主机容量的。</p><p>第二种每次启动都需要下载，需要网速，如果是内网可以尝试，代码或者war包啥的都是在容器层，不会吃宿主机多大容量。实在接受不了可以运维给研发做个这种通用镜像给他们用。</p><p>最后是推荐一个漠然大佬的示例，漠然大佬的github上很多镜像下载量很多，可以去他github看，这里我放下他的java的应用示例 <a href="https://github.com/Gozap/dockerfile" target="_blank" rel="noopener">https://github.com/Gozap/dockerfile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;正确的FROM合适的镜像&quot;&gt;&lt;a href=&quot;#正确的FROM合适的镜像&quot; class=&quot;headerlink&quot; title=&quot;正确的FROM合适的镜像&quot;&gt;&lt;/a&gt;正确的FROM合适的镜像&lt;/h6&gt;&lt;p&gt;很多新手一上来就是FROM centos然后RUN 一堆yu
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>exec与entrypoint使用脚本</title>
    <link href="http://yoursite.com/2019/05/02/exec%E4%B8%8Eentrypoint%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/05/02/exec与entrypoint使用脚本/</id>
    <published>2019-05-02T13:31:00.000Z</published>
    <updated>2019-05-02T13:48:10.245Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多有状态的官方镜像的ENTRYPOINT都是使用了一个脚本。例如redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [<span class="string">"redis-server"</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># first arg is `-f` or `--some-option`</span></span><br><span class="line"><span class="comment"># or first arg is `something.conf`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;1#-&#125;</span>"</span> != <span class="string">"<span class="variable">$1</span>"</span> ] || [ <span class="string">"<span class="variable">$&#123;1%.conf&#125;</span>"</span> != <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -- redis-server <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">find . \! -user redis -<span class="built_in">exec</span> chown redis <span class="string">'&#123;&#125;'</span> +</span><br><span class="line"><span class="built_in">exec</span> gosu redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>最终运行的是docker-entrypoint.sh redis-server</p><p>第一个if的逻辑是如果docker run 选项 redis -x 或者–xx或者xxx.conf，就把脚本收到的$@改编成redis-server $@,例如我们可同docker run -d redis –port 7379修改启动的容器里的redis端口。如果我们传入的command不是-开头的也不是.conf结尾的字符，例如是date，则会跑到最后的逻辑执行我们的date命令不会启动redis-server</p><p>第二个if这里，如果满足第一个if或者直接默认的cmd下而且容器里用户uid是0，则把属主不是redis的文件改成redis用户，然后切成redis用户去启动redis-server。</p><p>我们可以看到entrypoint能在业务进程启动前做很多事情。而且优秀的镜像都离不开entrypoint脚本，能够根据用户传入的变量和command来切换启动的场景和配置。</p><p>前面说了，主进程一定要是业务进程，这里怎么是个脚本呢，那业务进程不就不是pid为1了吗？ 这里用了exec来退位让贤，最终redis-server还是pid为1的。可以简单几个命令讲解下exec的作用。</p><p>写个test.sh脚本，在脚本里用pstree -p，运行脚本bash test.sh查看进程层次</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>发现pstree是在我们脚本bash(1998)的子进程</p><p>然后在脚本最后面加一行exec pstree -p看看输出</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>我们发现bash进程运行的时候pid是2022，然后第二个pstree上升到了2022这一层次了，假设pid为a的命令或者二进制exec执行了命令b，那b就接替了a的pid。如果说我们entrypoint或者cmd使用脚本，那么我们一定要在脚本最后启动业务进程的时候前面加个exec让脚本退位让贤。</p><p>最后环境变量写配置文件涉及到修改，还有一些判断是否初次启动的有下面一些工具或者套路。</p><ul><li>xmlstarlet 处理xml</li><li>pip安装shyaml 处理yaml</li><li>jq读取json</li><li>nodejs的npm安装json可以修改json文件</li><li>处理excel或者csv使用in2csv，csvkit 提供了 in2csv，csvcut，csvjoin，csvgrep</li><li>touch -d “@0”写在构建的最后一个RUN里把时间戳设置为1970-1-1，然后用stat命令判断</li><li>if [ “$(stat -c “%Y” “${CONF_INSTALL}/conf/server.xml”)” -eq “0” ]; then</li><li>另外entrypoint脚本COPY进去的时候注意可执行权限，如果Windows上传到Linux构建会因为entrpoint脚本没带权限无法运行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在很多有状态的官方镜像的ENTRYPOINT都是使用了一个脚本。例如redis&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile STOPSIGNAL</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-STOPSIGNAL/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-STOPSIGNAL/</id>
    <published>2019-05-02T13:20:00.000Z</published>
    <updated>2019-05-02T13:23:31.182Z</updated>
    
    <content type="html"><![CDATA[<p>格式，缺省信号为SIGTERM<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br><span class="line">------</span><br><span class="line">STOPSIGNAL SIGTERM</span><br><span class="line">STOPSIGNAL 9</span><br></pre></td></tr></table></figure></p><p>可以是kill -l的信号名字也可以信号数字:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure></p><p>docker run的选项可以覆盖镜像定义的STOPSIGNAL信号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--stop-signal string           Signal to stop a container (default <span class="string">"SIGTERM"</span>)</span><br></pre></td></tr></table></figure></p><p>在docker stop停止运行容器的时候指定发送给容器里pid为1角色的信号。默认超时10秒，超时则发送kill强杀进程。一般业务进程都是pid为1，所有官方的进程都会处理收到的SIGTERM信号进行优雅收尾退出。</p><p>前面说过了如果CMD是/bin/sh格式的话，主进程是一个sh -c的进程，shell不用trap处理的话是无法转发信号的。下面我举个例子</p><p>例子是是网上找的，两种CMD方式启动的redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y install redis-server &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD /usr/bin/redis-server</span><br><span class="line">----------------------------</span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y install redis-server &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [<span class="string">"/usr/bin/redis-server"</span>]</span><br></pre></td></tr></table></figure></p><p>构建两种镜像，然后docker run -d img_name，然后docker stop这俩镜像启动的容器会发现exec的redis能在docker stop的时候收到信号优雅退出Received SIGTERM, scheduling shutdown<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1] 11 Feb 08:13:01.633 * The server is now ready to accept connections on port 6379</span><br><span class="line">[1 | signal handler] (1455179074) Received SIGTERM, scheduling shutdown...</span><br><span class="line">[1] 11 Feb 08:24:34.259 <span class="comment"># User requested shutdown...</span></span><br><span class="line">[1] 11 Feb 08:24:34.259 * Saving the final RDB snapshot before exiting.</span><br><span class="line">[1] 11 Feb 08:24:34.262 * DB saved on disk</span><br><span class="line">[1] 11 Feb 08:24:34.262 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure></p><p>而/bin/sh的形式的redis在docker stop后去docker logs看日志会发现根本没有优雅退出，类似于强制杀掉一样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5] 11 Feb 08:12:40.109 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure></p><p>这是因为/bin/sh形式启动的redis主进程是一个sh，shell不会转发信号，所以最后sh被超时的docker stop发送了kill信号杀掉，整个容器生存周期结束，redis没有触发signal handler。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;格式，缺省信号为SIGTERM&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile VOLUME</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-VOLUME/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-VOLUME/</id>
    <published>2019-05-02T13:13:00.000Z</published>
    <updated>2019-05-02T13:14:48.141Z</updated>
    
    <content type="html"><![CDATA[<h6 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h6><p>两种写法，无区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [<span class="string">"/data"</span>,<span class="string">"/mysql"</span>]</span><br><span class="line">VOLUME /var/<span class="built_in">log</span> /var/db</span><br></pre></td></tr></table></figure></p><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。</p><p>为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;VOLUME&quot;&gt;&lt;a href=&quot;#VOLUME&quot; class=&quot;headerlink&quot; title=&quot;VOLUME&quot;&gt;&lt;/a&gt;VOLUME&lt;/h6&gt;&lt;p&gt;两种写法，无区别&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ENTRYPOINT</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-ENTRYPOINT/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-ENTRYPOINT/</id>
    <published>2019-05-02T13:01:00.000Z</published>
    <updated>2019-05-02T13:12:57.146Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h6><p>和CMD用法也一样两种格式，唯一要注意的就是区别，CMD和ENTRYPOINT只有一个或者两者都有都可以，容器最终运行的命令为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &lt;CMD&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>alpine的root目录是没有文件的，所以ls /root没有输出，我们用选项去覆盖住entrypoint可以看到输出了date。注意一点是覆盖entrypoint的时候镜像的CMD会被忽略，我们真要调试的时候需要加command的话，可以在docker run的镜像后面加command和arg。</p><p>上面例子可以很形象的证明了是这个关系，最终运行的是<strong><entrypoint> <cmd></cmd></entrypoint></strong>，同时不光在docker run的时候覆盖掉CMD，也可以覆盖掉默认的entrypoint。很多时候我们可以主进程bash或者sh进去手动启动看看。老版本接触不多，不确定老版本有没有–entrypoint的选项。</p><p>最后如果是/bin/sh的entrypoint会忽略掉CMD和docker run的command参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ENTRYPOINT&quot;&gt;&lt;a href=&quot;#ENTRYPOINT&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT&quot;&gt;&lt;/a&gt;ENTRYPOINT&lt;/h6&gt;&lt;p&gt;和CMD用法也一样两种格式，唯一要注意的就是区别，CMD和ENTRYPOIN
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>创建私有YUM源</title>
    <link href="http://yoursite.com/2019/05/01/%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89YUM%E6%BA%90/"/>
    <id>http://yoursite.com/2019/05/01/创建私有YUM源/</id>
    <published>2019-04-30T17:25:00.000Z</published>
    <updated>2019-04-30T17:28:51.101Z</updated>
    
    <content type="html"><![CDATA[<h6 id="安装httpd"><a href="#安装httpd" class="headerlink" title="安装httpd"></a>安装httpd</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure><h6 id="安装所需软件"><a href="#安装所需软件" class="headerlink" title="安装所需软件"></a>安装所需软件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install rsync createrepo</span><br></pre></td></tr></table></figure><h6 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/repos/centos/7/&#123;os,updates,extras&#125;/x86_64</span><br></pre></td></tr></table></figure><h6 id="赋予读写权限"><a href="#赋予读写权限" class="headerlink" title="赋予读写权限"></a>赋予读写权限</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /var/www/repos</span><br></pre></td></tr></table></figure><h6 id="从清华源同步"><a href="#从清华源同步" class="headerlink" title="从清华源同步"></a>从清华源同步</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">rsync://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/ \</span><br><span class="line">/var/www/repos/centos/7/os/x86_64/</span><br><span class="line"> </span><br><span class="line">rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">rsync://mirrors.tuna.tsinghua.edu.cn/centos/7/updates/x86_64/ \</span><br><span class="line">/var/www/repos/centos/7/updates/x86_64/</span><br><span class="line"> </span><br><span class="line">rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">rsync://mirrors.tuna.tsinghua.edu.cn/centos/7/extras/x86_64/ \</span><br><span class="line">/var/www/repos/centos/7/extras/x86_64/</span><br></pre></td></tr></table></figure><h6 id="创建-metadata-repositories"><a href="#创建-metadata-repositories" class="headerlink" title="创建 metadata repositories"></a>创建 metadata repositories</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createrepo /var/www/repos/centos/7/os/x86_64/ </span><br><span class="line">createrepo /var/www/repos/centos/7/updates/x86_64/ </span><br><span class="line">createrepo /var/www/repos/centos/7/extras/x86_64/</span><br></pre></td></tr></table></figure><h6 id="设置定时任务，每天同步"><a href="#设置定时任务，每天同步" class="headerlink" title="设置定时任务，每天同步"></a>设置定时任务，每天同步</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/cron.daily/update-repo</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">VER=<span class="string">'7'</span></span><br><span class="line">ARCH=<span class="string">'x86_64'</span></span><br><span class="line">REPOS=(os updates extras)</span><br><span class="line"><span class="keyword">for</span> REPO <span class="keyword">in</span> <span class="variable">$&#123;REPOS[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    rsync -avz --delete --exclude=<span class="string">'repodata'</span> \</span><br><span class="line">    rsync://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$&#123;VER&#125;</span>/<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;ARCH&#125;</span>/ /var/www/repos/centos/<span class="variable">$&#123;VER&#125;</span>/<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;ARCH&#125;</span>/</span><br><span class="line">    createrepo /var/www/repos/centos/<span class="variable">$&#123;VER&#125;</span>/<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;ARCH&#125;</span>/</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h6 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /etc/cron.daily/update-repo</span><br></pre></td></tr></table></figure><h6 id="配置httpd主机使其他客户端访问"><a href="#配置httpd主机使其他客户端访问" class="headerlink" title="配置httpd主机使其他客户端访问"></a>配置httpd主机使其他客户端访问</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/httpd/conf.d/repos.conf</span></span><br><span class="line">Alias /repos /var/www/repos</span><br><span class="line">&lt;directory /var/www/repos&gt;</span><br><span class="line">    Options +Indexes</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/directory&gt;</span><br></pre></td></tr></table></figure><h6 id="启动httpd服务"><a href="#启动httpd服务" class="headerlink" title="启动httpd服务"></a>启动httpd服务</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure><h6 id="客户端的配置文件，其中10-105-26-110是源服务器地址"><a href="#客户端的配置文件，其中10-105-26-110是源服务器地址" class="headerlink" title="客户端的配置文件，其中10.105.26.110是源服务器地址"></a>客户端的配置文件，其中10.105.26.110是源服务器地址</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra</span></span><br><span class="line">baseurl=http://10.105.26.110/repos/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span></span><br><span class="line">baseurl=http://10.105.26.110/repos/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span></span><br><span class="line">baseurl=http://10.105.26.110/repos/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;安装httpd&quot;&gt;&lt;a href=&quot;#安装httpd&quot; class=&quot;headerlink&quot; title=&quot;安装httpd&quot;&gt;&lt;/a&gt;安装httpd&lt;/h6&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7修改网卡名称</title>
    <link href="http://yoursite.com/2019/05/01/Centos7%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E5%90%8D%E7%A7%B0/"/>
    <id>http://yoursite.com/2019/05/01/Centos7修改网卡名称/</id>
    <published>2019-04-30T17:17:00.000Z</published>
    <updated>2019-04-30T17:20:35.355Z</updated>
    
    <content type="html"><![CDATA[<h6 id="修改设备名称"><a href="#修改设备名称" class="headerlink" title="修改设备名称"></a>修改设备名称</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/ens33/eth0/g"</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><h6 id="重命名网卡配置文件"><a href="#重命名网卡配置文件" class="headerlink" title="重命名网卡配置文件"></a>重命名网卡配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><h6 id="修改grub文件"><a href="#修改grub文件" class="headerlink" title="修改grub文件"></a>修改grub文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/root/root net.ifnames=0 biosdevname=0/g"</span> /etc/default/grub</span><br></pre></td></tr></table></figure><h6 id="重新生成GRUB配置并更新内核参数，稍后重启"><a href="#重新生成GRUB配置并更新内核参数，稍后重启" class="headerlink" title="重新生成GRUB配置并更新内核参数，稍后重启"></a>重新生成GRUB配置并更新内核参数，稍后重启</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;修改设备名称&quot;&gt;&lt;a href=&quot;#修改设备名称&quot; class=&quot;headerlink&quot; title=&quot;修改设备名称&quot;&gt;&lt;/a&gt;修改设备名称&lt;/h6&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Dockerfile CMD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-CMD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-CMD/</id>
    <published>2019-04-30T06:39:00.000Z</published>
    <updated>2019-04-30T09:25:57.567Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CMD-与进程前后台和容器存活的关系"><a href="#CMD-与进程前后台和容器存活的关系" class="headerlink" title="CMD 与进程前后台和容器存活的关系"></a>CMD 与进程前后台和容器存活的关系</h6><p>设置镜像运行出来的容器的缺省命令</p><p>有两种写法，写多个和FROM一个已经有CMD的镜像的话，以最后一个为准<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>] </span><br><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure></p><p>前者是exec格式也是推荐格式，后者是/bin/sh格式，exec和CMD还有ENTRYPOINT这三者之间联系非常紧密，后面单独将相关的知识点。这里先用一个例子讲/bin/sh格式啥意思</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>我们发现pid为1的是一个/bin/sh的进程，而我们的进程在容器里在后面。容器是单独一个pid namespaces的。这里懒得去做个图了，借用下别人的图</p><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>默认下所有进程在一个顶级的pid namespaces里，pid namespaces像一个树一样。从根到最后可以多级串。容器的pid namespaces实际上是在宿主机上能看到的，也就是下面，我们可以看到容器在宿主机上的进程，由于子namespaces无法看到父级的namespaces，所以容器里第一个进程(也就是cmd)认为自己是pid为1，容器里其余进程都是它的子进程</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p>在Linux中，只能给init已经安装信号处理函数的信号，其它信号都会被忽略，这可以防止init进程被误杀掉，即使是superuser。所以，kill -9 init不会kill掉init进程。但是容器的进程是在容器的ns里是init级别，我们可以在宿主机上杀掉它，之前线上的低版本docker 命令无法使用，同事无法停止错误容器，我便询问了进程名在宿主机找到后kill掉的。</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>接下来说说为啥推荐exec格式，exec格式的话第一个进程是我们的sleep进程，大家可以自己去构建镜像试试。推荐用exec格式是因为pid 为1的进程承担着pid namespaces的存活周期，听不懂的话我举个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -d alpine ls</span></span><br><span class="line">b2eedc510e718d2820ce79fcf630aa9521fc3525b9138a51f1f8bef496e2607a</span><br><span class="line">[root@docker ~]<span class="comment"># docker run -d alpine sleep 10</span></span><br><span class="line">bee830e62508b52796f588d6defe5419e35acb6c944f0151e0cb4b40a260ef81</span><br><span class="line">[root@docker ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">bee830e62508        alpine              <span class="string">"sleep 10"</span>          19 seconds ago      Exited (0) 7 seconds ago                        sad_lamarr</span><br><span class="line">b2eedc510e71        alpine              <span class="string">"ls"</span>                28 seconds ago      Exited (0) 26 seconds ago                       reverent_stallman</span><br></pre></td></tr></table></figure></p><p>先看下docker run命令格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure></p><p>docker run 后面镜像后面的command和arg会覆盖掉镜像的CMD。上面我那个例子覆盖掉centos镜像默认的CMD bash。我们可以看到ls的容器直接退出了，但是sleep 10的容器运行了10秒后就退出了。以上也说明了容器不是虚拟机，容器是个隔离的进程。</p><p>这说明了容器的存活是容器里pid为1的进程运行时长决定的。所以nginx的官方镜像里就是用的exec格式让nginx充当pid为1的角色。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br></pre></td></tr></table></figure></p><p>这里nginx启动带了选项是什么意思呢，我举个初学者自己造轮子做nginx镜像来举例，也顺带按照初学者重复造轮子碰到错误的时候应该怎样去排查？上面我是按照初学者虚拟机的思维去做一个nginx镜像，结果构建错误，我们发现有个失败的容器就是RUN那层创建出来的，前面我说的实际上docker build就是运行容器执行步骤然后最后底层调用commit的原因。</p><p>现在我们来手动排下错，哪步报错可以把那步到后面的全部注释掉后构建个镜像，然后我们run起来的时候带上-ti选项分配一个能输入的伪终端，最后的command用sh或者bash，这样容器的主进程就是bash或者sh了，我们在里面执行报错的RUN(这里我例子简单，所以我直接run -ti centos bash)。实际上会发现nginx是在epel-release的源里，接下来改下Dockerfile再构建试试.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install -y epel-release \</span><br><span class="line">    &amp;&amp; yum install -y nginx</span><br><span class="line">CMD [<span class="string">"nginx"</span>]</span><br><span class="line">$ docker build -t <span class="built_in">test</span> .</span><br></pre></td></tr></table></figure></p><p>然后又是一个新手自己做镜像遇到的问题了，这个镜像运行了根本跑不起来，我们手动bash或者sh进去排查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 <span class="built_in">test</span></span><br><span class="line">f13e98d4dc13b6fa13e375ca35cc58a23a340a07b677f0df245fc1ef3b7199c6</span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID     IMAGE        COMMAND      CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">f13e98d4dc13     <span class="built_in">test</span>         <span class="string">"nginx"</span>      3 seconds ago       Exited (0) 1 second ago                       determined_elgamal</span><br></pre></td></tr></table></figure></p><p>似乎是卡主了？我们可以访问宿主机的ip:80看看会发现实际能访问到的，也就是说这样也是在运行，当然我们把CMD改成和官方一样直接docker run -d -p 80:80 test的话容器是不会退出的。</p><p>至于说为啥？答案就是前台的概念！</p><p>我们有没有发现我们手动执行nginx带关闭daemon选项发现类似于hang住一样，实际上它就是前台跑。</p><p>单独的nginx回车，实际上是它拉起来了nginx，然后它退出了，但是！！！，别忘记了你这个nginx是pid为1的角色，你退出了你下面子进程全部完蛋，容器也会显示退出。所以既然你最终要跑nginx，你nginx得是前台跑。</p><p>但是这里肯定也有人说如果我主进程跑一个不退出的进程，然后进去启动nginx不也跑起来了吗？这样是可以的，但是存在信号转发机制和要考虑优雅退出，这块知识我在后面指令STOPSIGNAL讲。</p><p>判断一个命令(或者说带上选项)是不是前台跑的最简单一个验证就是(主进程sh或者bash进去后)执行它看它有没有回到终端。例如ls和yes命令，我们会发现yes命令一直刷y没有回到终端。</p><p>其实发展到现在，很多以前只有daemon后台跑的进程都慢慢的在docker火热下开始有前台运行的选项或者配置了，例如</p><ul><li>redis的配置文件不写日志文件路径它就默认前台跑</li><li>uwsgi也是一样，命令行参数或者配置文件指定了日志文件路径就后台跑，否则前台跑</li><li>node本身是前台跑，但是一些信号可能不好处理，于是有了pm2</li><li>zabbix 的日志路径写console的话就是前台跑</li></ul><p>其实我们用上前台选项的话也无法用docker logs看容器的log，是因为docker logs查看的是容器里的标准输出信息，我们可以看到官方nginx镜像Dockerfile是这样做的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forward request and error logs to docker log collector</span></span><br><span class="line">&amp;&amp; ln -sf /dev/stdout /var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">&amp;&amp; ln -sf /dev/stderr /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;CMD-与进程前后台和容器存活的关系&quot;&gt;&lt;a href=&quot;#CMD-与进程前后台和容器存活的关系&quot; class=&quot;headerlink&quot; title=&quot;CMD 与进程前后台和容器存活的关系&quot;&gt;&lt;/a&gt;CMD 与进程前后台和容器存活的关系&lt;/h6&gt;&lt;p&gt;设置镜像运行
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile EXPOSE</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-EXPOSE/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-EXPOSE/</id>
    <published>2019-04-30T06:33:00.000Z</published>
    <updated>2019-04-30T06:35:38.651Z</updated>
    
    <content type="html"><![CDATA[<h6 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80/tcp</span><br><span class="line">EXPOSE 80/udp</span><br><span class="line">EXPOSE 80 443</span><br></pre></td></tr></table></figure></p><p>声明需要暴露的端口（缺省tcp），仅仅是声明并没有说写了它才能映射端口，对容器网络不熟悉的话后面会讲容器网络的。我们可以看到nginx官方镜像的Dockerfile里有写80。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure></p><p>我们假设简单的run起来让外部访问的话可以这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure></p><p>这条命令是使用nginx:alpine镜像运行一个容器，把宿主机的80映射到容器的80端口上，我们可以访问宿主机ip:80就可以看到默认nginx的index页面，如果说是云主机80可能需要备案，可以改成81:80。可以自己把nginx官方dockerfile的EXPOSE删掉发现还可以映射的。</p><p>EXPOSE作用是告诉使用者应该把容器的哪个端口暴漏出去。另一个作用给docker run -P用的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P nginx:alpine</span><br></pre></td></tr></table></figure></p><p>会映射宿主机上随机没被bind的端口到EXPOSE的端口，例如 random_port:80</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;EXPOSE&quot;&gt;&lt;a href=&quot;#EXPOSE&quot; class=&quot;headerlink&quot; title=&quot;EXPOSE&quot;&gt;&lt;/a&gt;EXPOSE&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ONBUILD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ONBUILD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ONBUILD/</id>
    <published>2019-04-30T06:28:00.000Z</published>
    <updated>2019-04-30T06:29:26.101Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure></p><p>构建的时候并不会执行，只有在构建出来的镜像被FROM的时候才执行，例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM xxxx</span><br><span class="line">ONBUILD RUN <span class="built_in">cd</span> /root/ &amp;&amp; wget xxxx</span><br></pre></td></tr></table></figure></p><p>然后构建出镜像B里root目录并没有下载东西，只有FROM B构建的镜像才会执行这个RUN，这个用得很少，记住即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ONBUILD&quot;&gt;&lt;a href=&quot;#ONBUILD&quot; class=&quot;headerlink&quot; title=&quot;ONBUILD&quot;&gt;&lt;/a&gt;ONBUILD&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile USER</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-USER/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-USER/</id>
    <published>2019-04-30T06:27:00.000Z</published>
    <updated>2019-04-30T06:27:54.607Z</updated>
    
    <content type="html"><![CDATA[<h6 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h6><p>两种写法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER &lt;user&gt;[:&lt;group&gt;] or</span><br><span class="line">USER &lt;UID&gt;[:&lt;GID&gt;]</span><br></pre></td></tr></table></figure></p><p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p><p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。可用可不用。</p><p>不用的情况建议给容器的最终进程指定用户去运行，例如nginx官方添加了一个不登陆的nginx用户，配置文件里指定使用这个用户运行nginx。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;USER&quot;&gt;&lt;a href=&quot;#USER&quot; class=&quot;headerlink&quot; title=&quot;USER&quot;&gt;&lt;/a&gt;USER&lt;/h6&gt;&lt;p&gt;两种写法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile WORKDIR</title>
    <link href="http://yoursite.com/2019/04/30/Do/"/>
    <id>http://yoursite.com/2019/04/30/Do/</id>
    <published>2019-04-30T05:59:00.000Z</published>
    <updated>2019-04-30T06:12:29.352Z</updated>
    
    <content type="html"><![CDATA[<h6 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h6><p>声明后续指令的工作目录，目录不存在则创建，可以理解为mkdir -p dir &amp;&amp; cd dir</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure><p>可以在a中多次使用Dockerfile。如果提供了相对路径，则它将相对于前一条WORKDIR指令的路径 。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></p><p>最终pwd命令的输出Dockerfile将是 /a/b/c</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;WORKDIR&quot;&gt;&lt;a href=&quot;#WORKDIR&quot; class=&quot;headerlink&quot; title=&quot;WORKDIR&quot;&gt;&lt;/a&gt;WORKDIR&lt;/h6&gt;&lt;p&gt;声明后续指令的工作目录，目录不存在则创建，可以理解为mkdir -p dir &amp;amp;&amp;amp; 
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ADD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ADD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ADD/</id>
    <published>2019-04-30T05:56:00.000Z</published>
    <updated>2019-04-30T06:12:12.831Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h6><p>和COPY一样，但是源可以是一个url会自动下载，另外源是压缩包的话会自动解压，但是实际中不会使用它，因为前面讲RUN的时候说的层概念。例如下面是一个ADD用的多的举例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ADD https://xxxxx/name.tar.gz /home/<span class="built_in">test</span>/</span><br><span class="line">RUN <span class="built_in">cd</span> /home/<span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    编译安装... \</span><br><span class="line">    rm -rf /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>ADD下载源码包，然后RUN里编译安装完删除源码包。实际上后面的层起来的容器虽说读取不到源码包了，但是还是在镜像里，参照我之前的RUN里那个test.html的例子。</p><p>一般避免多余的层和容量都是RUN里去下载源码包，处理完后删掉源码包，参照nginx的dockerfile的第一个RUN。 </p><p><a href="https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile#L7" target="_blank" rel="noopener">https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile#L7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ADD&quot;&gt;&lt;a href=&quot;#ADD&quot; class=&quot;headerlink&quot; title=&quot;ADD&quot;&gt;&lt;/a&gt;ADD&lt;/h6&gt;&lt;p&gt;和COPY一样，但是源可以是一个url会自动下载，另外源是压缩包的话会自动解压，但是实际中不会使用它，因为前面讲RUN的时候说的层概
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile COPY</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-COPY/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-COPY/</id>
    <published>2019-04-30T05:42:00.000Z</published>
    <updated>2019-04-30T06:12:02.622Z</updated>
    
    <content type="html"><![CDATA[<h6 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt;  &lt;dest&gt;  </span><br><span class="line">COPY [<span class="string">"&lt;src&gt;"</span>,... <span class="string">"&lt;dest&gt;"</span>]  </span><br><span class="line">COPY home* /home</span><br></pre></td></tr></table></figure></p><p>复制本地的文件到容器中的目录，目录不存在则会自动创建，源可以是多个。在低版本的docker里如果源是绝对路径例如/root/data/nginx的话会把整个系统的根上传到docker daemon，会发现上传的内容等同于根的已用容量，例如下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM alpine</span><br><span class="line">COPY /root/data/nginx.tar.gz /root/home</span><br><span class="line">$ docker build -t <span class="built_in">test</span> .</span><br><span class="line">Sending build context to Docker daemon  7.8GB</span><br></pre></td></tr></table></figure></p><p>主要是因为上下文的概念，认为上下文的根是client的/，所以会把客户端的/上传到docker daemon，现在新版本是强制相对路径了，如果是绝对路径会报错。相对路径相对于build最后的.这个上下文路径为相对路径。</p><p>另外COPY还能指定uid:gid，如果容器的rootfs里没有文件/etc/passwd和/etc/group文件只能使用数字不能使用组名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY --chown=55:mygroup files* /somedir/</span><br><span class="line">COPY --chown=bin files* /somedir/</span><br><span class="line">COPY --chown=1 files* /somedir/</span><br><span class="line">COPY --chown=10:11 files* /somedir/</span><br></pre></td></tr></table></figure></p><p>COPY接受一个标志–from=&lt;name|index&gt;，该标志可用于将源位置设置为FROM .. AS <name> 主要用于多阶段构建，后面会举个例子来讲解多阶段构建，多阶段构建是17.05之后才出现的功能。</name></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;COPY&quot;&gt;&lt;a href=&quot;#COPY&quot; class=&quot;headerlink&quot; title=&quot;COPY&quot;&gt;&lt;/a&gt;COPY&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile RUN</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-RUN/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-RUN/</id>
    <published>2019-04-30T05:05:00.000Z</published>
    <updated>2019-04-30T06:11:56.631Z</updated>
    
    <content type="html"><![CDATA[<h6 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h6><p>有两种形式</p><ul><li>RUN command ( 该命令在shell中运行，默认情况下在Linux上是/bin/sh -c或windows的cmd /S /C)</li><li>RUN [“executable”, “param1”, “param2”] (exec 形式)</li></ul><p>exec形式不会调用shell先展开变量，也就是不会解析ENV或者ARG的变量，所以一般来讲用得比较多的就是第一种形式，多行的话可以利用\换行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN  .....\</span><br><span class="line">    &amp;&amp; addgroup -S nginx \</span><br><span class="line">&amp;&amp; adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \</span><br><span class="line">&amp;&amp; apk add --no-cache --virtual .build-deps \</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>这里要注意的是一个RUN是一层，dockerfile的一些涉及到文件的指令和RUN都会是新的一层，主要是构建过程实际上还是容器去commit，目的相同的RUN尽量合并在同一个RUN里减少大小。下面我做个例子来说明原因<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">RUN apk add wget  &amp;&amp; wget https://www.baidu.com -O test.html</span><br><span class="line">RUN <span class="built_in">echo</span> 123 &gt; test.html</span><br></pre></td></tr></table></figure></p><p>构建并运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t test .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/3 : FROM alpine</span><br><span class="line"> ---&gt; cdf98d1859c1</span><br><span class="line">Step 2/3 : RUN apk add wget  &amp;&amp; wget https://www.baidu.com -O test.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 07bd55d265b8</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing wget (1.20.3-r0)</span><br><span class="line">Executing busybox-1.29.3-r10.trigger</span><br><span class="line">OK: 6 MiB <span class="keyword">in</span> 15 packages</span><br><span class="line">--2019-04-30 05:38:10--  https://www.baidu.com/</span><br><span class="line">Resolving www.baidu.com... 58.217.200.39, 58.217.200.37</span><br><span class="line">Connecting to www.baidu.com|58.217.200.39|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 2443 (2.4K) [text/html]</span><br><span class="line">Saving to: <span class="string">'test.html'</span></span><br><span class="line"></span><br><span class="line">     0K ..                                                    100% 21.8M=0s</span><br><span class="line"></span><br><span class="line">2019-04-30 05:38:10 (21.8 MB/s) - <span class="string">'test.html'</span> saved [2443/2443]</span><br><span class="line"></span><br><span class="line">Removing intermediate container 07bd55d265b8</span><br><span class="line"> ---&gt; 9420c50ef6f7</span><br><span class="line">Step 3/3 : RUN <span class="built_in">echo</span> 123 &gt; test.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8724c012ff49</span><br><span class="line">Removing intermediate container 8724c012ff49</span><br><span class="line"> ---&gt; b924abffdb62</span><br><span class="line">Successfully built b924abffdb62</span><br><span class="line">Successfully tagged <span class="built_in">test</span>:latest</span><br></pre></td></tr></table></figure></p><p>运行然后查看docker的存储目录查找<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run --rm test cat test.html</span></span><br><span class="line">123</span><br><span class="line">[root@docker ~]<span class="comment"># find /var/lib/docker/overlay2/ -type f -name test.html</span></span><br><span class="line">/var/lib/docker/overlay2/3c4530c7cd077e1d6ec74135679fe7234eddc88fe72ada21f632cebfd26de4f5/diff/test.html</span><br><span class="line">/var/lib/docker/overlay2/802018b95e4f9b16e9946e2e827db5c3b0cd8631ac0759c31dffea212ff06d4f/diff/test.html</span><br><span class="line">[root@docker ~]<span class="comment"># cat /var/lib/docker/overlay2/3c4530c7cd077e1d6ec74135679fe7234eddc88fe72ada21f632cebfd26de4f5/diff/test.html</span></span><br><span class="line">123</span><br><span class="line">[root@docker ~]<span class="comment"># cat /var/lib/docker/overlay2/802018b95e4f9b16e9946e2e827db5c3b0cd8631ac0759c31dffea212ff06d4f/diff/test.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></p><p>发现两个文件都存在，前面说到了容器在读取文件的时候从上层往下查找，查找到了就返回，但是我的这个Dockerfile里第一个RUN下载了index页面，第二个改了文件内容。</p><p>可以证明一个RUN是一层，也证明了之前容器读取文件的逻辑。同时假设我们的目的是最终的123，我们可以俩个RUN合并了，这样就不会有多余的第一个RUN产生的test.html文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;RUN&quot;&gt;&lt;a href=&quot;#RUN&quot; class=&quot;headerlink&quot; title=&quot;RUN&quot;&gt;&lt;/a&gt;RUN&lt;/h6&gt;&lt;p&gt;有两种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RUN command ( 该命令在shell中运行，默认情况下在Linux上是/bin/sh
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ARG</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ARG/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ARG/</id>
    <published>2019-04-30T03:29:00.000Z</published>
    <updated>2019-04-30T06:11:49.693Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h6><p>格式有两种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ARG key</span><br><span class="line">----------------</span><br><span class="line">ARK key=value</span><br><span class="line">ARG key=value \</span><br><span class="line">    key2=value2 \</span><br><span class="line">    key3=value3</span><br></pre></td></tr></table></figure></p><p>一般来讲第二种用得多，表明build的时候不传入变量设置默认值，无值就是第一种下用户在docker build的时候必须传入值，否则就报错。例如我们可以把nginx官方dockerfile的第一个ENV改成ARG，我们想构建哪个版本直接build的时候传入变量就行了。</p><p>当然ARG是唯一一个可以用于FROM前面的指令，例如下面这样我们可以通过命令行传递参数来改变FROM的base镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG jdk=1.8xxxx</span><br><span class="line">FROM openjdk:<span class="variable">$jdk</span></span><br></pre></td></tr></table></figure></p><p>Docker其实也预定了一些ARG方便我们构建的时候使用代理</p><ul><li>HTTP_PROXY</li><li>HTTPS_PROXY</li><li>FTP_PROXY</li><li>NO_PROXY</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ARG&quot;&gt;&lt;a href=&quot;#ARG&quot; class=&quot;headerlink&quot; title=&quot;ARG&quot;&gt;&lt;/a&gt;ARG&lt;/h6&gt;&lt;p&gt;格式有两种&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile MAINTAINER</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-MAINTAINER/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-MAINTAINER/</id>
    <published>2019-04-30T03:09:00.000Z</published>
    <updated>2019-04-30T06:11:40.396Z</updated>
    
    <content type="html"><![CDATA[<h6 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h6><p>已经弃用，推荐使用LABEL，例如nginx dockerfile里的</p><p>LABEL maintainer=”NGINX Docker Maintainers <a href="mailto:&#x64;&#x6f;&#x63;&#107;&#101;&#114;&#45;&#109;&#97;&#105;&#110;&#116;&#64;&#x6e;&#x67;&#x69;&#110;&#120;&#x2e;&#x63;&#x6f;&#x6d;" target="_blank" rel="noopener">&#x64;&#x6f;&#x63;&#107;&#101;&#114;&#45;&#109;&#97;&#105;&#110;&#116;&#64;&#x6e;&#x67;&#x69;&#110;&#120;&#x2e;&#x63;&#x6f;&#x6d;</a>“</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;MAINTAINER&quot;&gt;&lt;a href=&quot;#MAINTAINER&quot; class=&quot;headerlink&quot; title=&quot;MAINTAINER&quot;&gt;&lt;/a&gt;MAINTAINER&lt;/h6&gt;&lt;p&gt;已经弃用，推荐使用LABEL，例如nginx dockerfile里的&lt;/p
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ENV</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ENV/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ENV/</id>
    <published>2019-04-30T03:09:00.000Z</published>
    <updated>2019-04-30T06:15:36.391Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h6><p>写法有两种，后者支持写多个，一般多个的话也是使用后者居多<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ENV key value</span><br><span class="line">-------</span><br><span class="line">ENV key=value key2=value2</span><br><span class="line">ENV key=value \</span><br><span class="line">    key2=value2  \</span><br><span class="line">    key3=value3   \</span><br><span class="line">    key4=value4</span><br></pre></td></tr></table></figure></p><p>设置一个环境变量，可以被dockerfile里后续的指令使用，也在容器运行过程中保持，支持的指令为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD COPY ENV EXPOSE FROM LABEL STOPSIGNAL USER VOLUME WORKDIR ONBUILD</span><br></pre></td></tr></table></figure></p><p>可以在dockerhub上发现各种官方镜像的Dockerfile的步骤都是固定的，新版本发布直接改下ENV后构建下即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ENV NGINX_VERSION 1.15.11</span><br><span class="line">RUN .... \</span><br><span class="line">    &amp;&amp; curl -fSL https://nginx.org/download/nginx-<span class="variable">$NGINX_VERSION</span>.tar.gz -o nginx.tar.gz \</span><br><span class="line">    ...</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> /usr/src/nginx-<span class="variable">$NGINX_VERSION</span> \</span><br><span class="line">&amp;&amp; ./configure <span class="variable">$CONFIG</span> --with-debug \</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>很多应用镜像启动都是先启动一个脚本，拼接一堆参数最终传递给应用的主进程当作参数，最常见的就是tomcat，或者说很多的应用基于tomcat。下面是之前我修改一个镜像Dockerfile摸索出的启动脚本的运行过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="string">'['</span> -r /opt/atlassian/jira/bin/setenv.sh <span class="string">']'</span></span><br><span class="line">+ . /opt/atlassian/jira/bin/setenv.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /opt/atlassian/jira/bin/setenv.sh</span><br><span class="line">...</span><br><span class="line">JAVA_OPTS=<span class="string">"-Xms<span class="variable">$&#123;JVM_MINIMUM_MEMORY&#125;</span> -Xmx<span class="variable">$&#123;JVM_MAXIMUM_MEMORY&#125;</span> <span class="variable">$&#123;JVM_CODE_CACHE_ARGS&#125;</span> <span class="variable">$&#123;JAVA_OPTS&#125;</span> <span class="variable">$&#123;JVM_REQUIRED_ARGS&#125;</span> <span class="variable">$&#123;DISABLE_NOTIFICATIONS&#125;</span> <span class="variable">$&#123;JVM_SUPPORT_RECOMMENDED_ARGS&#125;</span> <span class="variable">$&#123;JVM_EXTRA_ARGS&#125;</span> <span class="variable">$&#123;JIRA_HOME_MINUSD&#125;</span> <span class="variable">$&#123;START_JIRA_JAVA_OPTS&#125;</span>"</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS</span><br><span class="line">...</span><br><span class="line"><span class="built_in">exec</span> java <span class="variable">$JAVA_OPTS</span></span><br></pre></td></tr></table></figure></p><p>其中有一行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"... <span class="variable">$&#123;JAVA_OPTS&#125;</span> ..."</span></span><br></pre></td></tr></table></figure></p><p>他拼接了自己，如果想给java在最终参数后添加一些固定参数时，可以在构建镜像声明JAVA_OPTS，例如添加时区我们应该在Dockerfile里设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV  JAVA_OPTS=<span class="string">'-Duser.timezone=GMT+08'</span></span><br></pre></td></tr></table></figure></p><p>docker run可以指定env，ENV指令不一样是给Dockerfile用的，有时候是给容器启动时候用的，我们可以在docker run的时候指定env或者覆盖env达到不需要修改镜像，例如常见的后端需要连接一个mysql，可以在后端代码os.getEnv(“mysql_address”)，我们启动的时候指定mysql_address变量为真实的mysql地址即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ENV&quot;&gt;&lt;a href=&quot;#ENV&quot; class=&quot;headerlink&quot; title=&quot;ENV&quot;&gt;&lt;/a&gt;ENV&lt;/h6&gt;&lt;p&gt;写法有两种，后者支持写多个，一般多个的话也是使用后者居多&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile FROM</title>
    <link href="http://yoursite.com/2019/04/29/Dockerfile-FROM-1/"/>
    <id>http://yoursite.com/2019/04/29/Dockerfile-FROM-1/</id>
    <published>2019-04-29T05:37:00.000Z</published>
    <updated>2019-04-30T06:04:56.585Z</updated>
    
    <content type="html"><![CDATA[<h6 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;baseimage&gt; 或者 FROM &lt;baseimage&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p><p>指定从哪个镜像为基础迭代，如果本地没有镜像则会从仓库拉取，通常是第一行，而scratch是空镜像，是所有rootfs和一些单独可执行文件做镜像的根源，关于scratch后续会说。</p><p>例如centos的Dockerfile是下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /</span><br><span class="line"></span><br><span class="line">LABEL org.label-schema.schema-version=<span class="string">"1.0"</span> \</span><br><span class="line">    org.label-schema.name=<span class="string">"CentOS Base Image"</span> \</span><br><span class="line">    org.label-schema.vendor=<span class="string">"CentOS"</span> \</span><br><span class="line">    org.label-schema.license=<span class="string">"GPLv2"</span> \</span><br><span class="line">    org.label-schema.build-date=<span class="string">"20190305"</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"/bin/bash"</span>]</span><br></pre></td></tr></table></figure></p><p>而hello-world为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">COPY hello /</span><br><span class="line">CMD [<span class="string">"/hello"</span>]</span><br><span class="line"></span><br><span class="line">docker images | grep hello</span><br><span class="line">hello-world         latest              fce289e99eb9        3 months ago        1.84kB</span><br></pre></td></tr></table></figure></p><p>nginx:alpine镜像的dockerfile 链接为<br><a href="https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile，大家可以仿照这个经典案例写出自己的Dockerfile。" target="_blank" rel="noopener">https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile，大家可以仿照这个经典案例写出自己的Dockerfile。</a></p><p>nginx:alpine既满足运行的最小环境下大小又很小，主要归功于FROM alpine ，现在alpine这个系统和rootfs得益于docker发展非常快，也有很多应用镜像都有alpine版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.9</span><br><span class="line"></span><br><span class="line">LABEL maintainer=<span class="string">"NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;"</span></span><br><span class="line"></span><br><span class="line">ENV NGINX_VERSION 1.15.11</span><br><span class="line"></span><br><span class="line">RUN ...省略步骤，步骤是下载源码，安装编译需要的依赖，编译安装完删掉源码包和编译的依赖保留运编译出来的nginx二进制和需要的所有so文件</span><br><span class="line"></span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">STOPSIGNAL SIGTERM</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;FROM&quot;&gt;&lt;a href=&quot;#FROM&quot; class=&quot;headerlink&quot; title=&quot;FROM&quot;&gt;&lt;/a&gt;FROM&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像03</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F03/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像03/</id>
    <published>2019-04-29T04:51:00.000Z</published>
    <updated>2019-04-29T05:36:01.255Z</updated>
    
    <content type="html"><![CDATA[<h6 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h6><p>构建镜像只有两种方式，docker build 和 docker commit。实际上docker build是调用的docker commit。不推荐手动去docker commmit运行的容器成镜像。所以主要讲docker build和dockerfile。</p><p>使用docker build 指定Dockerfile来完成一个新镜像的构建。命令格式一般为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [option] [-t &lt;image&gt;:&lt;tag&gt;]  &lt;path&gt;</span><br></pre></td></tr></table></figure></p><p>其中path指向的文件称为context（上下文），context包含docker build镜像过程中需要的Dockerfile以及其他的资源文件。执行build命令后执行流程如下：</p><ul><li>Docker client端<ul><li>解析命令行参数，完成对相关信息的设置，Docker client向Docker server发送POST/build的HTTP请求，包含了所需的上下文文件。</li></ul></li><li>Docker server端<ul><li>创建一个临时目录，并将context指定的文件系统解压到该目录下</li><li>读取并解析Dockerfile</li><li>根据解析出的Dockerfile遍历其中的所有指令，并分发到不同的模块（parser）去执行</li><li>parser为Dockerfile的每一个指令创建一个对应的临时容器，在临时容器中执行当前指令，然后通过commit使用此镜像生成一个镜像层</li><li>Dockerfile中所有的指令对应的层的集合，就是此次build后的结果。如果指定了tag参数，便给镜像打上对应的tag。最后一次commit生成的镜像ID就会作为最终的镜像ID返回。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;构建镜像&quot;&gt;&lt;a href=&quot;#构建镜像&quot; class=&quot;headerlink&quot; title=&quot;构建镜像&quot;&gt;&lt;/a&gt;构建镜像&lt;/h6&gt;&lt;p&gt;构建镜像只有两种方式，docker build 和 docker commit。实际上docker build是调用的doc
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
</feed>
