<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Cheng</title>
  
  <subtitle>Kubernetes,Devops,Service Mesh 实践</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-30T09:25:57.567Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dockerfile CMD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-CMD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-CMD/</id>
    <published>2019-04-30T06:39:00.000Z</published>
    <updated>2019-04-30T09:25:57.567Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CMD-与进程前后台和容器存活的关系"><a href="#CMD-与进程前后台和容器存活的关系" class="headerlink" title="CMD 与进程前后台和容器存活的关系"></a>CMD 与进程前后台和容器存活的关系</h6><p>设置镜像运行出来的容器的缺省命令</p><p>有两种写法，写多个和FROM一个已经有CMD的镜像的话，以最后一个为准<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"executable"</span>, <span class="string">"param1"</span>, <span class="string">"param2"</span>] </span><br><span class="line">CMD <span class="built_in">command</span> param1 param2</span><br></pre></td></tr></table></figure></p><p>前者是exec格式也是推荐格式，后者是/bin/sh格式，exec和CMD还有ENTRYPOINT这三者之间联系非常紧密，后面单独将相关的知识点。这里先用一个例子讲/bin/sh格式啥意思</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>我们发现pid为1的是一个/bin/sh的进程，而我们的进程在容器里在后面。容器是单独一个pid namespaces的。这里懒得去做个图了，借用下别人的图</p><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>默认下所有进程在一个顶级的pid namespaces里，pid namespaces像一个树一样。从根到最后可以多级串。容器的pid namespaces实际上是在宿主机上能看到的，也就是下面，我们可以看到容器在宿主机上的进程，由于子namespaces无法看到父级的namespaces，所以容器里第一个进程(也就是cmd)认为自己是pid为1，容器里其余进程都是它的子进程</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><p>在Linux中，只能给init已经安装信号处理函数的信号，其它信号都会被忽略，这可以防止init进程被误杀掉，即使是superuser。所以，kill -9 init不会kill掉init进程。但是容器的进程是在容器的ns里是init级别，我们可以在宿主机上杀掉它，之前线上的低版本docker 命令无法使用，同事无法停止错误容器，我便询问了进程名在宿主机找到后kill掉的。</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>接下来说说为啥推荐exec格式，exec格式的话第一个进程是我们的sleep进程，大家可以自己去构建镜像试试。推荐用exec格式是因为pid 为1的进程承担着pid namespaces的存活周期，听不懂的话我举个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -d alpine ls</span></span><br><span class="line">b2eedc510e718d2820ce79fcf630aa9521fc3525b9138a51f1f8bef496e2607a</span><br><span class="line">[root@docker ~]<span class="comment"># docker run -d alpine sleep 10</span></span><br><span class="line">bee830e62508b52796f588d6defe5419e35acb6c944f0151e0cb4b40a260ef81</span><br><span class="line">[root@docker ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">bee830e62508        alpine              <span class="string">"sleep 10"</span>          19 seconds ago      Exited (0) 7 seconds ago                        sad_lamarr</span><br><span class="line">b2eedc510e71        alpine              <span class="string">"ls"</span>                28 seconds ago      Exited (0) 26 seconds ago                       reverent_stallman</span><br></pre></td></tr></table></figure></p><p>先看下docker run命令格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure></p><p>docker run 后面镜像后面的command和arg会覆盖掉镜像的CMD。上面我那个例子覆盖掉centos镜像默认的CMD bash。我们可以看到ls的容器直接退出了，但是sleep 10的容器运行了10秒后就退出了。以上也说明了容器不是虚拟机，容器是个隔离的进程。</p><p>这说明了容器的存活是容器里pid为1的进程运行时长决定的。所以nginx的官方镜像里就是用的exec格式让nginx充当pid为1的角色。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br></pre></td></tr></table></figure></p><p>这里nginx启动带了选项是什么意思呢，我举个初学者自己造轮子做nginx镜像来举例，也顺带按照初学者重复造轮子碰到错误的时候应该怎样去排查？上面我是按照初学者虚拟机的思维去做一个nginx镜像，结果构建错误，我们发现有个失败的容器就是RUN那层创建出来的，前面我说的实际上docker build就是运行容器执行步骤然后最后底层调用commit的原因。</p><p>现在我们来手动排下错，哪步报错可以把那步到后面的全部注释掉后构建个镜像，然后我们run起来的时候带上-ti选项分配一个能输入的伪终端，最后的command用sh或者bash，这样容器的主进程就是bash或者sh了，我们在里面执行报错的RUN(这里我例子简单，所以我直接run -ti centos bash)。实际上会发现nginx是在epel-release的源里，接下来改下Dockerfile再构建试试.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat Dockerfile</span></span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install -y epel-release \</span><br><span class="line">    &amp;&amp; yum install -y nginx</span><br><span class="line">CMD [<span class="string">"nginx"</span>]</span><br><span class="line">$ docker build -t <span class="built_in">test</span> .</span><br></pre></td></tr></table></figure></p><p>然后又是一个新手自己做镜像遇到的问题了，这个镜像运行了根本跑不起来，我们手动bash或者sh进去排查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 <span class="built_in">test</span></span><br><span class="line">f13e98d4dc13b6fa13e375ca35cc58a23a340a07b677f0df245fc1ef3b7199c6</span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID     IMAGE        COMMAND      CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">f13e98d4dc13     <span class="built_in">test</span>         <span class="string">"nginx"</span>      3 seconds ago       Exited (0) 1 second ago                       determined_elgamal</span><br></pre></td></tr></table></figure></p><p>似乎是卡主了？我们可以访问宿主机的ip:80看看会发现实际能访问到的，也就是说这样也是在运行，当然我们把CMD改成和官方一样直接docker run -d -p 80:80 test的话容器是不会退出的。</p><p>至于说为啥？答案就是前台的概念！</p><p>我们有没有发现我们手动执行nginx带关闭daemon选项发现类似于hang住一样，实际上它就是前台跑。</p><p>单独的nginx回车，实际上是它拉起来了nginx，然后它退出了，但是！！！，别忘记了你这个nginx是pid为1的角色，你退出了你下面子进程全部完蛋，容器也会显示退出。所以既然你最终要跑nginx，你nginx得是前台跑。</p><p>但是这里肯定也有人说如果我主进程跑一个不退出的进程，然后进去启动nginx不也跑起来了吗？这样是可以的，但是存在信号转发机制和要考虑优雅退出，这块知识我在后面指令STOPSIGNAL讲。</p><p>判断一个命令(或者说带上选项)是不是前台跑的最简单一个验证就是(主进程sh或者bash进去后)执行它看它有没有回到终端。例如ls和yes命令，我们会发现yes命令一直刷y没有回到终端。</p><p>其实发展到现在，很多以前只有daemon后台跑的进程都慢慢的在docker火热下开始有前台运行的选项或者配置了，例如</p><ul><li>redis的配置文件不写日志文件路径它就默认前台跑</li><li>uwsgi也是一样，命令行参数或者配置文件指定了日志文件路径就后台跑，否则前台跑</li><li>node本身是前台跑，但是一些信号可能不好处理，于是有了pm2</li><li>zabbix 的日志路径写console的话就是前台跑</li></ul><p>其实我们用上前台选项的话也无法用docker logs看容器的log，是因为docker logs查看的是容器里的标准输出信息，我们可以看到官方nginx镜像Dockerfile是这样做的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forward request and error logs to docker log collector</span></span><br><span class="line">&amp;&amp; ln -sf /dev/stdout /var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">&amp;&amp; ln -sf /dev/stderr /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;CMD-与进程前后台和容器存活的关系&quot;&gt;&lt;a href=&quot;#CMD-与进程前后台和容器存活的关系&quot; class=&quot;headerlink&quot; title=&quot;CMD 与进程前后台和容器存活的关系&quot;&gt;&lt;/a&gt;CMD 与进程前后台和容器存活的关系&lt;/h6&gt;&lt;p&gt;设置镜像运行
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile EXPOSE</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-EXPOSE/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-EXPOSE/</id>
    <published>2019-04-30T06:33:00.000Z</published>
    <updated>2019-04-30T06:35:38.651Z</updated>
    
    <content type="html"><![CDATA[<h6 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure></p><p>例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80/tcp</span><br><span class="line">EXPOSE 80/udp</span><br><span class="line">EXPOSE 80 443</span><br></pre></td></tr></table></figure></p><p>声明需要暴露的端口（缺省tcp），仅仅是声明并没有说写了它才能映射端口，对容器网络不熟悉的话后面会讲容器网络的。我们可以看到nginx官方镜像的Dockerfile里有写80。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure></p><p>我们假设简单的run起来让外部访问的话可以这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure></p><p>这条命令是使用nginx:alpine镜像运行一个容器，把宿主机的80映射到容器的80端口上，我们可以访问宿主机ip:80就可以看到默认nginx的index页面，如果说是云主机80可能需要备案，可以改成81:80。可以自己把nginx官方dockerfile的EXPOSE删掉发现还可以映射的。</p><p>EXPOSE作用是告诉使用者应该把容器的哪个端口暴漏出去。另一个作用给docker run -P用的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P nginx:alpine</span><br></pre></td></tr></table></figure></p><p>会映射宿主机上随机没被bind的端口到EXPOSE的端口，例如 random_port:80</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;EXPOSE&quot;&gt;&lt;a href=&quot;#EXPOSE&quot; class=&quot;headerlink&quot; title=&quot;EXPOSE&quot;&gt;&lt;/a&gt;EXPOSE&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ONBUILD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ONBUILD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ONBUILD/</id>
    <published>2019-04-30T06:28:00.000Z</published>
    <updated>2019-04-30T06:29:26.101Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure></p><p>构建的时候并不会执行，只有在构建出来的镜像被FROM的时候才执行，例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM xxxx</span><br><span class="line">ONBUILD RUN <span class="built_in">cd</span> /root/ &amp;&amp; wget xxxx</span><br></pre></td></tr></table></figure></p><p>然后构建出镜像B里root目录并没有下载东西，只有FROM B构建的镜像才会执行这个RUN，这个用得很少，记住即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ONBUILD&quot;&gt;&lt;a href=&quot;#ONBUILD&quot; class=&quot;headerlink&quot; title=&quot;ONBUILD&quot;&gt;&lt;/a&gt;ONBUILD&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile USER</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-USER/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-USER/</id>
    <published>2019-04-30T06:27:00.000Z</published>
    <updated>2019-04-30T06:27:54.607Z</updated>
    
    <content type="html"><![CDATA[<h6 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h6><p>两种写法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER &lt;user&gt;[:&lt;group&gt;] or</span><br><span class="line">USER &lt;UID&gt;[:&lt;GID&gt;]</span><br></pre></td></tr></table></figure></p><p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p><p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。可用可不用。</p><p>不用的情况建议给容器的最终进程指定用户去运行，例如nginx官方添加了一个不登陆的nginx用户，配置文件里指定使用这个用户运行nginx。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;USER&quot;&gt;&lt;a href=&quot;#USER&quot; class=&quot;headerlink&quot; title=&quot;USER&quot;&gt;&lt;/a&gt;USER&lt;/h6&gt;&lt;p&gt;两种写法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile WORKDIR</title>
    <link href="http://yoursite.com/2019/04/30/Do/"/>
    <id>http://yoursite.com/2019/04/30/Do/</id>
    <published>2019-04-30T05:59:00.000Z</published>
    <updated>2019-04-30T06:12:29.352Z</updated>
    
    <content type="html"><![CDATA[<h6 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h6><p>声明后续指令的工作目录，目录不存在则创建，可以理解为mkdir -p dir &amp;&amp; cd dir</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure><p>可以在a中多次使用Dockerfile。如果提供了相对路径，则它将相对于前一条WORKDIR指令的路径 。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></p><p>最终pwd命令的输出Dockerfile将是 /a/b/c</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;WORKDIR&quot;&gt;&lt;a href=&quot;#WORKDIR&quot; class=&quot;headerlink&quot; title=&quot;WORKDIR&quot;&gt;&lt;/a&gt;WORKDIR&lt;/h6&gt;&lt;p&gt;声明后续指令的工作目录，目录不存在则创建，可以理解为mkdir -p dir &amp;amp;&amp;amp; 
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ADD</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ADD/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ADD/</id>
    <published>2019-04-30T05:56:00.000Z</published>
    <updated>2019-04-30T06:12:12.831Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h6><p>和COPY一样，但是源可以是一个url会自动下载，另外源是压缩包的话会自动解压，但是实际中不会使用它，因为前面讲RUN的时候说的层概念。例如下面是一个ADD用的多的举例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ADD https://xxxxx/name.tar.gz /home/<span class="built_in">test</span>/</span><br><span class="line">RUN <span class="built_in">cd</span> /home/<span class="built_in">test</span> &amp;&amp; \</span><br><span class="line">    编译安装... \</span><br><span class="line">    rm -rf /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>ADD下载源码包，然后RUN里编译安装完删除源码包。实际上后面的层起来的容器虽说读取不到源码包了，但是还是在镜像里，参照我之前的RUN里那个test.html的例子。</p><p>一般避免多余的层和容量都是RUN里去下载源码包，处理完后删掉源码包，参照nginx的dockerfile的第一个RUN。 </p><p><a href="https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile#L7" target="_blank" rel="noopener">https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile#L7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ADD&quot;&gt;&lt;a href=&quot;#ADD&quot; class=&quot;headerlink&quot; title=&quot;ADD&quot;&gt;&lt;/a&gt;ADD&lt;/h6&gt;&lt;p&gt;和COPY一样，但是源可以是一个url会自动下载，另外源是压缩包的话会自动解压，但是实际中不会使用它，因为前面讲RUN的时候说的层概
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile COPY</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-COPY/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-COPY/</id>
    <published>2019-04-30T05:42:00.000Z</published>
    <updated>2019-04-30T06:12:02.622Z</updated>
    
    <content type="html"><![CDATA[<h6 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;src&gt;  &lt;dest&gt;  </span><br><span class="line">COPY [<span class="string">"&lt;src&gt;"</span>,... <span class="string">"&lt;dest&gt;"</span>]  </span><br><span class="line">COPY home* /home</span><br></pre></td></tr></table></figure></p><p>复制本地的文件到容器中的目录，目录不存在则会自动创建，源可以是多个。在低版本的docker里如果源是绝对路径例如/root/data/nginx的话会把整个系统的根上传到docker daemon，会发现上传的内容等同于根的已用容量，例如下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM alpine</span><br><span class="line">COPY /root/data/nginx.tar.gz /root/home</span><br><span class="line">$ docker build -t <span class="built_in">test</span> .</span><br><span class="line">Sending build context to Docker daemon  7.8GB</span><br></pre></td></tr></table></figure></p><p>主要是因为上下文的概念，认为上下文的根是client的/，所以会把客户端的/上传到docker daemon，现在新版本是强制相对路径了，如果是绝对路径会报错。相对路径相对于build最后的.这个上下文路径为相对路径。</p><p>另外COPY还能指定uid:gid，如果容器的rootfs里没有文件/etc/passwd和/etc/group文件只能使用数字不能使用组名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY --chown=55:mygroup files* /somedir/</span><br><span class="line">COPY --chown=bin files* /somedir/</span><br><span class="line">COPY --chown=1 files* /somedir/</span><br><span class="line">COPY --chown=10:11 files* /somedir/</span><br></pre></td></tr></table></figure></p><p>COPY接受一个标志–from=&lt;name|index&gt;，该标志可用于将源位置设置为FROM .. AS <name> 主要用于多阶段构建，后面会举个例子来讲解多阶段构建，多阶段构建是17.05之后才出现的功能。</name></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;COPY&quot;&gt;&lt;a href=&quot;#COPY&quot; class=&quot;headerlink&quot; title=&quot;COPY&quot;&gt;&lt;/a&gt;COPY&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile RUN</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-RUN/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-RUN/</id>
    <published>2019-04-30T05:05:00.000Z</published>
    <updated>2019-04-30T06:11:56.631Z</updated>
    
    <content type="html"><![CDATA[<h6 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h6><p>有两种形式</p><ul><li>RUN command ( 该命令在shell中运行，默认情况下在Linux上是/bin/sh -c或windows的cmd /S /C)</li><li>RUN [“executable”, “param1”, “param2”] (exec 形式)</li></ul><p>exec形式不会调用shell先展开变量，也就是不会解析ENV或者ARG的变量，所以一般来讲用得比较多的就是第一种形式，多行的话可以利用\换行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN  .....\</span><br><span class="line">    &amp;&amp; addgroup -S nginx \</span><br><span class="line">&amp;&amp; adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \</span><br><span class="line">&amp;&amp; apk add --no-cache --virtual .build-deps \</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>这里要注意的是一个RUN是一层，dockerfile的一些涉及到文件的指令和RUN都会是新的一层，主要是构建过程实际上还是容器去commit，目的相同的RUN尽量合并在同一个RUN里减少大小。下面我做个例子来说明原因<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">RUN apk add wget  &amp;&amp; wget https://www.baidu.com -O test.html</span><br><span class="line">RUN <span class="built_in">echo</span> 123 &gt; test.html</span><br></pre></td></tr></table></figure></p><p>构建并运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t test .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/3 : FROM alpine</span><br><span class="line"> ---&gt; cdf98d1859c1</span><br><span class="line">Step 2/3 : RUN apk add wget  &amp;&amp; wget https://www.baidu.com -O test.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 07bd55d265b8</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing wget (1.20.3-r0)</span><br><span class="line">Executing busybox-1.29.3-r10.trigger</span><br><span class="line">OK: 6 MiB <span class="keyword">in</span> 15 packages</span><br><span class="line">--2019-04-30 05:38:10--  https://www.baidu.com/</span><br><span class="line">Resolving www.baidu.com... 58.217.200.39, 58.217.200.37</span><br><span class="line">Connecting to www.baidu.com|58.217.200.39|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 2443 (2.4K) [text/html]</span><br><span class="line">Saving to: <span class="string">'test.html'</span></span><br><span class="line"></span><br><span class="line">     0K ..                                                    100% 21.8M=0s</span><br><span class="line"></span><br><span class="line">2019-04-30 05:38:10 (21.8 MB/s) - <span class="string">'test.html'</span> saved [2443/2443]</span><br><span class="line"></span><br><span class="line">Removing intermediate container 07bd55d265b8</span><br><span class="line"> ---&gt; 9420c50ef6f7</span><br><span class="line">Step 3/3 : RUN <span class="built_in">echo</span> 123 &gt; test.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8724c012ff49</span><br><span class="line">Removing intermediate container 8724c012ff49</span><br><span class="line"> ---&gt; b924abffdb62</span><br><span class="line">Successfully built b924abffdb62</span><br><span class="line">Successfully tagged <span class="built_in">test</span>:latest</span><br></pre></td></tr></table></figure></p><p>运行然后查看docker的存储目录查找<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run --rm test cat test.html</span></span><br><span class="line">123</span><br><span class="line">[root@docker ~]<span class="comment"># find /var/lib/docker/overlay2/ -type f -name test.html</span></span><br><span class="line">/var/lib/docker/overlay2/3c4530c7cd077e1d6ec74135679fe7234eddc88fe72ada21f632cebfd26de4f5/diff/test.html</span><br><span class="line">/var/lib/docker/overlay2/802018b95e4f9b16e9946e2e827db5c3b0cd8631ac0759c31dffea212ff06d4f/diff/test.html</span><br><span class="line">[root@docker ~]<span class="comment"># cat /var/lib/docker/overlay2/3c4530c7cd077e1d6ec74135679fe7234eddc88fe72ada21f632cebfd26de4f5/diff/test.html</span></span><br><span class="line">123</span><br><span class="line">[root@docker ~]<span class="comment"># cat /var/lib/docker/overlay2/802018b95e4f9b16e9946e2e827db5c3b0cd8631ac0759c31dffea212ff06d4f/diff/test.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></p><p>发现两个文件都存在，前面说到了容器在读取文件的时候从上层往下查找，查找到了就返回，但是我的这个Dockerfile里第一个RUN下载了index页面，第二个改了文件内容。</p><p>可以证明一个RUN是一层，也证明了之前容器读取文件的逻辑。同时假设我们的目的是最终的123，我们可以俩个RUN合并了，这样就不会有多余的第一个RUN产生的test.html文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;RUN&quot;&gt;&lt;a href=&quot;#RUN&quot; class=&quot;headerlink&quot; title=&quot;RUN&quot;&gt;&lt;/a&gt;RUN&lt;/h6&gt;&lt;p&gt;有两种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RUN command ( 该命令在shell中运行，默认情况下在Linux上是/bin/sh
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ARG</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ARG/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ARG/</id>
    <published>2019-04-30T03:29:00.000Z</published>
    <updated>2019-04-30T06:11:49.693Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h6><p>格式有两种<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ARG key</span><br><span class="line">----------------</span><br><span class="line">ARK key=value</span><br><span class="line">ARG key=value \</span><br><span class="line">    key2=value2 \</span><br><span class="line">    key3=value3</span><br></pre></td></tr></table></figure></p><p>一般来讲第二种用得多，表明build的时候不传入变量设置默认值，无值就是第一种下用户在docker build的时候必须传入值，否则就报错。例如我们可以把nginx官方dockerfile的第一个ENV改成ARG，我们想构建哪个版本直接build的时候传入变量就行了。</p><p>当然ARG是唯一一个可以用于FROM前面的指令，例如下面这样我们可以通过命令行传递参数来改变FROM的base镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG jdk=1.8xxxx</span><br><span class="line">FROM openjdk:<span class="variable">$jdk</span></span><br></pre></td></tr></table></figure></p><p>Docker其实也预定了一些ARG方便我们构建的时候使用代理</p><ul><li>HTTP_PROXY</li><li>HTTPS_PROXY</li><li>FTP_PROXY</li><li>NO_PROXY</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ARG&quot;&gt;&lt;a href=&quot;#ARG&quot; class=&quot;headerlink&quot; title=&quot;ARG&quot;&gt;&lt;/a&gt;ARG&lt;/h6&gt;&lt;p&gt;格式有两种&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ENV</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-ENV/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-ENV/</id>
    <published>2019-04-30T03:09:00.000Z</published>
    <updated>2019-04-30T06:15:36.391Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h6><p>写法有两种，后者支持写多个，一般多个的话也是使用后者居多<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ENV key value</span><br><span class="line">-------</span><br><span class="line">ENV key=value key2=value2</span><br><span class="line">ENV key=value \</span><br><span class="line">    key2=value2  \</span><br><span class="line">    key3=value3   \</span><br><span class="line">    key4=value4</span><br></pre></td></tr></table></figure></p><p>设置一个环境变量，可以被dockerfile里后续的指令使用，也在容器运行过程中保持，支持的指令为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD COPY ENV EXPOSE FROM LABEL STOPSIGNAL USER VOLUME WORKDIR ONBUILD</span><br></pre></td></tr></table></figure></p><p>可以在dockerhub上发现各种官方镜像的Dockerfile的步骤都是固定的，新版本发布直接改下ENV后构建下即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ENV NGINX_VERSION 1.15.11</span><br><span class="line">RUN .... \</span><br><span class="line">    &amp;&amp; curl -fSL https://nginx.org/download/nginx-<span class="variable">$NGINX_VERSION</span>.tar.gz -o nginx.tar.gz \</span><br><span class="line">    ...</span><br><span class="line">    &amp;&amp; <span class="built_in">cd</span> /usr/src/nginx-<span class="variable">$NGINX_VERSION</span> \</span><br><span class="line">&amp;&amp; ./configure <span class="variable">$CONFIG</span> --with-debug \</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>很多应用镜像启动都是先启动一个脚本，拼接一堆参数最终传递给应用的主进程当作参数，最常见的就是tomcat，或者说很多的应用基于tomcat。下面是之前我修改一个镜像Dockerfile摸索出的启动脚本的运行过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="string">'['</span> -r /opt/atlassian/jira/bin/setenv.sh <span class="string">']'</span></span><br><span class="line">+ . /opt/atlassian/jira/bin/setenv.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat /opt/atlassian/jira/bin/setenv.sh</span><br><span class="line">...</span><br><span class="line">JAVA_OPTS=<span class="string">"-Xms<span class="variable">$&#123;JVM_MINIMUM_MEMORY&#125;</span> -Xmx<span class="variable">$&#123;JVM_MAXIMUM_MEMORY&#125;</span> <span class="variable">$&#123;JVM_CODE_CACHE_ARGS&#125;</span> <span class="variable">$&#123;JAVA_OPTS&#125;</span> <span class="variable">$&#123;JVM_REQUIRED_ARGS&#125;</span> <span class="variable">$&#123;DISABLE_NOTIFICATIONS&#125;</span> <span class="variable">$&#123;JVM_SUPPORT_RECOMMENDED_ARGS&#125;</span> <span class="variable">$&#123;JVM_EXTRA_ARGS&#125;</span> <span class="variable">$&#123;JIRA_HOME_MINUSD&#125;</span> <span class="variable">$&#123;START_JIRA_JAVA_OPTS&#125;</span>"</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS</span><br><span class="line">...</span><br><span class="line"><span class="built_in">exec</span> java <span class="variable">$JAVA_OPTS</span></span><br></pre></td></tr></table></figure></p><p>其中有一行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"... <span class="variable">$&#123;JAVA_OPTS&#125;</span> ..."</span></span><br></pre></td></tr></table></figure></p><p>他拼接了自己，如果想给java在最终参数后添加一些固定参数时，可以在构建镜像声明JAVA_OPTS，例如添加时区我们应该在Dockerfile里设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV  JAVA_OPTS=<span class="string">'-Duser.timezone=GMT+08'</span></span><br></pre></td></tr></table></figure></p><p>docker run可以指定env，ENV指令不一样是给Dockerfile用的，有时候是给容器启动时候用的，我们可以在docker run的时候指定env或者覆盖env达到不需要修改镜像，例如常见的后端需要连接一个mysql，可以在后端代码os.getEnv(“mysql_address”)，我们启动的时候指定mysql_address变量为真实的mysql地址即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ENV&quot;&gt;&lt;a href=&quot;#ENV&quot; class=&quot;headerlink&quot; title=&quot;ENV&quot;&gt;&lt;/a&gt;ENV&lt;/h6&gt;&lt;p&gt;写法有两种，后者支持写多个，一般多个的话也是使用后者居多&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile MAINTAINER</title>
    <link href="http://yoursite.com/2019/04/30/Dockerfile-MAINTAINER/"/>
    <id>http://yoursite.com/2019/04/30/Dockerfile-MAINTAINER/</id>
    <published>2019-04-30T03:09:00.000Z</published>
    <updated>2019-04-30T06:11:40.396Z</updated>
    
    <content type="html"><![CDATA[<h6 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h6><p>已经弃用，推荐使用LABEL，例如nginx dockerfile里的</p><p>LABEL maintainer=”NGINX Docker Maintainers <a href="mailto:&#x64;&#x6f;&#99;&#107;&#x65;&#114;&#45;&#109;&#x61;&#x69;&#110;&#116;&#64;&#110;&#x67;&#105;&#110;&#120;&#46;&#99;&#x6f;&#109;" target="_blank" rel="noopener">&#x64;&#x6f;&#99;&#107;&#x65;&#114;&#45;&#109;&#x61;&#x69;&#110;&#116;&#64;&#110;&#x67;&#105;&#110;&#120;&#46;&#99;&#x6f;&#109;</a>“</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;MAINTAINER&quot;&gt;&lt;a href=&quot;#MAINTAINER&quot; class=&quot;headerlink&quot; title=&quot;MAINTAINER&quot;&gt;&lt;/a&gt;MAINTAINER&lt;/h6&gt;&lt;p&gt;已经弃用，推荐使用LABEL，例如nginx dockerfile里的&lt;/p
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile FROM</title>
    <link href="http://yoursite.com/2019/04/29/Dockerfile-FROM-1/"/>
    <id>http://yoursite.com/2019/04/29/Dockerfile-FROM-1/</id>
    <published>2019-04-29T05:37:00.000Z</published>
    <updated>2019-04-30T06:04:56.585Z</updated>
    
    <content type="html"><![CDATA[<h6 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h6><p>用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;baseimage&gt; 或者 FROM &lt;baseimage&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure></p><p>指定从哪个镜像为基础迭代，如果本地没有镜像则会从仓库拉取，通常是第一行，而scratch是空镜像，是所有rootfs和一些单独可执行文件做镜像的根源，关于scratch后续会说。</p><p>例如centos的Dockerfile是下面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /</span><br><span class="line"></span><br><span class="line">LABEL org.label-schema.schema-version=<span class="string">"1.0"</span> \</span><br><span class="line">    org.label-schema.name=<span class="string">"CentOS Base Image"</span> \</span><br><span class="line">    org.label-schema.vendor=<span class="string">"CentOS"</span> \</span><br><span class="line">    org.label-schema.license=<span class="string">"GPLv2"</span> \</span><br><span class="line">    org.label-schema.build-date=<span class="string">"20190305"</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"/bin/bash"</span>]</span><br></pre></td></tr></table></figure></p><p>而hello-world为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">COPY hello /</span><br><span class="line">CMD [<span class="string">"/hello"</span>]</span><br><span class="line"></span><br><span class="line">docker images | grep hello</span><br><span class="line">hello-world         latest              fce289e99eb9        3 months ago        1.84kB</span><br></pre></td></tr></table></figure></p><p>nginx:alpine镜像的dockerfile 链接为<br><a href="https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile，大家可以仿照这个经典案例写出自己的Dockerfile。" target="_blank" rel="noopener">https://github.com/nginxinc/docker-nginx/blob/7d7c67f2eaa6b2b32c718ba9d93f152870513c7c/mainline/alpine/Dockerfile，大家可以仿照这个经典案例写出自己的Dockerfile。</a></p><p>nginx:alpine既满足运行的最小环境下大小又很小，主要归功于FROM alpine ，现在alpine这个系统和rootfs得益于docker发展非常快，也有很多应用镜像都有alpine版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.9</span><br><span class="line"></span><br><span class="line">LABEL maintainer=<span class="string">"NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;"</span></span><br><span class="line"></span><br><span class="line">ENV NGINX_VERSION 1.15.11</span><br><span class="line"></span><br><span class="line">RUN ...省略步骤，步骤是下载源码，安装编译需要的依赖，编译安装完删掉源码包和编译的依赖保留运编译出来的nginx二进制和需要的所有so文件</span><br><span class="line"></span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">STOPSIGNAL SIGTERM</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;FROM&quot;&gt;&lt;a href=&quot;#FROM&quot; class=&quot;headerlink&quot; title=&quot;FROM&quot;&gt;&lt;/a&gt;FROM&lt;/h6&gt;&lt;p&gt;用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像03</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F03/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像03/</id>
    <published>2019-04-29T04:51:00.000Z</published>
    <updated>2019-04-29T05:36:01.255Z</updated>
    
    <content type="html"><![CDATA[<h6 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h6><p>构建镜像只有两种方式，docker build 和 docker commit。实际上docker build是调用的docker commit。不推荐手动去docker commmit运行的容器成镜像。所以主要讲docker build和dockerfile。</p><p>使用docker build 指定Dockerfile来完成一个新镜像的构建。命令格式一般为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [option] [-t &lt;image&gt;:&lt;tag&gt;]  &lt;path&gt;</span><br></pre></td></tr></table></figure></p><p>其中path指向的文件称为context（上下文），context包含docker build镜像过程中需要的Dockerfile以及其他的资源文件。执行build命令后执行流程如下：</p><ul><li>Docker client端<ul><li>解析命令行参数，完成对相关信息的设置，Docker client向Docker server发送POST/build的HTTP请求，包含了所需的上下文文件。</li></ul></li><li>Docker server端<ul><li>创建一个临时目录，并将context指定的文件系统解压到该目录下</li><li>读取并解析Dockerfile</li><li>根据解析出的Dockerfile遍历其中的所有指令，并分发到不同的模块（parser）去执行</li><li>parser为Dockerfile的每一个指令创建一个对应的临时容器，在临时容器中执行当前指令，然后通过commit使用此镜像生成一个镜像层</li><li>Dockerfile中所有的指令对应的层的集合，就是此次build后的结果。如果指定了tag参数，便给镜像打上对应的tag。最后一次commit生成的镜像ID就会作为最终的镜像ID返回。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;构建镜像&quot;&gt;&lt;a href=&quot;#构建镜像&quot; class=&quot;headerlink&quot; title=&quot;构建镜像&quot;&gt;&lt;/a&gt;构建镜像&lt;/h6&gt;&lt;p&gt;构建镜像只有两种方式，docker build 和 docker commit。实际上docker build是调用的doc
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker镜像02</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F02/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像02/</id>
    <published>2019-04-29T02:22:00.000Z</published>
    <updated>2019-04-29T04:43:23.063Z</updated>
    
    <content type="html"><![CDATA[<h6 id="容器是单独的一层读写层"><a href="#容器是单独的一层读写层" class="headerlink" title="容器是单独的一层读写层"></a>容器是单独的一层读写层</h6><p>一个镜像可以运行无数个容器，容器需要读取文件的场景和对应原理是如下。</p><ul><li>在无挂载卷情况下，通过docker cp或exec产生的数据，文件会在读写层里，删除容器则文件也一并删除。</li><li>读取文件，从上层往下找到镜像层，找到即可返回，复制到容器层读入内存。</li><li>修改文件，从上层往下找到镜像层，找到即可返回，复制到容器层后修改。</li><li>删除文件，找到后在容器层记录下删除操作(类似盖层布，后续读取的时候会认为文件不存在)</li></ul><p>容器与镜像关系为下图<br><img src="/images/pasted-5.png" alt="upload successful"></p><p>通过docker ps 的-s选项可以看出容器的size和容器层总大小，这里我用docker命令演示下容器是单独一层读写层和容器被删除后数据消失。</p><p><img src="/images/pasted-6.png" alt="upload successful"><br><img src="/images/pasted-7.png" alt="upload successful"></p><p>创建一个容器，在容器里写入1g数据，宿主机的可用容量减少1G，docker的overlay2存储目录记录了下这个文件，但是删除后文件也被删除了。在抽象逻辑上一个容器就是单独一个读写层，而删除容器后这层在宿主机上的文件也会被删除。</p><p>计算实际占用大小时镜像的大小不会被重复计算，只需要计算一个大小+它起的所有容器大小。<br>目前启动了5个nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps -s</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES               SIZE</span><br><span class="line">ac5c0d1f8d6b        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   7 seconds ago       Up 5 seconds        80/tcp              web5                2B (virtual 16.1MB)</span><br><span class="line">0dd2c0c36084        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   11 seconds ago      Up 9 seconds        80/tcp              web4                2B (virtual 16.1MB)</span><br><span class="line">413d9270c702        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   15 seconds ago      Up 13 seconds       80/tcp              web3                2B (virtual 16.1MB)</span><br><span class="line">43f8e010f7bb        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   19 seconds ago      Up 17 seconds       80/tcp              web2                2B (virtual 16.1MB)</span><br><span class="line">610abcfab29d        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   25 seconds ago      Up 23 seconds       80/tcp              web1                2B (virtual 16.1MB)</span><br></pre></td></tr></table></figure></p><p>使用exec往容器里写数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> web1 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=10'</span></span><br><span class="line">docker <span class="built_in">exec</span> web2 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=20'</span></span><br><span class="line">docker <span class="built_in">exec</span> web3 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=30'</span></span><br><span class="line">docker <span class="built_in">exec</span> web4 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=40'</span></span><br><span class="line">docker <span class="built_in">exec</span> web5 sh -c <span class="string">'dd if=/dev/zero of=/test.log bs=1000000 count=50'</span></span><br><span class="line">]<span class="comment"># docker ps -as</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES               SIZE</span><br><span class="line">ac5c0d1f8d6b        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   56 seconds ago       Up 54 seconds       80/tcp              web5                50MB (virtual 66.1MB)</span><br><span class="line">0dd2c0c36084        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up 58 seconds       80/tcp              web4                40MB (virtual 56.1MB)</span><br><span class="line">413d9270c702        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              web3                30MB (virtual 46.1MB)</span><br><span class="line">43f8e010f7bb        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              web2                20MB (virtual 36.1MB)</span><br><span class="line">610abcfab29d        nginx:alpine        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              web1                10MB (virtual 26.1MB)</span><br></pre></td></tr></table></figure></p><p>实际占用量计算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 x 16.1MB 只读镜像层</span><br><span class="line">1 x 10MB</span><br><span class="line">1 x 20MB</span><br><span class="line">1 x 30MB</span><br><span class="line">1 x 40MB</span><br><span class="line">1 x 50MB</span><br><span class="line">===========================</span><br><span class="line">161.1MB</span><br></pre></td></tr></table></figure></p><p>这样我们可以推导出docker镜像是分层和容器是单独一层只读镜像的。也有部分人不懂这些知识，每次是进容器里安装东西然后commit，导致最后容器越来越大，甚至看到过16g的镜像。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;容器是单独的一层读写层&quot;&gt;&lt;a href=&quot;#容器是单独的一层读写层&quot; class=&quot;headerlink&quot; title=&quot;容器是单独的一层读写层&quot;&gt;&lt;/a&gt;容器是单独的一层读写层&lt;/h6&gt;&lt;p&gt;一个镜像可以运行无数个容器，容器需要读取文件的场景和对应原理是如下。
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker镜像01</title>
    <link href="http://yoursite.com/2019/04/29/Docker%E9%95%9C%E5%83%8F01/"/>
    <id>http://yoursite.com/2019/04/29/Docker镜像01/</id>
    <published>2019-04-29T02:12:00.000Z</published>
    <updated>2019-04-29T02:20:31.125Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Docker镜像层"><a href="#Docker镜像层" class="headerlink" title="Docker镜像层"></a>Docker镜像层</h6><p>镜像为什么是有层的？镜像分层是为了解决什么？</p><p>虽然镜像解决了打包，但是实际应用中我们的应用都是基于同一个rootfs来打包和迭代的，难道每个rootfs都会多份吗？</p><p>为此docker利用了存储驱动AUFS，devicemapper，overlay，overlay2的存储技术实现了分层。初期是AUFS，到现在的overlay2驱动（不推荐devicemapper坑很多）。例如一个nginx:alpine和python:alpine镜像可以从分层角度这样去理解。</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><p>实际上只有不同的层才占据存储空间，相同的层则是引用关系。抽象地看镜像是一个实体，实际上是/var/lib/docker目录里的分层文件外加一些json和db文件把层联系起来组成了镜像。存储路径是/var/lib/docker/存储驱动类型/。</p><p><img src="/images/pasted-4.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;Docker镜像层&quot;&gt;&lt;a href=&quot;#Docker镜像层&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像层&quot;&gt;&lt;/a&gt;Docker镜像层&lt;/h6&gt;&lt;p&gt;镜像为什么是有层的？镜像分层是为了解决什么？&lt;/p&gt;
&lt;p&gt;虽然镜像解决了打包，但是
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>proxmox中cloud-init使用方法</title>
    <link href="http://yoursite.com/2019/04/18/proxmox%E4%B8%ADcloud-init%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/18/proxmox中cloud-init使用方法/</id>
    <published>2019-04-18T03:06:00.000Z</published>
    <updated>2019-04-18T05:14:02.283Z</updated>
    
    <content type="html"><![CDATA[<h6 id="模版制作"><a href="#模版制作" class="headerlink" title="模版制作"></a>模版制作</h6><p>标准分区ext4，不添加swap分区，原因下文说。<br><img src="/images/pasted-1.png" alt="upload successful"></p><p>系统装完后，将网卡配置文件内的onboot打开，清除uuid。关闭selinux和firewalld以及碍事的NetworkManager。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> --now firewalld NetworkManager</span><br><span class="line">setenforce 0</span><br><span class="line">sed -ri <span class="string">'/^[^#]*SELINUX=/s#=.+$#=disabled#'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure></p><p>为了让虚拟化层可以重启和关闭虚拟机，必须安装acpid服务；为了使根分区正确调整大小安装cloud-utils-growpart，cloud-init支持下发前设置信息写入。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y acpid cloud-init cloud-utils-growpart</span><br><span class="line">systemctl <span class="built_in">enable</span> acpid</span><br></pre></td></tr></table></figure></p><p>禁用默认zeroconf路线<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"NOZEROCONF=yes"</span> &gt;&gt; /etc/sysconfig/network</span><br></pre></td></tr></table></figure></p><p>防止ssh连接使用dns导致访问过慢<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">'/UseDNS/&#123;s@#@@;s@\s+.+@ no@&#125;'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></p><p>cloud-init配置文件:1. ssh_pwauth 为 0 是禁止使用password登陆。2. disable_root：1 是禁止root登陆。3. package-update-upgrade-install会在第一次开机启动时自动yum update -y。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">'/disable_root/&#123;s#\S$#0#&#125;'</span> /etc/cloud/cloud.cfg</span><br><span class="line">sed -ri <span class="string">'/ssh_pwauth/&#123;s#\S$#1#&#125;'</span> /etc/cloud/cloud.cfg</span><br><span class="line">sed -ri <span class="string">'/package-update/s@^@#@'</span> /etc/cloud/cloud.cfg</span><br></pre></td></tr></table></figure></p><p>默认cloud-init会创建一个系统类型的用户,可以注释掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  default_user:</span></span><br><span class="line"><span class="comment">#    name: centos</span></span><br><span class="line"><span class="comment">#    lock_passwd: true</span></span><br><span class="line"><span class="comment">#    gecos: Cloud User</span></span><br><span class="line"><span class="comment">#    groups: [wheel, adm, systemd-journal]</span></span><br><span class="line"><span class="comment">#    sudo: ["ALL=(ALL) NOPASSWD:ALL"]</span></span><br><span class="line"><span class="comment">#    shell: /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>安装些基础包和预设一些脚本的话就可以关机。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install vim git wget -y</span><br><span class="line">poweroff</span><br></pre></td></tr></table></figure></p><h6 id="转换模版"><a href="#转换模版" class="headerlink" title="转换模版"></a>转换模版</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~<span class="comment"># qm list</span></span><br><span class="line">      VMID NAME                 STATUS     MEM(MB)    BOOTDISK(GB) PID</span><br><span class="line">       100 cloud-init           stopped    2048              20.00 0</span><br><span class="line">       101 k8s-m1               running    2048              20.00 7438</span><br><span class="line">root@pve:~<span class="comment"># qm set 100 --ide2 local-lvm:cloudinit</span></span><br><span class="line">update VM 100: -ide2 <span class="built_in">local</span>-lvm:cloudinit</span><br><span class="line">  Using default stripesize 64.00 KiB.</span><br><span class="line">  Logical volume <span class="string">"vm-100-cloudinit"</span> created.</span><br></pre></td></tr></table></figure><p>在Dashboard上可以看到虚拟机的could-init部分已经可以更改属性了。</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>在Dashboard上把它转换成模板,部署时完整克隆,开机之前双击需要设置的信息即可,否则例如密码不设置默认是模板的密码。也可以通过命令行初始化虚拟机信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm <span class="built_in">set</span> &lt;vmid&gt; --ipconfig0 ip=10.105.26.x/23,gw=10.105.26.1</span><br></pre></td></tr></table></figure></p><h6 id="备份和恢复虚拟机"><a href="#备份和恢复虚拟机" class="headerlink" title="备份和恢复虚拟机"></a>备份和恢复虚拟机</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~<span class="comment"># vzdump 100</span></span><br><span class="line">INFO: starting new backup job: vzdump 100</span><br><span class="line">INFO: Starting Backup of VM 100 (qemu)</span><br><span class="line">INFO: status = stopped</span><br><span class="line">INFO: update VM 100: -lock backup</span><br><span class="line">INFO: backup mode: stop</span><br><span class="line">INFO: ionice priority: 7</span><br><span class="line">INFO: VM Name: cloud-init</span><br><span class="line">INFO: include disk <span class="string">'scsi0'</span> <span class="string">'local-lvm:vm-100-disk-0'</span> 20G</span><br><span class="line">INFO: creating archive <span class="string">'/var/lib/vz/dump/vzdump-qemu-100-2019_04_18-12_48_38.vma'</span></span><br><span class="line">INFO: starting kvm to execute backup task</span><br><span class="line">Total translation table size: 0</span><br><span class="line">Total rockridge attributes bytes: 417</span><br><span class="line">Total directory bytes: 0</span><br><span class="line">Path table size(bytes): 10</span><br><span class="line">Max brk space used 0</span><br><span class="line">178 extents written (0 MB)</span><br><span class="line">INFO: started backup task <span class="string">'d65a8f26-20fe-4232-abd3-ec0bcf4623cd'</span></span><br><span class="line">INFO: status: 3% (785645568/21474836480), sparse 1% (395206656), duration 3, <span class="built_in">read</span>/write 261/130 MB/s</span><br><span class="line">INFO: status: 21% (4593876992/21474836480), sparse 19% (4184059904), duration 6, <span class="built_in">read</span>/write 1269/6 MB/s</span><br><span class="line">INFO: status: 34% (7457996800/21474836480), sparse 32% (6929133568), duration 9, <span class="built_in">read</span>/write 954/39 MB/s</span><br><span class="line">INFO: status: 50% (10746396672/21474836480), sparse 46% (10083291136), duration 12, <span class="built_in">read</span>/write 1096/44 MB/s</span><br><span class="line">INFO: status: 61% (13169524736/21474836480), sparse 57% (12349382656), duration 15, <span class="built_in">read</span>/write 807/52 MB/s</span><br><span class="line">INFO: status: 70% (15039004672/21474836480), sparse 64% (13956280320), duration 18, <span class="built_in">read</span>/write 623/87 MB/s</span><br><span class="line">INFO: status: 80% (17196580864/21474836480), sparse 74% (15934279680), duration 21, <span class="built_in">read</span>/write 719/59 MB/s</span><br><span class="line">INFO: status: 89% (19120455680/21474836480), sparse 82% (17667883008), duration 24, <span class="built_in">read</span>/write 641/63 MB/s</span><br><span class="line">INFO: status: 95% (20594622464/21474836480), sparse 88% (18997477376), duration 27, <span class="built_in">read</span>/write 491/48 MB/s</span><br><span class="line">INFO: status: 100% (21474836480/21474836480), sparse 92% (19877691392), duration 28, <span class="built_in">read</span>/write 880/0 MB/s</span><br><span class="line">INFO: transferred 21474 MB <span class="keyword">in</span> 28 seconds (766 MB/s)</span><br><span class="line">INFO: stopping kvm after backup task</span><br><span class="line">INFO: archive file size: 1.49GB</span><br><span class="line">INFO: Finished Backup of VM 100 (00:00:32)</span><br><span class="line">INFO: Backup job finished</span><br></pre></td></tr></table></figure><p>输出路径在：/var/lib/vz/dump/，导入的话使用如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmrestore vzdump-qemu-xx.vma &lt;vmid&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;模版制作&quot;&gt;&lt;a href=&quot;#模版制作&quot; class=&quot;headerlink&quot; title=&quot;模版制作&quot;&gt;&lt;/a&gt;模版制作&lt;/h6&gt;&lt;p&gt;标准分区ext4，不添加swap分区，原因下文说。&lt;br&gt;&lt;img src=&quot;/images/pasted-1.png&quot; a
      
    
    </summary>
    
      <category term="Proxmox" scheme="http://yoursite.com/categories/Proxmox/"/>
    
    
      <category term="virtualization" scheme="http://yoursite.com/tags/virtualization/"/>
    
  </entry>
  
  <entry>
    <title>k8s配置secret拉取私有仓库镜像</title>
    <link href="http://yoursite.com/2019/04/10/k8s%E9%85%8D%E7%BD%AEsecret%E6%8B%89%E5%8F%96%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/04/10/k8s配置secret拉取私有仓库镜像/</id>
    <published>2019-04-10T09:11:00.000Z</published>
    <updated>2019-04-18T05:01:30.701Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/docs" target="_blank" rel="noopener">https://kubernetes.io/docs</a></p><h6 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat ~/.docker/config.json </span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"auths"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">"harbor.station.com"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">"auth"</span><span class="string">:</span> <span class="string">"YWRtaW46SGFyYm9yMTIzNDU="</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"HttpHeaders"</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">"User-Agent"</span><span class="string">:</span> <span class="string">"Docker-Client/18.06.1-ce (linux)"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>这个时候我们虽然可以通过交互式登录，使用docker pull拉取镜像，但无法通过k8s创建Pod时拉取镜像。</p><h6 id="生成密钥secret"><a href="#生成密钥secret" class="headerlink" title="生成密钥secret"></a>生成密钥secret</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl create secret docker-registry harbor --docker-server=x.x.x.x --docker-username=admin --docker-password=Harbor12345 --docker-email=xx@qq.com</span></span><br></pre></td></tr></table></figure><p>1) harbor: 指定密钥的键名称，可自行定义 2）–docker-server：指定docker仓库地址 3）–docker-username：指定docker仓库帐号 4) –docker-password：指定docker仓库密码 5) –docker-email：指定邮件地址（选填）`</p><h6 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h6><p>可以看到当前除了默认的密钥, 还有我们刚才生成的. 另外要注意的是, 该密钥只能在对应namespace使用, 也就是这里的default, 如果需要用到其他namespace, 比如说test, 就需要在生成的时候指定参数 -n test。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get secrets</span></span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-mzmtj   kubernetes.io/service-account-token   3      22m</span><br><span class="line">harbor                kubernetes.io/dockerconfigjson        1      22m</span><br></pre></td></tr></table></figure></p><h6 id="YAML例子"><a href="#YAML例子" class="headerlink" title="YAML例子"></a>YAML例子</h6><p>其中imagePullSecrets是声明拉取镜像时需要指定密钥, harbor必须和上面生成密钥的键名一致, 另外检查一下pod和密钥是否在同一个namespace, 之后k8s便可以拉取镜像。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-deploy</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">harbor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">web_server</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">harbor.station.com/library/nginx:latest</span></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">harbor</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kubernetes.io/docs&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Kubernetes" scheme="http://yoursite.com/categories/Kubernetes/"/>
    
    
      <category term="Harbor" scheme="http://yoursite.com/tags/Harbor/"/>
    
  </entry>
  
</feed>
