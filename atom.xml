<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Cheng</title>
  
  <subtitle>While the world sleeps, you dream</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-07-20T07:44:15.331Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ECS 上使用 vip 的解决方案</title>
    <link href="http://yoursite.com/2019/10/17/ECS-%E4%B8%8A%E4%BD%BF%E7%94%A8-vip-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/10/17/ECS-上使用-vip-的解决方案/</id>
    <published>2019-10-17T13:26:16.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<h5 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h5><p>在阿里云部署 Kubernetes，需要为 API-Server 做 HA，第一个想到的是使用 keepalived + haproxy，但是众所周知，公有云不支持组播。当然，如果想省心，直接使用阿里云的托管服务。</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li>使用公有云的 SLB</li><li>脚本调用阿里云的 API，直接使用单播</li></ul><h5 id="ENI-介绍"><a href="#ENI-介绍" class="headerlink" title="ENI 介绍"></a>ENI 介绍</h5><p>弹性网卡（Elastic Network Interface，简称ENI）是一种可以附加到专有网络VPC类型ECS实例上的虚拟网卡。通过弹性网卡，您可以在任何阿里云地域下实现高可用集群搭建、低成本故障转移和精细化的网络管理。</p><h5 id="创建-ENI"><a href="#创建-ENI" class="headerlink" title="创建 ENI"></a>创建 ENI</h5><h5 id="授权-ESC-权限"><a href="#授权-ESC-权限" class="headerlink" title="授权 ESC 权限"></a>授权 ESC 权限</h5><h5 id="安装-Python-模块"><a href="#安装-Python-模块" class="headerlink" title="安装 Python 模块"></a>安装 Python 模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install aliyun-python-sdk-core aliyun-python-sdk-ecs</span><br></pre></td></tr></table></figure><h5 id="利用-Python-控制-ENI"><a href="#利用-Python-控制-ENI" class="headerlink" title="利用 Python 控制 ENI"></a>利用 Python 控制 ENI</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ClientException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.acs_exception.exceptions <span class="keyword">import</span> ServerException</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526.AttachNetworkInterfaceRequest <span class="keyword">import</span> AttachNetworkInterfaceRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkecs.request.v20140526.DetachNetworkInterfaceRequest <span class="keyword">import</span> DetachNetworkInterfaceRequest</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> </span><br><span class="line">AccessKeyId = <span class="string">'AccessKeyId'</span> </span><br><span class="line">AccessKeySecret = <span class="string">'AccessKeySecret'</span></span><br><span class="line">Endpoint = <span class="string">'cn-qingdao'</span></span><br><span class="line">remove_ecs_id = sys.argv[<span class="number">1</span>]  <span class="comment">#传递移除网卡的ecs_id</span></span><br><span class="line">ENI_ID = <span class="string">'xxxx'</span>  <span class="comment">#弹性辅助网卡ENI的id</span></span><br><span class="line">ECS_ID_LIST = [<span class="string">'xxxx'</span>,<span class="string">'xxxxx'</span>]   <span class="comment">#ENI网卡绑定的ecs集群列表</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ECS_ID_LIST.remove(remove_ecs_id)</span><br><span class="line"><span class="keyword">except</span> Exception  <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">add_ecs_id = ECS_ID_LIST[<span class="number">0</span>]   <span class="comment">#选一个可以用的ecs的id，做为网卡绑定的服务器</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_vip</span><span class="params">(remove_ecs_id,ENI_ID)</span>:</span></span><br><span class="line">    <span class="string">'''解绑函数'''</span></span><br><span class="line">    client = AcsClient(AccessKeyId,AccessKeySecret,Endpoint) <span class="comment">#建议不要使用变量，直接输入字符串</span></span><br><span class="line">    request = DetachNetworkInterfaceRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">    request.set_InstanceId(remove_ecs_id)</span><br><span class="line">    request.set_NetworkInterfaceId(ENI_ID)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">    <span class="keyword">except</span> Exception  <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        exit(<span class="number">2</span>)</span><br><span class="line">    print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_vip</span><span class="params">(add_ecs_id,ENI_ID)</span>:</span></span><br><span class="line">    <span class="string">'''绑定函数'''</span></span><br><span class="line">    client = AcsClient(AccessKeyId,AccessKeySecret,Endpoint) <span class="comment">#建议不要使用变量，直接输入字符串</span></span><br><span class="line">    request = AttachNetworkInterfaceRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">    request.set_NetworkInterfaceId(ENI_ID)</span><br><span class="line">    request.set_InstanceId(add_ecs_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">    <span class="keyword">except</span> Exception  <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        exit(<span class="number">3</span>)</span><br><span class="line">    print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">'__main__'</span>:</span><br><span class="line">    ret = remove_vip(remove_ecs_id,ENI_ID)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        add_vip(add_ecs_id,ENI_ID)</span><br></pre></td></tr></table></figure><h5 id="配置-keepalived-单播模式"><a href="#配置-keepalived-单播模式" class="headerlink" title="配置 keepalived 单播模式"></a>配置 keepalived 单播模式</h5><p>主配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc  <span class="comment">#发送邮箱</span></span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc <span class="comment">#邮箱地址</span></span><br><span class="line">   smtp_server 127.0.0.1   <span class="comment">#邮件服务器地址</span></span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL-01   <span class="comment">#主机名，每个节点不同即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER   <span class="comment">#节点主从，在另一个节点上为BACKUP</span></span><br><span class="line">    interface eth0  <span class="comment">#IP地址漂移到的网卡</span></span><br><span class="line">    virtual_router_id 51  <span class="comment">#多个节点必须相同</span></span><br><span class="line">    priority 100   <span class="comment">#优先级，备用节点的值必须低于主节点的值</span></span><br><span class="line">    advert_int 1   <span class="comment">#通告间隔1秒</span></span><br><span class="line">    authentication &#123; </span><br><span class="line">        auth_type PASS   <span class="comment">#预共享密钥认证</span></span><br><span class="line">        auth_pass 1111   <span class="comment">#密钥</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">unicast_src_ip 172.31.0.204  <span class="comment">#本机地址</span></span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        172.31.0.205    <span class="comment">#目标地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.100/24  dev eth0  <span class="comment">#VIP地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL-02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">unicast_src_ip 172.31.0.205</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        172.31.0.204</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.100/24 dev eth0 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>检查脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">source</span> /etc/init.d/<span class="built_in">functions</span></span><br><span class="line"> </span><br><span class="line">vip=192.168.1.100  <span class="comment">#虚拟vip</span></span><br><span class="line">local_ip=172.31.0.204  <span class="comment">#本机ip</span></span><br><span class="line">rsync_module_ip=172.31.0.205  <span class="comment">#rsync目标的ip</span></span><br><span class="line">ecs_id_file=/tmp/ecs_id.txt  <span class="comment">#保存弹性网卡所在的ecs的id名称（ecsID）</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">declare</span> -A arr</span><br><span class="line">arr[<span class="string">"172.31.0.204"</span>]=<span class="string">"ecs的id"</span>    <span class="comment">#内网ip作为key，ecs的id作为value</span></span><br><span class="line">arr[<span class="string">"172.31.0.205"</span>]=<span class="string">"ecs的id"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ `ip a s eth0|egrep -o <span class="variable">$&#123;vip&#125;</span>|wc -l` -eq 1 ];<span class="keyword">then</span>  <span class="comment">#判断是否拥有vip</span></span><br><span class="line">     <span class="keyword">if</span> [ `cat <span class="variable">$&#123;ecs_id_file&#125;</span>|wc -l` -eq 1 ];<span class="keyword">then</span> <span class="comment">#判断文件是否有内容</span></span><br><span class="line">         <span class="keyword">if</span> `cat <span class="variable">$&#123;ecs_id_file&#125;</span>` != <span class="variable">$&#123;arr[$&#123;local_ip&#125;</span>]&#125;;<span class="keyword">then</span> <span class="comment">#判断ecs_id_file文件中记录的ecsID和本机的ecsID是否相同</span></span><br><span class="line">             python3  ENI.py <span class="variable">$&#123;arr[$&#123;rsync_module_ip&#125;</span>]&#125;  <span class="comment">#执行脚本(python控制ENI的脚本)</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="variable">$&#123;arr[$&#123;local_ip&#125;</span>]&#125; &gt; <span class="variable">$&#123;ecs_id_file&#125;</span> </span><br><span class="line">             rsync -avz <span class="variable">$&#123;ecs_id_file&#125;</span> module_user@<span class="variable">$&#123;rsync_module_ip&#125;</span>::aliyun_eni_module  --password-file=/etc/rsync.password</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             rsync -avz <span class="variable">$&#123;ecs_id_file&#125;</span> module_user@<span class="variable">$&#123;rsync_module_ip&#125;</span>::aliyun_eni_module  --password-file=/etc/rsync.password</span><br><span class="line">             </span><br><span class="line">         <span class="keyword">fi</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     <span class="comment">#    unset arr[$&#123;local_ip&#125;]  #删除arr中的本机的变量内容</span></span><br><span class="line">         python3  ENI.py <span class="variable">$&#123;arr[$&#123;rsync_module_ip&#125;</span>]&#125;  <span class="comment">#执行脚本(python控制ENI的脚本)</span></span><br><span class="line">         <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span>   <span class="comment">#判断执行是否失败</span></span><br><span class="line">             <span class="comment">#脚本执行成功,覆盖文件内容</span></span><br><span class="line">             <span class="built_in">echo</span> <span class="variable">$&#123;arr[$&#123;local_ip&#125;</span>]&#125; &gt; <span class="variable">$&#123;ecs_id_file&#125;</span>  </span><br><span class="line">             <span class="comment">#rsync覆盖给另一台服务器的ecs_id_file文件（建议使用rsync的demon）</span></span><br><span class="line">             rsync -avz <span class="variable">$&#123;ecs_id_file&#125;</span> module_user@<span class="variable">$&#123;rsync_module_ip&#125;</span>::aliyun_eni_module  --password-file=/etc/rsync.password</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">             <span class="comment">#执行失败了操作</span></span><br><span class="line">             action <span class="string">"python3 scripts carried out Fail <span class="variable">$&#123;rsync_module_ip&#125;</span>"</span> /bin/<span class="literal">false</span></span><br><span class="line">              </span><br><span class="line">          </span><br><span class="line">         <span class="keyword">fi</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h5&gt;&lt;p&gt;在阿里云部署 Kubernetes，需要为 API-Server 做 HA，第一个想到的是使用 keepalived + h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pod 的 lifecycle</title>
    <link href="http://yoursite.com/2019/09/20/Pod-%E7%9A%84-lifecycle/"/>
    <id>http://yoursite.com/2019/09/20/Pod-的-lifecycle/</id>
    <published>2019-09-20T05:38:29.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<h6 id="Pod-phase"><a href="#Pod-phase" class="headerlink" title="Pod phase"></a>Pod phase</h6><p>Pod 的 status 字段是一个 Pod Status 对象，Pod Status 对象中有一个 phase 字段。phase 拥有以下几种值：</p><ul><li>Pending：Kubernetes 已经接受 Pod 实例的创建，但其中包含一个或者多个容器并未创建成功。Pending 包含调度和通过网络下载镜像的时间。</li><li>Running：Pod 已经被调度到某个节点上，Pod 中所有的容器都已经创建。此时至少有一个容器正在运行，或正处于启动、重启状态。</li><li>Succeeded：Pod 中的所有容器正常终止，不会再起启动。</li><li>Faild：Pod 中所有容器都已经终止，至少有一个容器非正常结束，例如：退出状态码为 0，被系统 OOME。</li><li>Unknown：无法取得 Pod 状态，一般为与 Pod 所在节点的 kubelet 失去通信。<br><img src="/images/pasted-33.png" alt="upload successful"></li></ul><h6 id="容器探针"><a href="#容器探针" class="headerlink" title="容器探针"></a>容器探针</h6><ul><li>liveness probe：kubelet 通过使用此类探针确定应用程序是否还运行，如果探测结果失败，则 kubelet 会杀死容器，并且容器将受到重启策略的影响；不提供探针，则默认状态为 success。<br><img src="/images/pasted-34.png" alt="upload successful"></li></ul><h6 id="Pod-重启策略"><a href="#Pod-重启策略" class="headerlink" title="Pod 重启策略"></a>Pod 重启策略</h6><div class="note warning">            <p>PodSpec 中有一个 restartPolicy 字段，拥有三个值，Always、OnFailure、Never。默认为 Always。适用于 Pod 中的所有容器。restartPolicy 仅通过同一节点上的 kubelet 重新启动容器。失败的容器由 kubelet 以五分钟为上限的指数延迟（10s,20s,40s）重新启动</p>          </div><ul><li>readiness probe：kubelet 使用此类探针确定应用程序是否已经就绪可以接受流量进来。当 Pod 中的容器处于就绪状态的时候，kubelet 才会认为 Pod 处于就绪状态（一个 Pod 下可能存在多个容器）。否则，kubelet 会把未就绪的 Pod 从 Service 中移除，此时流量就不会被路由到未就绪的 Pod 上。<br><img src="/images/pasted-35.png" alt="upload successful"></li></ul><p>探针是由 kubelet 对容器执行的定期检查，调用由容器实现的 Handler。有三种类型处理程序：</p><ul><li>ExecAction：在容器内执行自定义命令，如果命令退出返回码为 0 ，则认为成功。</li><li>TCPSocketAction：对指定端口上的 IP 地址进行 TCP 检查。</li><li>HTTPGetAction：对指定的端口和路径上的容器 IP 地址执行 HTTP Get 请求。响应状态码 大于等于200且小于400，则认为成功。</li></ul><h6 id="liveness-exec-探针示例"><a href="#liveness-exec-探针示例" class="headerlink" title="liveness exec 探针示例"></a>liveness exec 探针示例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">demo:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox:1.28</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">30</span><span class="string">;</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">/tmp/healthy;</span> <span class="string">sleep</span> <span class="number">600</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h6 id="liveness-HTTP-Get-探针示例"><a href="#liveness-HTTP-Get-探针示例" class="headerlink" title="liveness HTTP Get 探针示例"></a>liveness HTTP Get 探针示例</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-http</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">demo:</span> <span class="string">liveness</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">815325223</span><span class="string">/liveness</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/server</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">httpHeaders:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">X-Custom-Header</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">Awesome</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><div class="note warning">            <ul><li>timeoutSeconds：探测超时时间，默认1秒，最小1秒。</li><li>successThreshold：探测失败后，最少连续探测成功多少次才被认定为成功。默认是 1，但是如果是liveness 则必须是 1。最小值是 1。</li><li>failureThreshold：探测成功后，最少连续探测失败多少次才被认定为失败。默认是 3，最小值是 1。</li></ul>          </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;Pod-phase&quot;&gt;&lt;a href=&quot;#Pod-phase&quot; class=&quot;headerlink&quot; title=&quot;Pod phase&quot;&gt;&lt;/a&gt;Pod phase&lt;/h6&gt;&lt;p&gt;Pod 的 status 字段是一个 Pod Status 对象，Pod Statu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubelet 状态更新机制</title>
    <link href="http://yoursite.com/2019/08/07/Kubelet-%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/08/07/Kubelet-状态更新机制/</id>
    <published>2019-08-07T14:46:24.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kubernetes-reliability.md" target="_blank" rel="noopener">kubernetes-reliability</a></p><p>当 Kubernetes 中 Node 节点出现状态异常时，节点上的 Pod 会被重新调度到其他节点上，由于和 Kubelet 的状态更新机制有关，当节点宕机后，Pod 并不会立即触发重新调度到其他节点。</p><ul><li>kubelet 自身会定期更新状态到 kube-apiserver，通过参数 –node-status-update-frequency 指定上报频率，默认为10s 上报一次。</li><li>kube-controller-manager 通过参数 –node-monitor-period 检查 kubelet 的状态，默认为5s。</li><li>当 node 被 kubernetes 判定为 notready 状态，通过 –node-monitor-grace-period 参数配置，默认为40s。</li><li>当 node 被 kubernetes 判定为 unhealthy 状态，通过 –node-startup-grace-period 参数配置，默认为1m。</li><li>kubernetes 开始删除原 node 上的 pod，通过 –pod-eviction-timeout 参数配置，默认为5m。</li></ul><div class="note info">            <p>kube-controller-manager 和 kubelet 都是异步工作的，在这过程中，可能会因为网络延迟、apiserver 的延迟、etcd 延迟、节点负载导致的延迟。所以，如果 –node-status-update-frequency 设置为5s，实际上，etcd 中的数据变化则会在 6～7s。</p>          </div><p>Kubelet 在更新状态失败时，会进行重试，默认为5次，通过配置参数 nodeStatusUpdateRetry。Kubelet 会在函数 tryUpdateNodeStatus 中尝试进行状态更新。Kubelet 使用了 golang 中的 http.Client()方法，但是没有至指定超时时间，所以，如果 apiserver 过载时，当建立 TCP 连接时可能会出现一些故障。因此，在 nodeStatusUpdateRetry * –node-status-update-frequency 时间后才会更新一次节点状态。同时，Kubernetes 的 controller manager 将尝试每–node-monitor-period 时间周期内检查 nodeStatusUpdateRetry 次。在 –node-monitor-grace-period 之后，会认为节点 unhealthy，然后会在 –pod-eviction-timeout 后删除 pod。kube-proxy 拥有一个 watch API，一旦 pod 被驱逐了，kube-proxy 将会通知更新节点的 iptables 规则，将 pod 从 service 的 endpoints 中移除，保证不会访问到来自故障节点的 pod。</p><p>对于这些参数的配置，需要根据不同的集群规模进行选择。</p><h6 id="社区默认配置"><a href="#社区默认配置" class="headerlink" title="社区默认配置"></a>社区默认配置</h6><table><thead><tr><th>参数</th><th>值  </th></tr></thead><tbody><tr><td>–node-status-update-frequency</td><td>10s</td></tr><tr><td>–node-monitor-period</td><td>5s</td></tr><tr><td>–node-monitor-grace-period</td><td>40s</td></tr><tr><td>–pod-eviction-timeout</td><td>5m</td></tr></tbody></table><h6 id="快速更新和快速响应"><a href="#快速更新和快速响应" class="headerlink" title="快速更新和快速响应"></a>快速更新和快速响应</h6><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>–node-status-update-frequency</td><td>4s</td></tr><tr><td>–node-monitor-period</td><td>2s</td></tr><tr><td>–node-monitor-grace-period</td><td>20s</td></tr><tr><td>–pod-eviction-timeout</td><td>30s</td></tr></tbody></table><p>在这种情况下，pod 将在50s 内逐出，因为该节点在20s 后将被视为 down，并且–pod-eviction-timeout 在30s 之后发生。 但是，这种情况会在 etcd 上产生开销，因为每个节点都会尝试每2秒更新一次状态。如果环境有1000个节点，那么每分钟将有15000个节点更新，这可能需要大型etcd容器甚至是etcd的专用节点。</p><div class="note info">            <p>如果我们计算尝试次数，则除法将给出5，但实际上每次尝试的 nodeStatusUpdateRetry 尝试将从3到5。 由于所有组件的延迟，尝试总次数将在15到25之间变化。</p>          </div><h6 id="中等更新和平均响应"><a href="#中等更新和平均响应" class="headerlink" title="中等更新和平均响应"></a>中等更新和平均响应</h6><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>–node-status-update-frequency</td><td>20s</td></tr><tr><td>–node-monitor-period</td><td>5s</td></tr><tr><td>–node-monitor-grace-period</td><td>2m</td></tr><tr><td>–pod-eviction-timeout</td><td>1m</td></tr></tbody></table><p>在这种情况下，Kubelet 将尝试每20秒更新一次状态。因此，在 controller manager 在节点的不健康状态之前，它将是6 * 5 = 30次尝试。1m后，它将驱逐所 pod。驱逐前的总时间为3m。这种情况适用于中等环境，因为1000个节点每分钟需要3000个etcd更新。</p><div class="note info">            <p>实际上，将有4到6个节点更新尝试。 尝试总次数从20到30不等。</p>          </div><h6 id="低更新和慢响应"><a href="#低更新和慢响应" class="headerlink" title="低更新和慢响应"></a>低更新和慢响应</h6><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>–node-status-update-frequency</td><td>1m</td></tr><tr><td>–node-monitor-period</td><td>5s</td></tr><tr><td>–node-monitor-grace-period</td><td>5m</td></tr><tr><td>–pod-eviction-timeout</td><td>1m</td></tr></tbody></table><p>在这种情况下，每个 kubelet 都会尝试每分钟更新一次状态。在不健康状态之前将有5 * 5 = 25次尝试。5m后，controller manager 将设置不健康状态。 这意味着 pod 在被标记为不健康后1m后将被驱逐。(总共花费6m）。</p><div class="note info">            <p>实际上，将有3到5次尝试。 尝试总次数从15到25不等。</p>          </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kubernetes-reliability.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernet
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 Kubernetes 上运行 Python 的最佳实践</title>
    <link href="http://yoursite.com/2019/07/25/%E5%9C%A8-Kubernetes-%E4%B8%8A%E8%BF%90%E8%A1%8C-Python-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/07/25/在-Kubernetes-上运行-Python-最佳实践/</id>
    <published>2019-07-25T06:03:24.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">python:3.7-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="string">RUN</span> <span class="string">mkdir</span> <span class="string">/app</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"><span class="string">ADD</span> <span class="string">.</span> <span class="string">/app/</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-i</span> <span class="string">https://pypi.tuna.tsinghua.edu.cn/simple</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="string">CMD</span> <span class="string">["python",</span> <span class="string">"/app/main.py"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><div class="note info">            <ul><li>从 Docker Hub 获取 3.7-alpine 官方 Python 镜像，在镜像中创建名为 app 的目录，将它设置为工作目录，将本地目录的文件复制到 app 文件夹中，运行  pip 安装程序依赖的包，监听5000端口，配置容器启动时的命令。</li></ul>          </div><h5 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f Dockerfile -t hello-python:latest .</span><br></pre></td></tr></table></figure><h5 id="在-Docker-上直接运行"><a href="#在-Docker-上直接运行" class="headerlink" title="在 Docker 上直接运行"></a>在 Docker 上直接运行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -p 5000:5000 hello-python:latest</span><br></pre></td></tr></table></figure><p>通过浏览器访问 <a href="http://IP:5000" target="_blank" rel="noopener">http://IP:5000</a></p><h5 id="在-Kubernetes-上运行"><a href="#在-Kubernetes-上运行" class="headerlink" title="在 Kubernetes 上运行"></a>在 Kubernetes 上运行</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-python-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-python</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">"TCP"</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6000</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-python</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-python</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-python</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hello-python:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Never</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建-Dockerfile&quot;&gt;&lt;a href=&quot;#创建-Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;创建 Dockerfile&quot;&gt;&lt;/a&gt;创建 Dockerfile&lt;/h5&gt;&lt;figure class=&quot;highlight yaml
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>EKS 与 EC2 Spot 最佳实践</title>
    <link href="http://yoursite.com/2019/07/17/EKS-%E4%B8%8E-EC2-Spot-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/07/17/EKS-与-EC2-Spot-最佳实践/</id>
    <published>2019-07-17T01:18:36.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间去参加了 KubeCon 2019，听了胖虎老师的演讲，非常棒，在这里分享一下，希望给大家一些启发。</p><h5 id="EC2-Spot"><a href="#EC2-Spot" class="headerlink" title="EC2 Spot"></a>EC2 Spot</h5><p>EC2 Spot 实例可以利用 AWS 云中未使用的 EC2 资源。与按需实例的价格相比，使用 Spot 实例最高可以享受 90%的折扣。可以将 Spot 实例用于各种无状态、容错或者灵活的应用程序，例如大数据、容器化工作负载、CI/CD、Web服务器、高性能计算 (HPC) 以及其他测试和开发工作负载。Spot 实例与 Auto Scaling、EMR、ECS、CloudFormation、Data Pipeline 和 AWS Batch 等 AWS 服务紧密集成，因此可以选择如何启动和维护 Spot 实例上运行的应用程序。</p><h5 id="EKS-结合-EC2-Spot"><a href="#EKS-结合-EC2-Spot" class="headerlink" title="EKS 结合 EC2 Spot"></a>EKS 结合 EC2 Spot</h5><p>由于 Kubernetes 维持副本期望状态，Spot 特别适合来创建一个高可用兼顾费用优化的 Kubernetes 集群。我们会利用 Auto Scaling Group<a href="https://docs.aws.amazon.com/zh_cn/autoscaling/ec2/userguide/asg-purchase-options.html" target="_blank" rel="noopener">多个实例类型与购买选项的新特性</a>，将一个数量的 on-demand 实例与 Spot 实例混合在 一个 Auto Scaling Group 当中，除了保证具有一定的基线数量（baseline）由 on-demand 支撑之外，整个集群的横向扩展则由 Spot 与指定比例的 on-demand 来进行扩展。</p><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5><p><img src="/images/pasted-25.png" alt="upload successful"></p><div class="note info">            <ul><li>使用 ASG 创建一个 node group，并且注册到 EKS 的 control plane。</li><li>这个 ASG 由若干个数量的 on-demand 与 spot 组成。</li><li>Spot 一旦面临关机事件，会触发一个关机事件处理机制（termination handing），提前对 Spot 实例进行 node draining，确保上面运行的 Pod 可以提前被重新调度（reschedule）到其他节点。</li></ul>          </div><h5 id="创建-EKS-集群"><a href="#创建-EKS-集群" class="headerlink" title="创建 EKS 集群"></a>创建 EKS 集群</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">eksctl.io/v1alpha5</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfig</span></span><br><span class="line"></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eksdemo</span></span><br><span class="line">    <span class="attr">region:</span> <span class="string">ap-northeast-1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nodeGroups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ng-1</span></span><br><span class="line">      <span class="attr">minSize:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">maxSize:</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">instancesDistribution:</span></span><br><span class="line">        <span class="attr">instanceTypes:</span> <span class="string">["t3.small",</span> <span class="string">"t3.medium"</span><span class="string">,</span> <span class="string">"t3.large"</span><span class="string">]</span> <span class="comment"># At least two instance types should be specified</span></span><br><span class="line">        <span class="attr">onDemandBaseCapacity:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">onDemandPercentageAboveBaseCapacity:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">spotInstancePools:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>通过以上配置清单利用 eksctl 就可以在 ap-northeast-1 region 创建一个名为 eksdemo 的 EKS 集群，同时建立起一个名为 ng-1的nodegroup ，当中由多种 instance types 组成，其中 OnDemand 基线(baseline)为 2，意味着保证会有两台 on-demand 实例，而其他的实例则由 ondemand+spot 组成，但由于我们定义了 onDemandPercentageAboveBaseCapacity 为 0, 意味着额外需要的两台实例(minSize-onDemandBaseCapacity)全部由 spot 来满足。关于 ASG 更多参数可以参考该 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html" target="_blank" rel="noopener">链接</a>，更多的 cluster YAML 配置示例可以参考 weaveworks 的 <a href="https://github.com/weaveworks/eksctl/tree/master/examples" target="_blank" rel="noopener">github</a></p><h5 id="使用-eks-refarch-模板创建"><a href="#使用-eks-refarch-模板创建" class="headerlink" title="使用 eks-refarch 模板创建"></a>使用 eks-refarch 模板创建</h5><p>除了使用 eksctl 之外，也可以透过 <a href="https://github.com/aws-samples/amazon-eks-refarch-cloudformation" target="_blank" rel="noopener">aws-samples/amazon-eks-refarch-cloudformation</a> 来创建这样的混合集群，amazon-eks-refarch-cloudformation 使用100%的 cloudformation 模版，并且提供丰富的特性。</p><h5 id="node-labels-taints-and-tolerations"><a href="#node-labels-taints-and-tolerations" class="headerlink" title="node labels, taints and tolerations"></a>node labels, taints and tolerations</h5><p>通过 eks-templates 模版创建的混合集群，会自动将 ondemand 与 spot 实例都打上不同的 node labels，同时也会对 Spot 打上相应的 taints。</p><h5 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h5><p>通过 kubectl get nodes –show-labels 列出所有节点，可以看到 ondemand 与 Spot 各自带上了不同的 lifecycle 标签。<br><img src="/images/pasted-27.png" alt="upload successful"><br>在 EC2 Console，查看 Auto Scaling Group，会看到相应的配置。<br><img src="/images/pasted-28.png" alt="upload successful"></p><h5 id="部署-eks-lambda-drainer"><a href="#部署-eks-lambda-drainer" class="headerlink" title="部署 eks-lambda-drainer"></a>部署 eks-lambda-drainer</h5><p>Spot 实例当面临资源回收，强迫被关机的时候，系统会提前两分钟收到通知，我们可以借由 CloudWatch Event 捕捉到这个通知信息出发一个外部调度的 Lambda function 对这个节点进行 node draining。eks-lambda-drainer 可以帮助我们部署一个完全 serverless 独立于 Kubernetes 集群之外的无服务器时间响应 handler，并且监听整个 VPC 内的 Spot实例关机信号，一旦提前两分钟获得关机信号就会对这个节点进行 kubectl drain 操作，确保节点上的Pod 能被及时重新调度到其他节点上运行。</p><p>关于 eks-lambda-drainer 的部署方式，可以参考这个 <a href="https://github.com/chankh/eks-lambda-drainer" target="_blank" rel="noopener">Github</a></p><h5 id="测试-Spot实例-关机事件处理"><a href="#测试-Spot实例-关机事件处理" class="headerlink" title="测试 Spot实例 关机事件处理"></a>测试 Spot实例 关机事件处理</h5><p>eks-lambda-drainer 部署完成，当 Spot 实例准备关机的时候，eks-lambda-drainer 会开始进行相应处理，从 Lambda Log 可以看到如下的信息，表示确实对 node 节点进行了 kubectl drain 的操作。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>EKS 结合 EC2 Spot 是一个非常好的组合，常见的部署模式是把重要的controller 或 agent 指定部署到 on demand 节点，而其他应用则部署到 Spot 实例，甚至也可以全部都部署到 Spot 实例。只要在 ASG 里面选择多种节点类型，并且同时选择至少三个 AZ，如此 ASG 就会尽可能维护所需要的节点数量保证一定的高可用性。</p><h5 id="公开案例"><a href="#公开案例" class="headerlink" title="公开案例"></a>公开案例</h5><p>知名在线旅游服务商 Skyscanner 在 This is My Architecture系列影片当中揭露了他们在 AWS上面构建 Kubernetes 集群，横跨全球多个区域，多个集群，尖峰时间支撑每秒 60-75K QPS，以及每个月8千万个月独立用户，全部100% 使用 EC2 Spot 实例构建 Kubernetes 集群。</p><p>SkyScanner: <a href="https://www.youtube.com/watch?v=99nNHsbwBpg" target="_blank" rel="noopener">Building Highly-Available, Multi-Region Kubernetes Clusters on 100% Amazon EC2 Spot</a><br><img src="/images/pasted-30.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间去参加了 KubeCon 2019，听了胖虎老师的演讲，非常棒，在这里分享一下，希望给大家一些启发。&lt;/p&gt;
&lt;h5 id=&quot;EC2-Spot&quot;&gt;&lt;a href=&quot;#EC2-Spot&quot; class=&quot;headerlink&quot; title=&quot;EC2 Spot&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IngressController 高可用方案</title>
    <link href="http://yoursite.com/2019/07/17/IngressController-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/07/17/IngressController-高可用方案/</id>
    <published>2019-07-17T00:27:13.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<p>流量从入口到 Ingress Controller Pod 存在如下几种方式：</p><ul><li>Type 为 LoadBalancer 的时候，通过 externalIPs。</li><li>Type 为 LoadBalancer 的时候，通过云厂商的 LB 来负载均衡，并且支持自动分配公网 IP。通过 LoadBalancer 暴露的每个服务都会获得一个公网 IP，缺点是需要额外收费，且自己在云上搭建的 Kubernetes 无法使用。</li><li>不创建 Service，Pod 直接用 HOSTPORT，与 hostNetwork 功能类似，如果代理的四层服务，如 mysql，需要修改 Pod 的 template 来滚动更新，让 Nginx Bind 的四层端口能映射到宿主机上。</li><li>Type 为 NodePort，流量通过它负载进来，但是不在 Ingress Controller Pod 所在的 Node 上，会从这个 Node 上的 kube-proxy 转发到 Ingress Controller 的 Pod 上。</li></ul><p>综上所述，不创建 Service 的效率最高，负载四层的时候也不用修改 Pod 的 template。在 hostNetwork 模式下，Pod 会继承宿主机的网络协议，继承宿主机的 DNS，导致 Service 的请求直接走宿主机上的公网 DNS 服务器，而不是集群内部的 DNS 服务器，需要将 Pod 的 dnsPolicy 设置为 ClusterFirstWithHostNet 即可解决。</p><p>高可用的部署方式一般有两种：</p><ul><li>DS + nodeSelector</li><li>Deploy（设置 repicas）+ nodeSelector + Pod 反亲和性</li></ul><div class="note info">            <ul><li>线下使用 VIP 飘在存活的 Ingress Controller Pod 的宿主机上，云上使用 SLB 代替 VIP，有条件直接上硬件负载均衡，例如 F5 等。</li><li>Nginx ingress 不创建 Service 的时候，会一直报 warning 告警日志，对机器是一直没必要的额外负载，可以随便创建一个同名 Service，不带 标签选择器和 ClusterIP 为 null 即可。</li><li>关于域名请求，如果部署在公司局域网，内部有 DNS Server 的话，域名解析到 Ingress Controller 的宿主机 IP，或者 VIP、LB 的 IP，否则需要修改每个人电脑的 /etc/hosts 文件。如果没有 DNS Server 的可以运行一个 external-dns，它的上游 DNS 是公网的 DNS 服务器，局域网内电脑的 DNS Server 指向它即可，云上的话把域名请求解析到对应的 IP 即可。</li></ul>          </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;流量从入口到 Ingress Controller Pod 存在如下几种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type 为 LoadBalancer 的时候，通过 externalIPs。&lt;/li&gt;
&lt;li&gt;Type 为 LoadBalancer 的时候，通过云厂商的 LB 来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Linux内快速查找文件中包含的关键字</title>
    <link href="http://yoursite.com/2019/06/12/%E5%9C%A8Linux%E5%86%85/"/>
    <id>http://yoursite.com/2019/06/12/在Linux内/</id>
    <published>2019-06-12T07:52:19.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找根目录下包含主机名的所有文件"><a href="#查找根目录下包含主机名的所有文件" class="headerlink" title="查找根目录下包含主机名的所有文件"></a>查找根目录下包含主机名的所有文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find / -<span class="built_in">type</span> f | xargs grep -i <span class="string">"hostname"</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查找根目录下包含主机名的所有文件&quot;&gt;&lt;a href=&quot;#查找根目录下包含主机名的所有文件&quot; class=&quot;headerlink&quot; title=&quot;查找根目录下包含主机名的所有文件&quot;&gt;&lt;/a&gt;查找根目录下包含主机名的所有文件&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈Traefik</title>
    <link href="http://yoursite.com/2019/06/12/%E6%B5%85%E8%B0%88Traefik/"/>
    <id>http://yoursite.com/2019/06/12/浅谈Traefik/</id>
    <published>2019-06-12T01:05:43.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>Ingress 是授权入站连接到达集群服务的规则集合。</p><ul><li>从外部流量调度到 NodePort 上的 Service</li><li>从 Service 调度到 Ingress Controller</li><li>Ingress Controller 根据 Ingress 中定义的虚拟主机或后端URL</li><li>根据虚拟主机名调度到后端的一组 Pod</li></ul><h1 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h1><p>Ingress Controller是一个统称，是一类工具的集合。</p><ul><li><a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener">Ingress Nginx</a>：Kubernetes 官方维护方案，魔改版的 Nginx</li><li><a href="https://github.com/containous/traefik" target="_blank" rel="noopener">Traefik</a>：开源 HTTP 方向代理与负载均衡，支持 Ingress</li><li><a href="https://konghq.com/blog/kubernetes-ingress-controller-for-kong/" target="_blank" rel="noopener">Ingress Kong</a>：开源 API gateway 解决方案所开发的 Kubernetes Ingress Controller</li><li><a href="https://clouddocs.f5.com/products/connectors/k8s-bigip-ctlr/v1.5/" target="_blank" rel="noopener">F5 BIG-IP Controller</a>：F5 所开发的 Ingress Controller</li></ul><h1 id="Ingress的引入"><a href="#Ingress的引入" class="headerlink" title="Ingress的引入"></a>Ingress的引入</h1><p>目前Kubernetes暴露服务的方式只有三种：LoadBalancer Service、ExternalName、NodePort Service，而 Cluster IP 更不能被集群外的主机所访问，Service 虽然解决了服务发现和负载均衡，但只支持4层负载均衡，并不支持7层。NodePort 不易于管理庞大的端口、Rolling update 效率低下，需要额外搭建额外的负载均衡，只建议用于测试；LoadBalancer 必须运行在支持Cloud Provider 之上，而且需要花费额外的费用购买弹性 IP。我们运行的大多数服务都是应用层 HTTP(S)，从长远角度考虑，想把集群内部的 Service 暴露到集群外，Ingress Controller 都是比较好的方案，它反向代理集群内的七层服务，从而通过 vhost 子域名那样路由到后端的服务。</p><h1 id="Traefik"><a href="#Traefik" class="headerlink" title="Traefik"></a>Traefik</h1><p>先贴一张 Traefik 官方图，api.domain.com 将流量路由到集群内的 API pod，backoffice.domain.com 流量路由到一组名为 backoffice 的 pod 上。试想一想，在传统的 Nginx 上要想额外再增加 admin 服务该如何处理？Nginx 可以通过虚拟主机域名区分不同的服务，而每个服务通过 upstream 进行定义不同的负载均衡池，再加上 location 进行负载均衡的反向代理，只需要修改 nginx.conf 即可实现，但是在 Kubernetes 中又该如何实现这种方式调度呢？Ingress 就是把以上动作抽象出来，变为一个 Ingress 对象，创建和更新 YAML 即可，然后 Ingress Controller 通过与 API Server 交互，动态的去感知集群中 Ingress 规则的变化来生成 Nginx 配置文件，最后 reload 生效更改后的配置。<br><img src="/images/pasted-23.png" alt="upload successful"></p><h1 id="Traefik部署详解"><a href="#Traefik部署详解" class="headerlink" title="Traefik部署详解"></a>Traefik部署详解</h1><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><p>Kubernetes 在1.6+中引入了基于角色的访问控制（RBAC），以允许对 Kubernetes 资源和 API 进行细粒度控制。</p><p>如果群集配置了 RBAC，则需要授权 Traefik 使用 Kubernetes API。有两种方法可以设置适当的权限：通过特定于命名空间的 RoleBindings 或单个全局 ClusterRoleBinding。</p><p>每个命名空间的 RoleBinding 可以限制授予权限，只有 Traefik 正在监视的名称空间才能使用，从而遵循最小权限原则。如果 Traefik 不应该监视所有名称空间，并且名称空间集不会动态更改，那么这是首选方法。否则，必须使用单个 ClusterRoleBinding。</p><p><a href="https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-rbac.yaml" target="_blank" rel="noopener">traefik-rbac.yaml</a><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure></p><h2 id="通过Deployment或DaemonSet部署"><a href="#通过Deployment或DaemonSet部署" class="headerlink" title="通过Deployment或DaemonSet部署"></a>通过Deployment或DaemonSet部署</h2><ul><li>当使用 Deployment 部署时，可伸缩性更好。因为当使用 DaemonSet 时，每个节点会有一个 traefik-ingress-controller，当然你可以通过标签去控制它在哪些节点上启用。</li><li>DaemonSet 可以使用 NET_BIND_SERVICE 功能运行，这将允许它绑定到每个主机上的端口80/443。这将允许绕过 kube-proxy，并减少流量跳跃。请注意，这违反了 Kubernetes 最佳实践指南，并提出了调度/扩展问题的可能性。尽管存在潜在问题，但这仍然是大多数入口控制器的选择，关于单点的问题，如何做 Ingress Controller 将再往后讨论。</li></ul><p><a href="https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-deployment.yaml" target="_blank" rel="noopener">traefik-deployment.yaml</a><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">traefik</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--api</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubernetes</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--logLevel=INFO</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure></p><div class="note info">            <ul><li>将公开两个允许访问入口和 Web 界面的 NodePort。</li></ul>          </div><p><a href="https://raw.githubusercontent.com/containous/traefik/v1.7/examples/k8s/traefik-ds.yaml" target="_blank" rel="noopener">traefik-ds.yaml</a><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">traefik</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">drop:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--api</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubernetes</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--logLevel=INFO</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">edgenode:</span> <span class="string">"true"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></p><div class="note info">            <ul><li>这将创建一个在主机上使用特权端口80/8080的守护进程。这可能不适用于所有提供程序，但说明了静态（非NodePort）hostPort绑定。仍然可以在群集内部使用 traefik-ingress-service 来访问 DaemonSet Pod。</li></ul>          </div><p>如果有多个边缘节点，使用 nodeSelector 选择边缘节点来调度 traefik-ingress-controller 运行在多个节点，在边缘节点前放置一个负载均衡器，如：nginx、keepalived，将所有边缘节点作为负载均衡器的后端。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes k8s-n1 edgenode=<span class="literal">true</span></span><br><span class="line">kubectl label nodes k8s-n2 edgenode=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>验证效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ds -n kube-system </span><br><span class="line">NAME                         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">traefik-ingress-controller   2         2         2       2            2           edgenode=<span class="literal">true</span>   13m</span><br></pre></td></tr></table></figure></p><div class="note info">            <p>Deployment 部署与 DaemonSet 部署之间的差异：</p><ul><li>前者具有更容易的向上和向下扩展性。它可以实现完整的 Pod 生命周期，并支持 Kubernetes 1.2 的滚动更新。运行部署至少需要一个 Pod。</li><li>后者会自动扩展到满足特定选择器的所有节点，并保证一次填充一个节点。 Kubernetes 1.7 也完全支持滚动更新，适用于 DaemonSets。</li></ul>          </div><h2 id="Ingress-对象"><a href="#Ingress-对象" class="headerlink" title="Ingress 对象"></a>Ingress 对象</h2><p>上面通过 NodePort 来访问 Traefik 的 Dashboard，如何通过 ingress 访问？首先需要创建一个 ingress 对象。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-web-ui</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">traefik.demo.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">traefik-ingress-service</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></p><p>最关键的是 rules 部分，这里为 Traefik 的 Dashboard 定义一个 ingress 对象，serviceName 对应的是上面创建的 traefik-ingress-service，为了避免端口更改，对应的 servicePort 则是 admin。</p><p>验证：</p><ul><li>如果无 DNS Server，可以修改本地计算机的 /etc/hosts 文件，添加 traefik.demo.com 对应的 Ingress Controller 所在的 Node IP，或者是 Ingress Controller 的 VIP。</li><li>在浏览器访问 <a href="http://traefik.demo.com，hostPort" target="_blank" rel="noopener">http://traefik.demo.com，hostPort</a> 保证了直接用域名访问，而不用增加端口号访问的问题。</li></ul><p><img src="/images/pasted-31.png" alt="upload successful"></p><h2 id="TLS-认证"><a href="#TLS-认证" class="headerlink" title="TLS 认证"></a>TLS 认证</h2><p>目前大部分场景都会使用 https 来访问我们的服务，可以使用自签名或者从正规机构购买的 CA 证书，保证任何人访问的时候，浏览器会显示受信任的证书，也就是 Chrome 的小绿盾。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -newkey rsa:2048 -nodes -keyout tls.key -x509 -days 365 -out tls.crt</span><br></pre></td></tr></table></figure></p><p>创建 secret 对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic traefik-cert --from-file=tls.crt --from-file=tls.key -n kube-system</span><br></pre></td></tr></table></figure></p><h2 id="配置-Traefik"><a href="#配置-Traefik" class="headerlink" title="配置 Traefik"></a>配置 Traefik</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">defaultEntryPoints</span> <span class="string">=</span> <span class="string">["http",</span> <span class="string">"https"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="string">[entryPoints]</span></span><br><span class="line">  <span class="string">[entryPoints.http]</span></span><br><span class="line">  <span class="string">address</span> <span class="string">=</span> <span class="string">":80"</span></span><br><span class="line">    <span class="string">[entryPoints.http.redirect]</span></span><br><span class="line">      <span class="string">entryPoint</span> <span class="string">=</span> <span class="string">"https"</span></span><br><span class="line">  <span class="string">[entryPoints.https]</span></span><br><span class="line">  <span class="string">address</span> <span class="string">=</span> <span class="string">":443"</span></span><br><span class="line">    <span class="string">[entryPoints.https.tls]</span></span><br><span class="line">      <span class="string">[[entryPoints.https.tls.certificates]]</span></span><br><span class="line">      <span class="string">CertFile</span> <span class="string">=</span> <span class="string">"/ssl/tls.crt"</span></span><br><span class="line">      <span class="string">KeyFile</span> <span class="string">=</span> <span class="string">"/ssl/tls.key"</span></span><br></pre></td></tr></table></figure><p>上面的配置文件中，配置了 http 和 https 两个入口，并且配置了 http 强制跳转到 https 服务，访问 https 服务，证书是必不可少的，CertFile 和 KeyFile 指定了两个文件，但是在 Traefik Pod 中并不存在这两个证书，可以通过 ConfigMap 将 traefik.toml 配置文件挂载到 Traefik Pod 中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create configmap traefik-conf --from-file=traefik.toml -n kube-system</span><br></pre></td></tr></table></figure></p><p>改造 Traefik Pod 配置清单<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ssl</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">traefik-cert</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">traefik-conf</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">traefik</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">traefik-ingress-lb</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">"/ssl"</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">"ssl"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">"/config"</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">"config"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">          <span class="attr">hostPort:</span> <span class="number">443</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">drop:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--configfile=/config/traefik.toml</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--api</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubernetes</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--logLevel=INFO</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">edgenode:</span> <span class="string">"true"</span></span><br></pre></td></tr></table></figure></p><p>与之前相比，增加了 443 端口，启动参数中指定了 traefik 的配置文件，并通过 volume 把相关的 secret 和 configmap 挂载进来。更新完 Traefik Pod 后，再次访问 traefik 的 dashboard 会跳转到 https 的地址，并会提示相关证书相关的报警信息，这是因为证书是自签发的，并不受浏览器新人，如果从正规机构购买的证书则不会出现报警信息，而是小绿盾。点击下面的高级，就可以强制跳转，这样就能正常访问 traefik 的 dashboard 了。<br><img src="/images/pasted-32.png" alt="upload successful"></p><h2 id="配置-ingress"><a href="#配置-ingress" class="headerlink" title="配置 ingress"></a>配置 ingress</h2><p>创建三个 websites 示例 (cheese-deployments.yaml)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">stilton</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">    <span class="attr">cheese:</span> <span class="string">stilton</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">      <span class="attr">task:</span> <span class="string">stilton</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">stilton</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v0.0.1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cheese</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">errm/cheese:stilton</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cheddar</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">    <span class="attr">cheese:</span> <span class="string">cheddar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">      <span class="attr">task:</span> <span class="string">cheddar</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">cheddar</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v0.0.1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cheese</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">errm/cheese:cheddar</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wensleydale</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">    <span class="attr">cheese:</span> <span class="string">wensleydale</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">      <span class="attr">task:</span> <span class="string">wensleydale</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">        <span class="attr">task:</span> <span class="string">wensleydale</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v0.0.1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cheese</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">errm/cheese:wensleydale</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>为每个 cheese pods 创建相关的 Service (cheese-services.yaml)<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">stilton</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">    <span class="attr">task:</span> <span class="string">stilton</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cheddar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">    <span class="attr">task:</span> <span class="string">cheddar</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wensleydale</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">traefik.backend.circuitbreaker:</span> <span class="string">"NetworkErrorRatio() &gt; 0.5"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">cheese</span></span><br><span class="line">    <span class="attr">task:</span> <span class="string">wensleydale</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ingress&quot;&gt;&lt;a href=&quot;#Ingress&quot; class=&quot;headerlink&quot; title=&quot;Ingress&quot;&gt;&lt;/a&gt;Ingress&lt;/h1&gt;&lt;p&gt;Ingress 是授权入站连接到达集群服务的规则集合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从外部流量调度到 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx编译安装</title>
    <link href="http://yoursite.com/2019/06/11/Nginx/"/>
    <id>http://yoursite.com/2019/06/11/Nginx/</id>
    <published>2019-06-11T09:07:59.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><p>这里以Centos为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake autoconf libtool make</span><br></pre></td></tr></table></figure><h1 id="安装相关依赖库"><a href="#安装相关依赖库" class="headerlink" title="安装相关依赖库"></a>安装相关依赖库</h1><p>pcre库为了rewrite，zlib库为了gzip压缩，将下面包全部解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget http://nginx.org/download/nginx-1.10.2.tar.gz</span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz </span><br><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2l.tar.gz</span><br></pre></td></tr></table></figure><h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/opt/nginx --user=www --group=www --with-openssl=../openssl-1.0.2l \</span><br><span class="line">--with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.11 --with-http_realip_module \</span><br><span class="line">--with-http_ssl_module --with-http_stub_status_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><div class="note success">            <ul><li>此处编译将openssl、pcre、zlib编译至nginx启动内核，从而不依赖系统openssl、pcre、zlib，加快nginx启动速度和方便移植到其他系统使用。</li></ul>          </div><h1 id="查看安装版本"><a href="#查看安装版本" class="headerlink" title="查看安装版本"></a>查看安装版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/nginx/sbin/nginx -V</span></span><br><span class="line">nginx version: nginx/1.10.2</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)</span><br><span class="line">built with OpenSSL 1.0.2l  25 May 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/opt/nginx --user=www --group=www </span><br><span class="line">--with-openssl=../openssl-1.0.2l --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.11 </span><br><span class="line">--with-http_realip_module --with-http_ssl_module --with-http_stub_status_module</span><br></pre></td></tr></table></figure><h1 id="NGINX-systemed-service-file"><a href="#NGINX-systemed-service-file" class="headerlink" title="NGINX systemed service file"></a>NGINX systemed service file</h1><p>路径：/lib/systemd/system/nginx.service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/opt/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/opt/nginx/sbin/nginx -t</span><br><span class="line">ExecStart=/opt/nginx/sbin/nginx</span><br><span class="line">ExecReload=/opt/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动NGINX<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now nginx.service</span><br></pre></td></tr></table></figure></p><div class="note warning">            <ul><li>nginx.conf配置内的pid指定位置必须和nginx.service文件内的路径保持一致。</li></ul>          </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装编译环境&quot;&gt;&lt;a href=&quot;#安装编译环境&quot; class=&quot;headerlink&quot; title=&quot;安装编译环境&quot;&gt;&lt;/a&gt;安装编译环境&lt;/h1&gt;&lt;p&gt;这里以Centos为例&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二进制安装Kubernetes</title>
    <link href="http://yoursite.com/2019/06/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E8%A3%85Kubernetes/"/>
    <id>http://yoursite.com/2019/06/10/二进制安装Kubernetes/</id>
    <published>2019-06-10T00:47:27.000Z</published>
    <updated>2021-07-20T07:44:15.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h1><h2 id="设置永久主机名"><a href="#设置永久主机名" class="headerlink" title="设置永久主机名"></a>设置永久主机名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname k8s-m1</span><br></pre></td></tr></table></figure><h2 id="设置主机解析"><a href="#设置主机解析" class="headerlink" title="设置主机解析"></a>设置主机解析</h2><p>如果不存在DNS解析，则每台主机需设置/etc/hosts文件，添加主机与IP的对应关系。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class="line">10.105.26.201 k8s-m1</span><br><span class="line">10.105.26.202 k8s-m2</span><br><span class="line">10.105.26.203 k8s-m3</span><br><span class="line">10.105.26.210 k8s-n1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h2 id="免密码登陆其他节点"><a href="#免密码登陆其他节点" class="headerlink" title="免密码登陆其他节点"></a>免密码登陆其他节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id root@k8s-m1</span><br><span class="line">ssh-copy-id root@k8s-m2</span><br><span class="line">ssh-copy-id root@k8s-m3</span><br><span class="line">ssh-copy-id root@k8s-n1</span><br></pre></td></tr></table></figure><h2 id="关闭防火墙与selinux"><a href="#关闭防火墙与selinux" class="headerlink" title="关闭防火墙与selinux"></a>关闭防火墙与selinux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> --now firewalld NetworkManager</span><br><span class="line">setenforce 0</span><br><span class="line">sed -ri <span class="string">'/^[^#]*SELINUX=/s#=.+$#=disabled#'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h2 id="关闭swap分区"><a href="#关闭swap分区" class="headerlink" title="关闭swap分区"></a>关闭swap分区</h2><p>如果开启了swap分区，会导致kubelet启动失败（可通过–fail-swap-on参数忽略swap开启）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br><span class="line">sed -ri <span class="string">'/^[^#]*swap/s@^@#@'</span> /etc/fstab</span><br></pre></td></tr></table></figure></p><h2 id="关闭dnsmasq"><a href="#关闭dnsmasq" class="headerlink" title="关闭dnsmasq"></a>关闭dnsmasq</h2><p>linux系统开启了dnsmasq（GUI环境），将DNS server设置为127.0.0.1，会导致docker容器无法解析域名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop dnsmasq</span><br><span class="line">systemctl <span class="built_in">disable</span> dnsmasq</span><br></pre></td></tr></table></figure></p><h2 id="优化内核参数"><a href="#优化内核参数" class="headerlink" title="优化内核参数"></a>优化内核参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line"><span class="comment"># https://github.com/moby/moby/issues/31208 </span></span><br><span class="line"><span class="comment"># ipvsadm -l --timout</span></span><br><span class="line"><span class="comment"># 修复ipvs模式下长连接timeout问题 小于900即可</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 600</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 10</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time = 120</span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line"><span class="comment"># 要求iptables不对bridge的数据进行处理</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 1</span><br><span class="line">net.netfilter.nf_conntrack_max = 2310720</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">fs.may_detach_mounts = 1</span><br><span class="line">fs.file-max = 52706963</span><br><span class="line">fs.nr_open = 52706963</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h2 id="设置系统时区"><a href="#设置系统时区" class="headerlink" title="设置系统时区"></a>设置系统时区</h2><p>调整系统TimeZone，将当前的UTC时间写入硬件时钟<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai</span><br><span class="line">timedatectl <span class="built_in">set</span>-local-rtc 0</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure></p><h2 id="关闭无关的服务"><a href="#关闭无关的服务" class="headerlink" title="关闭无关的服务"></a>关闭无关的服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop postfix &amp;&amp; systemctl <span class="built_in">disable</span> postfix</span><br></pre></td></tr></table></figure><h2 id="设置rsyslogd和systemd-journald"><a href="#设置rsyslogd和systemd-journald" class="headerlink" title="设置rsyslogd和systemd journald"></a>设置rsyslogd和systemd journald</h2><p>systemd的journald是Centos 7缺省的日志记录工具，它记录了所有系统、内核、Service Unit的日志。相比systemd，journald记录的日志有如下优势：1. 可以记录到内存或文件系统；(默认记录到内存，对应的位置为 /run/log/jounal)；2. 可以限制占用的磁盘空间、保证磁盘剩余空间；3. 可以限制日志文件大小、保存的时间；journald默认将日志转发给rsyslog，这会导致日志写了多份，/var/log/messages中包含了太多无关日志，不方便后续查看，同时也影响系统性能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/<span class="built_in">log</span>/journal <span class="comment"># 持久化保存日志的目录</span></span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF</span><br><span class="line">[Journal]</span><br><span class="line"><span class="comment"># 持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩历史日志</span></span><br><span class="line">Compress=yes</span><br><span class="line"></span><br><span class="line">SyncIntervalSec=5m</span><br><span class="line">RateLimitInterval=30s</span><br><span class="line">RateLimitBurst=1000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大占用空间 10G</span></span><br><span class="line">SystemMaxUse=10G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单日志文件最大 200M</span></span><br><span class="line">SystemMaxFileSize=200M</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br><span class="line">EOF</span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure></p><h2 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h2><p>Centos 7.x系统自带的3.10.x内核存在一些Bugs，导致Docker和Kubernetes不稳定，例如：1. 高版本的 docker(1.13 以后) 启用了3.10版本kernel实验支持的kernel memory account功能，当节点压力大如频繁启动和停止容器时会导致cgroup memory leak；2. 网络设备引用计数泄漏，会导致类似于报错：”kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”;</p><h3 id="自选内核安装"><a href="#自选内核安装" class="headerlink" title="自选内核安装"></a>自选内核安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> Kernel_Version=4.18.9-1</span><br><span class="line">wget  http://mirror.rc.usf.edu/compute_lock/elrepo/kernel/el7/x86_64/RPMS/kernel-ml&#123;,-devel&#125;-<span class="variable">$&#123;Kernel_Version&#125;</span>.el7.elrepo.x86_64.rpm</span><br><span class="line">yum localinstall -y kernel-ml*</span><br></pre></td></tr></table></figure><h3 id="最新内核安装"><a href="#最新内核安装" class="headerlink" title="最新内核安装"></a>最新内核安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line">yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"elrepo-kernel"</span> list available  --showduplicates | grep -Po <span class="string">'^kernel-ml.x86_64\s+\K\S+(?=.el7)'</span></span><br><span class="line">yum --disablerepo=<span class="string">"*"</span> --enablerepo=elrepo-kernel install -y kernel-ml&#123;,-devel&#125;</span><br></pre></td></tr></table></figure><h3 id="修改内核启动顺序"><a href="#修改内核启动顺序" class="headerlink" title="修改内核启动顺序"></a>修改内核启动顺序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default  0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg</span><br><span class="line">grubby --default-kernel</span><br></pre></td></tr></table></figure><h3 id="开启user-namespace-enable-1"><a href="#开启user-namespace-enable-1" class="headerlink" title="开启user_namespace.enable=1"></a>开启user_namespace.enable=1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grubby --args=<span class="string">"user_namespace.enable=1"</span> --update-kernel=<span class="string">"<span class="variable">$(grubby --default-kernel)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="重新加载内核"><a href="#重新加载内核" class="headerlink" title="重新加载内核"></a>重新加载内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="安装ipvs"><a href="#安装ipvs" class="headerlink" title="安装ipvs"></a>安装ipvs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ipvsadm ipset sysstat conntrack libseccomp vim wget curl jq -y</span><br></pre></td></tr></table></figure><h3 id="设置开机自动加载ipvs内核模块"><a href="#设置开机自动加载ipvs内核模块" class="headerlink" title="设置开机自动加载ipvs内核模块"></a>设置开机自动加载ipvs内核模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">:&gt; /etc/modules-load.d/ipvs.conf</span><br><span class="line">module=(</span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack</span><br><span class="line">br_netfilter</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">for</span> kernel_module <span class="keyword">in</span> <span class="variable">$&#123;module[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">    /sbin/modinfo -F filename <span class="variable">$kernel_module</span> |&amp; grep -qv ERROR &amp;&amp; <span class="built_in">echo</span> <span class="variable">$kernel_module</span> &gt;&gt; /etc/modules-load.d/ipvs.conf || :</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now systemd-modules-load.service</span><br></pre></td></tr></table></figure><h2 id="docker条件检查"><a href="#docker条件检查" class="headerlink" title="docker条件检查"></a>docker条件检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh &gt; check-config.sh</span><br><span class="line">bash check-config.sh</span><br></pre></td></tr></table></figure><h3 id="利用官方脚本安装docker"><a href="#利用官方脚本安装docker" class="headerlink" title="利用官方脚本安装docker"></a>利用官方脚本安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> VERSION=18.06</span><br><span class="line">curl -fsSL <span class="string">"https://get.docker.com/"</span> | bash -s -- --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="配置加速源和docker启动参数使用systemd"><a href="#配置加速源和docker启动参数使用systemd" class="headerlink" title="配置加速源和docker启动参数使用systemd"></a>配置加速源和docker启动参数使用systemd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker/</span><br><span class="line">cat&gt;/etc/docker/daemon.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://ib9xyhrv.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="设置docker开机启动，并设置docker命令补全"><a href="#设置docker开机启动，并设置docker命令补全" class="headerlink" title="设置docker开机启动，并设置docker命令补全"></a>设置docker开机启动，并设置docker命令补全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release bash-completion &amp;&amp; cp /usr/share/bash-completion/completions/docker /etc/bash_completion.d/</span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure><h2 id="创建相关目录并分发集群配置参数脚本"><a href="#创建相关目录并分发集群配置参数脚本" class="headerlink" title="创建相关目录并分发集群配置参数脚本"></a>创建相关目录并分发集群配置参数脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> environment.sh</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp environment.sh root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/bin/</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"chmod +x /opt/k8s/bin/*"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 EncryptionConfig 所需的加密 key</span></span><br><span class="line"><span class="built_in">export</span> ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群各机器 IP 数组</span></span><br><span class="line"><span class="built_in">export</span> NODE_IPS=(10.105.26.201 10.105.26.202 10.105.26.203)</span><br><span class="line"><span class="built_in">export</span> WORKER_IPS=(10.105.26.210)</span><br><span class="line"><span class="comment"># 集群各 IP 对应的主机名数组</span></span><br><span class="line"><span class="built_in">export</span> NODE_NAMES=(k8s-m1 k8s-m2 k8s-m3)</span><br><span class="line"><span class="built_in">export</span> WORKER_NAMES=(k8s-n1)</span><br><span class="line"><span class="comment"># etcd 集群服务地址列表</span></span><br><span class="line"><span class="built_in">export</span> ETCD_ENDPOINTS=<span class="string">"https://10.105.26.201:2379,https://10.105.26.202:2379,https://10.105.26.203:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 集群间通信的 IP 和端口</span></span><br><span class="line"><span class="built_in">export</span> ETCD_NODES=<span class="string">"k8s-m1=https://10.105.26.201:2380,k8s-m2=https://10.105.26.202:2380,k8s-m3=https://10.105.26.203:2380"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kube-apiserver 的反向代理(kube-nginx)地址端口</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://127.0.0.1:8443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点间互联网络接口名称</span></span><br><span class="line"><span class="built_in">export</span> IFACE=<span class="string">"eth0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 数据目录</span></span><br><span class="line"><span class="built_in">export</span> ETCD_DATA_DIR=<span class="string">"/data/k8s/etcd/data"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd WAL 目录，建议是 SSD 磁盘分区，或者和 ETCD_DATA_DIR 不同的磁盘分区</span></span><br><span class="line"><span class="built_in">export</span> ETCD_WAL_DIR=<span class="string">"/data/k8s/etcd/wal"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 各组件数据目录</span></span><br><span class="line"><span class="built_in">export</span> K8S_DIR=<span class="string">"/data/k8s/k8s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 数据目录</span></span><br><span class="line"><span class="comment"># export DOCKER_DIR="/data/k8s/docker"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 以下参数一般不需要修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TLS Bootstrapping 使用的 Token，可以使用命令 head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 生成</span></span><br><span class="line">BOOTSTRAP_TOKEN=<span class="string">"41f7e4ba8b7be874fcff18bf5cf41a7c"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最好使用 当前未用的网段 来定义服务网段和 Pod 网段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务网段，部署前路由不可达，部署后集群内路由可达(kube-proxy 保证)</span></span><br><span class="line">SERVICE_CIDR=<span class="string">"10.254.0.0/16"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pod 网段，建议 /16 段地址，部署前路由不可达，部署后集群内路由可达(flanneld 保证)</span></span><br><span class="line">CLUSTER_CIDR=<span class="string">"172.30.0.0/16"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端口范围 (NodePort Range)</span></span><br><span class="line"><span class="built_in">export</span> NODE_PORT_RANGE=<span class="string">"30000-32767"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flanneld 网络配置前缀</span></span><br><span class="line"><span class="built_in">export</span> FLANNEL_ETCD_PREFIX=<span class="string">"/kubernetes/network"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubernetes 服务 IP (一般是 SERVICE_CIDR 中第一个IP)</span></span><br><span class="line"><span class="built_in">export</span> CLUSTER_KUBERNETES_SVC_IP=<span class="string">"10.254.0.1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群 DNS 服务 IP (从 SERVICE_CIDR 中预分配)</span></span><br><span class="line"><span class="built_in">export</span> CLUSTER_DNS_SVC_IP=<span class="string">"10.254.0.2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群 DNS 域名（末尾不带点号）</span></span><br><span class="line"><span class="built_in">export</span> CLUSTER_DNS_DOMAIN=<span class="string">"cluster.local"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二进制目录 /opt/k8s/bin 加到 PATH 中</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/k8s/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h1 id="创建CA证书和秘钥"><a href="#创建CA证书和秘钥" class="headerlink" title="创建CA证书和秘钥"></a>创建CA证书和秘钥</h1><p>kubernetes集群各组件需要使用x509证书对通信进行加密和认证。CA (Certificate Authority) 是自签名的根证书，用来签名后续创建的其它证书。</p><h2 id="安装cfssl工具"><a href="#安装cfssl工具" class="headerlink" title="安装cfssl工具"></a>安装cfssl工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure><h2 id="创建根证书"><a href="#创建根证书" class="headerlink" title="创建根证书"></a>创建根证书</h2><p>CA证书是集群所有节点共享的，只需要创建一个CA证书，后续创建的所有证书都由它签名。</p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"signing"</span>: &#123;</span><br><span class="line">    <span class="attr">"default"</span>: &#123;</span><br><span class="line">      <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">      <span class="attr">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="attr">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>signing：表示该证书可用于签名其它证书，生成的ca.pem证书中CA=TRUE；</li><li>server auth：表示client可以用该该证书对server提供的证书进行验证；</li><li>client auth：表示server可以用该该证书对client提供的证书进行验证；</li></ul><h3 id="创建证书签名请求文件"><a href="#创建证书签名请求文件" class="headerlink" title="创建证书签名请求文件"></a>创建证书签名请求文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"IT"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>CN：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)，浏览器使用该字段验证网站是否合法；</li><li>O：Organization，kube-apiserver从证书中提取该字段作为请求用户所属的组 (Group)；</li><li>kube-apiserver将提取的User、Group作为RBAC授权的用户标识；</li></ul><h3 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br></pre></td></tr></table></figure><h3 id="分发证书到其他节点"><a href="#分发证书到其他节点" class="headerlink" title="分发证书到其他节点"></a>分发证书到其他节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p /etc/kubernetes/pki"</span></span><br><span class="line">    scp ca*.pem ca-config.json root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/pki</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="部署kubectl工具"><a href="#部署kubectl工具" class="headerlink" title="部署kubectl工具"></a>部署kubectl工具</h1><h2 id="下载kubectl二进制文件并分发到其他节点"><a href="#下载kubectl二进制文件并分发到其他节点" class="headerlink" title="下载kubectl二进制文件并分发到其他节点"></a>下载kubectl二进制文件并分发到其他节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.k8s.io/v1.14.2/kubernetes-client-linux-amd64.tar.gz</span><br><span class="line">tar -xzvf kubernetes-client-linux-amd64.tar.gz</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kubernetes/client/bin/kubectl root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/bin/</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"chmod +x /opt/k8s/bin/*"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建admin证书和私钥"><a href="#创建admin证书和私钥" class="headerlink" title="创建admin证书和私钥"></a>创建admin证书和私钥</h2><p>kubectl与apiserver https安全端口通信，apiserver对提供的证书进行认证和授权。kubectl作为集群的管理工具，需要被授予最高权限，这里创建具有最高权限的admin证书。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; admin-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"IT"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><ul><li>O为system:masters，kube-apiserver收到该证书后将请求的Group设置为 system:masters；</li><li>预定义的ClusterRoleBinding cluster-admin将Group system:masters与Role cluster-admin绑定，该Role授予所有 PI的权限；</li><li>该证书只会被kubectl当做client证书使用，所以hosts字段为空；</li></ul><h2 id="生成证书和私钥"><a href="#生成证书和私钥" class="headerlink" title="生成证书和私钥"></a>生成证书和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/opt/k8s/work/ca.pem \</span><br><span class="line">  -ca-key=/opt/k8s/work/ca-key.pem \</span><br><span class="line">  -config=/opt/k8s/work/ca-config.json \</span><br><span class="line">  -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br></pre></td></tr></table></figure><h2 id="创建kubeconfig文件"><a href="#创建kubeconfig文件" class="headerlink" title="创建kubeconfig文件"></a>创建kubeconfig文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/k8s/work/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=/opt/k8s/work/admin.pem \</span><br><span class="line">  --client-key=/opt/k8s/work/admin-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig</span><br></pre></td></tr></table></figure><ul><li>–certificate-authority：验证kube-apiserver证书的根证书；</li><li>–client-certificate、–client-key：刚生成的admin证书和私钥，连接 kube-apiserver时使用；</li><li>–embed-certs=true：将ca.pem和admin.pem证书内容嵌入到生成的kubectl.kubeconfig文件中(不加时，写入的是证书文件路径，后续拷贝 kubeconfig到其它机器时，还需要单独拷贝证书文件，不方便。)；</li></ul><h2 id="分发kubeconfig文件到其他节点"><a href="#分发kubeconfig文件到其他节点" class="headerlink" title="分发kubeconfig文件到其他节点"></a>分发kubeconfig文件到其他节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p ~/.kube"</span></span><br><span class="line">    scp kubectl.kubeconfig root@<span class="variable">$&#123;node_ip&#125;</span>:~/.kube/config</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="部署etcd集群"><a href="#部署etcd集群" class="headerlink" title="部署etcd集群"></a>部署etcd集群</h1><p>etcd是基于Raft的分布式key-value存储系统，由CoreOS开发，常用于服务发现、共享配置以及并发控制（如leader选举、分布式锁等）。kubernetes使用 etcd存储所有运行数据。</p><h2 id="下载etcd二进制文件并分发"><a href="#下载etcd二进制文件并分发" class="headerlink" title="下载etcd二进制文件并分发"></a>下载etcd二进制文件并分发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/coreos/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz</span><br><span class="line">tar -xvf etcd-v3.3.13-linux-amd64.tar.gz</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp etcd-v3.3.13-linux-amd64/etcd* root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/bin</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"chmod +x /opt/k8s/bin/*"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建etcd证书和私钥"><a href="#创建etcd证书和私钥" class="headerlink" title="创建etcd证书和私钥"></a>创建etcd证书和私钥</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; etcd-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"10.105.26.201"</span>,</span><br><span class="line">    <span class="string">"10.105.26.202"</span>,</span><br><span class="line">    <span class="string">"10.105.26.203"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"IT"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>在生产环境在证书内预留几个IP，已防止意外故障迁移时还需要重新生成证书</li></ul><h2 id="生成证书和私钥-1"><a href="#生成证书和私钥-1" class="headerlink" title="生成证书和私钥"></a>生成证书和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/opt/k8s/work/ca.pem \</span><br><span class="line">    -ca-key=/opt/k8s/work/ca-key.pem \</span><br><span class="line">    -config=/opt/k8s/work/ca-config.json \</span><br><span class="line">    -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br></pre></td></tr></table></figure><h2 id="分发证书和私钥到其他节点"><a href="#分发证书和私钥到其他节点" class="headerlink" title="分发证书和私钥到其他节点"></a>分发证书和私钥到其他节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p /etc/kubernetes/pki/etcd"</span></span><br><span class="line">    scp etcd*.pem root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/pki/etcd/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建etcd的systemd-unit模版文件"><a href="#创建etcd的systemd-unit模版文件" class="headerlink" title="创建etcd的systemd unit模版文件"></a>创建etcd的systemd unit模版文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; etcd.service.template &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span></span><br><span class="line">ExecStart=/opt/k8s/bin/etcd \\</span><br><span class="line">  --data-dir=<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span> \\</span><br><span class="line">  --wal-dir=<span class="variable">$&#123;ETCD_WAL_DIR&#125;</span> \\</span><br><span class="line">  --name=<span class="comment">##NODE_NAME## \\</span></span><br><span class="line">  --cert-file=/etc/kubernetes/pki/etcd/etcd.pem \\</span><br><span class="line">  --key-file=/etc/kubernetes/pki/etcd/etcd-key.pem \\</span><br><span class="line">  --trusted-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --peer-cert-file=/etc/kubernetes/pki/etcd/etcd.pem \\</span><br><span class="line">  --peer-key-file=/etc/kubernetes/pki/etcd/etcd-key.pem \\</span><br><span class="line">  --peer-trusted-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --peer-client-cert-auth \\</span><br><span class="line">  --client-cert-auth \\</span><br><span class="line">  --listen-peer-urls=https://<span class="comment">##NODE_IP##:2380 \\</span></span><br><span class="line">  --initial-advertise-peer-urls=https://<span class="comment">##NODE_IP##:2380 \\</span></span><br><span class="line">  --listen-client-urls=https://<span class="comment">##NODE_IP##:2379,http://127.0.0.1:2379 \\</span></span><br><span class="line">  --advertise-client-urls=https://<span class="comment">##NODE_IP##:2379 \\</span></span><br><span class="line">  --initial-cluster-token=etcd-cluster-0 \\</span><br><span class="line">  --initial-cluster=<span class="variable">$&#123;ETCD_NODES&#125;</span> \\</span><br><span class="line">  --initial-cluster-state=new \\</span><br><span class="line">  --auto-compaction-mode=periodic \\</span><br><span class="line">  --auto-compaction-retention=1 \\</span><br><span class="line">  --max-request-bytes=33554432 \\</span><br><span class="line">  --quota-backend-bytes=6442450944 \\</span><br><span class="line">  --heartbeat-interval=250 \\</span><br><span class="line">  --election-timeout=2000</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>WorkingDirectory、–data-dir：指定工作目录和数据目录为 ${ETCD_DATA_DIR}，需在启动服务前创建这个目录；</li><li>–wal-dir：指定wal目录，为了提高性能，一般使用SSD或者和–data-dir不同的磁盘；</li><li>–name：指定节点名称，当–initial-cluster-state值为new时，–name的参数值必须位于–initial-cluster列表中；</li><li>–cert-file、–key-file：etcd server与client通信时使用的证书和私钥；</li><li>–trusted-ca-file：签名client证书的CA证书，用于验证client证书；</li><li>–peer-cert-file、–peer-key-file：etcd与peer通信使用的证书和私钥；</li><li>–peer-trusted-ca-file：签名peer证书的CA证书，用于验证peer证书；</li></ul><h2 id="分发etcd-system-unit文件到其他节点"><a href="#分发etcd-system-unit文件到其他节点" class="headerlink" title="分发etcd system unit文件到其他节点"></a>分发etcd system unit文件到其他节点</h2><p>替换模板文件中的变量，为各节点创建systemd unit文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i &lt; 3; i++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    sed -e <span class="string">"s/##NODE_NAME##/<span class="variable">$&#123;NODE_NAMES[i]&#125;</span>/"</span> -e <span class="string">"s/##NODE_IP##/<span class="variable">$&#123;NODE_IPS[i]&#125;</span>/"</span> etcd.service.template &gt; etcd-<span class="variable">$&#123;NODE_IPS[i]&#125;</span>.service </span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>分发生成的systemd unit文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp etcd-<span class="variable">$&#123;node_ip&#125;</span>.service root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/systemd/system/etcd.service</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h2 id="启动etcd服务"><a href="#启动etcd服务" class="headerlink" title="启动etcd服务"></a>启动etcd服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p <span class="variable">$&#123;ETCD_DATA_DIR&#125;</span> <span class="variable">$&#123;ETCD_WAL_DIR&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl restart etcd "</span> &amp;</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>必须先创建etcd数据目录和工作目录</li><li>etcd进程首次启动时会等待其它节点的etcd加入集群，命令systemctl start etcd会卡住一段时间，为正常现象</li></ul><h2 id="验证服务状态"><a href="#验证服务状态" class="headerlink" title="验证服务状态"></a>验证服务状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ETCDCTL_API=3 /opt/k8s/bin/etcdctl \</span><br><span class="line">    --endpoints=https://<span class="variable">$&#123;node_ip&#125;</span>:2379 \</span><br><span class="line">    --cacert=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    --cert=/etc/kubernetes/pki/etcd/etcd.pem \</span><br><span class="line">    --key=/etc/kubernetes/pki/etcd/etcd-key.pem endpoint health</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>预期输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 10.105.26.201</span><br><span class="line">https://10.105.26.201:2379 is healthy: successfully committed proposal: took = 1.706544ms</span><br><span class="line">&gt;&gt;&gt; 10.105.26.202</span><br><span class="line">https://10.105.26.202:2379 is healthy: successfully committed proposal: took = 2.495669ms</span><br><span class="line">&gt;&gt;&gt; 10.105.26.203</span><br><span class="line">https://10.105.26.203:2379 is healthy: successfully committed proposal: took = 2.228788ms</span><br></pre></td></tr></table></figure><h2 id="查看当前的-leader"><a href="#查看当前的-leader" class="headerlink" title="查看当前的 leader"></a>查看当前的 leader</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 /opt/k8s/bin/etcdctl \</span><br><span class="line">  -w table --cacert=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --cert=/etc/kubernetes/pki/etcd/etcd.pem \</span><br><span class="line">  --key=/etc/kubernetes/pki/etcd/etcd-key.pem \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> endpoint status</span><br></pre></td></tr></table></figure><p>预期输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|          ENDPOINT          |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| https://10.105.26.201:2379 | 41d3e233e1ce5cff |  3.3.13 |   20 kB |      <span class="literal">true</span> |         2 |          8 |</span><br><span class="line">| https://10.105.26.202:2379 | 54033052a4cf5146 |  3.3.13 |   20 kB |     <span class="literal">false</span> |         2 |          8 |</span><br><span class="line">| https://10.105.26.203:2379 | 5b1caf2378628ff0 |  3.3.13 |   20 kB |     <span class="literal">false</span> |         2 |          8 |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><h1 id="部署flannel网络"><a href="#部署flannel网络" class="headerlink" title="部署flannel网络"></a>部署flannel网络</h1><p>kubernetes要求集群内各节点(包括master节点)能通过Pod网段互联互通。flannel使用 vxlan技术为各节点创建一个可以互通的Pod网络，使用的端口为 UDP8472。flanneld第一次启动时，从etcd获取配置的Pod网段信息，为本节点分配一个未使用的地址段，然后创建flannedl.1网络接口。flannel将分配给自己的Pod网段信息写入/run/flannel/docker文件，docker后续使用这个文件中的环境变量设置docker0网桥，从而从这个地址段为本节点的所有Pod容器分配 IP。</p><h2 id="下载flanneld二进制文件"><a href="#下载flanneld二进制文件" class="headerlink" title="下载flanneld二进制文件"></a>下载flanneld二进制文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/k8s/work/flannel</span><br><span class="line">wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span><br><span class="line">tar -xzvf flannel-v0.11.0-linux-amd64.tar.gz -C flannel</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp flannel/&#123;flanneld,mk-docker-opts.sh&#125; root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/bin/</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"chmod +x /opt/k8s/bin/*"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建flannel证书和私钥"><a href="#创建flannel证书和私钥" class="headerlink" title="创建flannel证书和私钥"></a>创建flannel证书和私钥</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; flanneld-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"flanneld"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"IT"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>该证书只会被kubectl当做client证书使用，所以hosts字段为空</li></ul><h2 id="生成证书和私钥-2"><a href="#生成证书和私钥-2" class="headerlink" title="生成证书和私钥"></a>生成证书和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/opt/k8s/work/ca.pem \</span><br><span class="line">  -ca-key=/opt/k8s/work/ca-key.pem \</span><br><span class="line">  -config=/opt/k8s/work/ca-config.json \</span><br><span class="line">  -profile=kubernetes flanneld-csr.json | cfssljson -bare flanneld</span><br></pre></td></tr></table></figure><h2 id="将生成的证书和私钥分发到master和worker"><a href="#将生成的证书和私钥分发到master和worker" class="headerlink" title="将生成的证书和私钥分发到master和worker"></a>将生成的证书和私钥分发到master和worker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p /etc/flanneld/cert"</span></span><br><span class="line">    scp flanneld*.pem root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/flanneld/cert</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="向etcd写入集群Pod网段信息"><a href="#向etcd写入集群Pod网段信息" class="headerlink" title="向etcd写入集群Pod网段信息"></a>向etcd写入集群Pod网段信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/opt/k8s/work/ca.pem \</span><br><span class="line">  --cert-file=/opt/k8s/work/flanneld.pem \</span><br><span class="line">  --key-file=/opt/k8s/work/flanneld-key.pem \</span><br><span class="line">  mk <span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span>/config <span class="string">'&#123;"Network":"'</span><span class="variable">$&#123;CLUSTER_CIDR&#125;</span><span class="string">'", "SubnetLen": 21, "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>flanneld当前版本(v0.11.0)不支持etcd v3，故使用etcd v2 API写入配置key和网段数据</li><li>写入的Pod网段${CLUSTER_CIDR}地址段（如 /16）必须小于SubnetLen，必须与kube-controller-manager的–cluster-cidr参数值一致</li></ul><h2 id="创建flanneld的systemd-unit文件"><a href="#创建flanneld的systemd-unit文件" class="headerlink" title="创建flanneld的systemd unit文件"></a>创建flanneld的systemd unit文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; flanneld.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/opt/k8s/bin/flanneld \\</span><br><span class="line">  -etcd-cafile=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  -etcd-certfile=/etc/flanneld/cert/flanneld.pem \\</span><br><span class="line">  -etcd-keyfile=/etc/flanneld/cert/flanneld-key.pem \\</span><br><span class="line">  -etcd-endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \\</span><br><span class="line">  -etcd-prefix=<span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span> \\</span><br><span class="line">  -iface=<span class="variable">$&#123;IFACE&#125;</span> \\</span><br><span class="line">  -ip-masq</span><br><span class="line">ExecStartPost=/opt/k8s/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>mk-docker-opts.sh脚本将分配给flanneld的Pod子网段信息写入/run/flannel/docker文件，后续docker启动时使用这个文件中的环境变量配置docker0 网桥</li><li>flanneld使用系统缺省路由所在的接口与其它节点通信，对于有多个网络接口（如内网和公网）的节点，可以用-iface参数指定通信接口</li><li>flanneld运行时需要root权限</li><li>-ip-masq: flanneld为访问Pod网络外的流量设置SNAT规则，同时将传递给 Docker的变量–ip-masq（/run/flannel/docker文件中）设置为false，这样 Docker将不再创建SNAT规则；Docker的–ip-masq为true时，创建的SNAT规则比较“暴力”：将所有本节点Pod发起的、访问非docker0接口的请求做SNAT，这样访问其他节点Pod的请求来源IP会被设置为flannel.1接口的IP，导致目的 Pod看不到真实的来源Pod IP。flanneld创建的SNAT规则比较温和，只对访问非 Pod网段的请求做SNAT</li></ul><h2 id="分发flanneld-systemd-unit文件到master和worker"><a href="#分发flanneld-systemd-unit文件到master和worker" class="headerlink" title="分发flanneld systemd unit文件到master和worker"></a>分发flanneld systemd unit文件到master和worker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp flanneld.service root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/systemd/system/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="启动flanneld服务"><a href="#启动flanneld服务" class="headerlink" title="启动flanneld服务"></a>启动flanneld服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl daemon-reload &amp;&amp; systemctl enable flanneld &amp;&amp; systemctl restart flanneld"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="检查分配给各flanneld的Pod网段信息"><a href="#检查分配给各flanneld的Pod网段信息" class="headerlink" title="检查分配给各flanneld的Pod网段信息"></a>检查分配给各flanneld的Pod网段信息</h2><p>查看集群 Pod 网段(/16)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/cert/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/cert/flanneld-key.pem \</span><br><span class="line">  get <span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span>/config</span><br></pre></td></tr></table></figure></p><p>预期输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"Network"</span>:<span class="string">"172.30.0.0/16"</span>, <span class="string">"SubnetLen"</span>: 21, <span class="string">"Backend"</span>: &#123;<span class="string">"Type"</span>: <span class="string">"vxlan"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>查看已分配的 Pod 子网段列表(/24)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/cert/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/cert/flanneld-key.pem \</span><br><span class="line">  ls <span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span>/subnets</span><br></pre></td></tr></table></figure></p><p>可能的输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/kubernetes/network/subnets/172.30.224.0-21</span><br><span class="line">/kubernetes/network/subnets/172.30.128.0-21</span><br><span class="line">/kubernetes/network/subnets/172.30.232.0-21</span><br></pre></td></tr></table></figure></p><p>查看某一Pod网段对应的节点IP和flannel接口地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/cert/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/cert/flanneld-key.pem \</span><br><span class="line">  get <span class="variable">$&#123;FLANNEL_ETCD_PREFIX&#125;</span>/subnets/172.30.232.0-21</span><br></pre></td></tr></table></figure></p><p>可能的输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"PublicIP"</span>:<span class="string">"10.105.26.203"</span>,<span class="string">"BackendType"</span>:<span class="string">"vxlan"</span>,<span class="string">"BackendData"</span>:&#123;<span class="string">"VtepMAC"</span>:<span class="string">"26:b4:0b:f2:56:ce"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p><ul><li>172.30.232.0/21被分配给节点k8s-m3（10.105.26.203）</li><li>VtepMAC为k8s-m3节点的flannel.1网卡MAC 地址</li></ul><h2 id="验证各节点能通过Pod网段互通"><a href="#验证各节点能通过Pod网段互通" class="headerlink" title="验证各节点能通过Pod网段互通"></a>验证各节点能通过Pod网段互通</h2><p>验证是否创建了flannel接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh <span class="variable">$&#123;node_ip&#125;</span> <span class="string">"/usr/sbin/ip addr show flannel.1|grep -w inet"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>预期输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 10.105.26.201</span><br><span class="line">    inet 172.30.224.0/32 scope global flannel.1</span><br><span class="line">&gt;&gt;&gt; 10.105.26.202</span><br><span class="line">    inet 172.30.128.0/32 scope global flannel.1</span><br><span class="line">&gt;&gt;&gt; 10.105.26.203</span><br><span class="line">    inet 172.30.232.0/32 scope global flannel.1</span><br></pre></td></tr></table></figure></p><p>在各节点上ping所有flannel接口IP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh <span class="variable">$&#123;node_ip&#125;</span> <span class="string">"ping -c 1 172.30.128.0"</span></span><br><span class="line">    ssh <span class="variable">$&#123;node_ip&#125;</span> <span class="string">"ping -c 1 172.30.224.0"</span></span><br><span class="line">    ssh <span class="variable">$&#123;node_ip&#125;</span> <span class="string">"ping -c 1 172.30.232.0"</span></span><br><span class="line">   <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h1 id="kube-apiserver高可用之nginx代理"><a href="#kube-apiserver高可用之nginx代理" class="headerlink" title="kube-apiserver高可用之nginx代理"></a>kube-apiserver高可用之nginx代理</h1><ul><li>控制节点的kube-controller-manager、kube-scheduler是多实例部署，所以只要有一个实例正常，就可以保证高可用</li><li>集群内的Pod使用K8S服务域名kubernetes访问kube-apiserver，kube-dns会自动解析出多个kube-apiserver节点的IP，所以也是高可用的</li><li>在每个节点起一个nginx进程，后端对接多个apiserver实例，nginx对它们做健康检查和负载均衡</li><li>kubelet、kube-proxy、controller-manager、scheduler通过本地的nginx（监听 127.0.0.1）访问kube-apiserver，从而实现kube-apiserver的高可用</li></ul><h2 id="下载和编译nginx"><a href="#下载和编译nginx" class="headerlink" title="下载和编译nginx"></a>下载和编译nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.15.3.tar.gz</span><br><span class="line">tar -xzvf nginx-1.15.3.tar.gz</span><br></pre></td></tr></table></figure><p>编译参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.15.3</span><br><span class="line">mkdir nginx-prefix</span><br><span class="line">./configure --with-stream --without-http --prefix=$(<span class="built_in">pwd</span>)/nginx-prefix --without-http_uwsgi_module --without-http_scgi_module --without-http_fastcgi_module</span><br></pre></td></tr></table></figure><ul><li>–with-stream：开启4层透明转发(TCP Proxy)功能</li><li>–without-xxx：关闭所有其他功能，这样生成的动态链接二进制程序依赖最小</li></ul><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + PCRE library is not used</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + zlib library is not used</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix"</span></span><br><span class="line">  nginx binary file: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/conf"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/conf/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/logs/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/logs/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/opt/k8s/work/nginx-1.15.3/nginx-prefix/logs/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></span><br></pre></td></tr></table></figure><p>编译和安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/k8s/work/nginx-1.15.3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>验证编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx-prefix/sbin/nginx -v</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.15.3</span><br></pre></td></tr></table></figure><p>查看 nginx 动态链接的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd ./nginx-prefix/sbin/nginx</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffd5bdd8000)</span><br><span class="line">libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fe523035000)</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fe522e19000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fe522a4c000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fe523239000)</span><br></pre></td></tr></table></figure><h2 id="安装和部署nginx"><a href="#安装和部署nginx" class="headerlink" title="安装和部署nginx"></a>安装和部署nginx</h2><p>创建目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/k8s/bin/environment.sh</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    mkdir -p /opt/k8s/kube-nginx/&#123;conf,logs,sbin&#125;</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>分发二进制程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp /opt/k8s/work/nginx-1.15.3/nginx-prefix/sbin/nginx  root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/kube-nginx/sbin/kube-nginx</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"chmod a+x /opt/k8s/kube-nginx/sbin/*"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p /opt/k8s/kube-nginx/&#123;conf,logs,sbin&#125;"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>配置nginx，开启4层透明转发功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-nginx.conf &lt;&lt;EOF</span><br><span class="line">worker_processes 1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">        server 10.105.26.201:6443        max_fails=3 fail_timeout=30s;</span><br><span class="line">        server 10.105.26.202:6443        max_fails=3 fail_timeout=30s;</span><br><span class="line">        server 10.105.26.203:6443        max_fails=3 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 127.0.0.1:8443;</span><br><span class="line">        proxy_connect_timeout 1s;</span><br><span class="line">        proxy_pass backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>分发配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/k8s/bin/environment.sh</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-nginx.conf  root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/kube-nginx/conf/kube-nginx.conf</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="配置systemd-unit文件，启动服务"><a href="#配置systemd-unit文件，启动服务" class="headerlink" title="配置systemd unit文件，启动服务"></a>配置systemd unit文件，启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-nginx.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=kube-apiserver nginx proxy</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStartPre=/opt/k8s/kube-nginx/sbin/kube-nginx -c /opt/k8s/kube-nginx/conf/kube-nginx.conf -p /opt/k8s/kube-nginx -t</span><br><span class="line">ExecStart=/opt/k8s/kube-nginx/sbin/kube-nginx -c /opt/k8s/kube-nginx/conf/kube-nginx.conf -p /opt/k8s/kube-nginx</span><br><span class="line">ExecReload=/opt/k8s/kube-nginx/sbin/kube-nginx -c /opt/k8s/kube-nginx/conf/kube-nginx.conf -p /opt/k8s/kube-nginx -s reload</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>分发systemd unit文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-nginx.service  root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/systemd/system/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>启动kube-nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl daemon-reload &amp;&amp; systemctl enable kube-nginx &amp;&amp; systemctl restart kube-nginx"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>检查kube-nginx服务运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl status kube-nginx |grep 'Active:'"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="部署master节点"><a href="#部署master节点" class="headerlink" title="部署master节点"></a>部署master节点</h1><p>kubernetes master节点运行如下组件</p><ul><li>kube-apiserver</li><li>kube-scheduler</li><li>kube-controller-manager</li><li>kube-nginx</li></ul><ol><li>kube-scheduler和kube-controller-manager会自动选举产生一个leader实例，其它实例处于阻塞模式，当leader挂了后，重新选举产生新的leader，从而保证服务可用性</li><li>kube-apiserver是无状态的，需要通过kube-nginx进行代理访问，从而保证服务可用性</li></ol><h2 id="下载nginx二进制文件并分发"><a href="#下载nginx二进制文件并分发" class="headerlink" title="下载nginx二进制文件并分发"></a>下载nginx二进制文件并分发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.k8s.io/v1.14.2/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">tar -xzvf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> kubernetes</span><br><span class="line">tar -xzvf  kubernetes-src.tar.gz</span><br><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kubernetes/server/bin/&#123;apiextensions-apiserver,cloud-controller-manager,kube-apiserver,kube-controller-manager,kube-proxy,kube-scheduler,kubeadm,kubectl,kubelet,mounter&#125; root@<span class="variable">$&#123;node_ip&#125;</span>:/opt/k8s/bin/</span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"chmod +x /opt/k8s/bin/*"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="部署高可用kube-apiserver集群"><a href="#部署高可用kube-apiserver集群" class="headerlink" title="部署高可用kube-apiserver集群"></a>部署高可用kube-apiserver集群</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kubernetes-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"10.105.26.201"</span>,</span><br><span class="line">    <span class="string">"10.105.26.202"</span>,</span><br><span class="line">    <span class="string">"10.105.26.203"</span>,</span><br><span class="line">    <span class="string">"10.254.0.1"</span>,</span><br><span class="line">    <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster.local."</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>hosts字段指定授权使用该证书的IP和域名列表，这里列出了master节点IP、kubernetes服务的IP和域名</li><li>kubernetes服务IP是apiserver自动创建的，一般是–service-cluster-ip-range参数指定的网段的第一个IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc kubernetes</span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   15m</span><br></pre></td></tr></table></figure><h2 id="生成证书和私钥-3"><a href="#生成证书和私钥-3" class="headerlink" title="生成证书和私钥"></a>生成证书和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/opt/k8s/work/ca.pem \</span><br><span class="line">  -ca-key=/opt/k8s/work/ca-key.pem \</span><br><span class="line">  -config=/opt/k8s/work/ca-config.json \</span><br><span class="line">  -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br></pre></td></tr></table></figure><p>将生成的证书和私钥文件拷贝到所有master节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p /etc/kubernetes/pki"</span></span><br><span class="line">    scp kubernetes*.pem root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/pki/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建加密配置文件"><a href="#创建加密配置文件" class="headerlink" title="创建加密配置文件"></a>创建加密配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">encryption-config.yaml</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">EncryptionConfig</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">providers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">aescbc:</span></span><br><span class="line">          <span class="attr">keys:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">key1</span></span><br><span class="line">              <span class="attr">secret:</span> <span class="string">$&#123;ENCRYPTION_KEY&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">identity:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>将加密配置文件拷贝到master节点的/etc/kubernetes目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp encryption-config.yaml root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建审计策略文件"><a href="#创建审计策略文件" class="headerlink" title="创建审计策略文件"></a>创建审计策略文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">audit-policy.yaml</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">audit.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Policy</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="comment"># The following requests were manually identified as high-volume and low-risk, so drop them.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">services/status</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:kube-proxy'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">    <span class="attr">userGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:nodes'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">namespaces:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kube-system</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:kube-controller-manager'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:kube-scheduler'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:serviceaccount:kube-system:endpoint-controller'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">namespaces/status</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">namespaces/finalize</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:apiserver'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log HPA fetching metrics.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:kube-controller-manager'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log these read-only URLs.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">nonResourceURLs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/healthz*'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/version</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'/swagger*'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log events requests.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Request</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pods/status</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kubelet</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:node-problem-detector'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:serviceaccount:kube-system:node-problem-detector'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Request</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">nodes/status</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pods/status</span></span><br><span class="line">    <span class="attr">userGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:nodes'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># deletecollection calls can be large, don't log responses for expected namespace deletions</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Request</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'system:serviceaccount:kube-system:namespace-controller'</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">deletecollection</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Secrets, ConfigMaps, and TokenReviews can contain sensitive &amp; binary data,</span></span><br><span class="line">  <span class="comment"># so only log at the Metadata level.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">authentication.k8s.io</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">tokenreviews</span></span><br><span class="line">  <span class="comment"># Get repsonses can be large; skip them.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Request</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">apiextensions.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">apiregistration.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">apps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">authentication.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">authorization.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">autoscaling</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">batch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">certificates.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">networking.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">policy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">scheduling.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">settings.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">storage.k8s.io</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default level for known APIs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">RequestResponse</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">""</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">apiextensions.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">apiregistration.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">apps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">authentication.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">authorization.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">autoscaling</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">batch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">certificates.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">metrics.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">networking.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">policy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">scheduling.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">settings.k8s.io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">storage.k8s.io</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment"># Default level for all other requests.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RequestReceived</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>分发审计策略文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp audit-policy.yaml root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/audit-policy.yaml</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建metrics-server使用的证书"><a href="#创建metrics-server使用的证书" class="headerlink" title="创建metrics-server使用的证书"></a>创建metrics-server使用的证书</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; proxy-client-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"aggregator"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>CN名称为aggregator，需要与metrics-server的–requestheader-allowed-names参数配置一致，否则访问会被metrics-server拒绝</li></ul><h2 id="生成证书和私钥-4"><a href="#生成证书和私钥-4" class="headerlink" title="生成证书和私钥"></a>生成证书和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  -ca-key=/etc/kubernetes/pki/ca-key.pem  \</span><br><span class="line">  -config=/etc/kubernetes/pki/ca-config.json  \</span><br><span class="line">  -profile=kubernetes proxy-client-csr.json | cfssljson -bare proxy-client</span><br></pre></td></tr></table></figure><p>将生成的证书和私钥文件拷贝到所有master节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp proxy-client*.pem root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/pki/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建kube-apiserver-systemd-unit模板文件"><a href="#创建kube-apiserver-systemd-unit模板文件" class="headerlink" title="创建kube-apiserver systemd unit模板文件"></a>创建kube-apiserver systemd unit模板文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-apiserver.service.template &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=<span class="variable">$&#123;K8S_DIR&#125;</span>/kube-apiserver</span><br><span class="line">ExecStart=/opt/k8s/bin/kube-apiserver \\</span><br><span class="line">  --advertise-address=<span class="comment">##NODE_IP## \\</span></span><br><span class="line">  --default-not-ready-toleration-seconds=360 \\</span><br><span class="line">  --default-unreachable-toleration-seconds=360 \\</span><br><span class="line">  --feature-gates=DynamicAuditing=<span class="literal">true</span> \\</span><br><span class="line">  --max-mutating-requests-inflight=2000 \\</span><br><span class="line">  --max-requests-inflight=4000 \\</span><br><span class="line">  --default-watch-cache-size=200 \\</span><br><span class="line">  --delete-collection-workers=2 \\</span><br><span class="line">  --encryption-provider-config=/etc/kubernetes/encryption-config.yaml \\</span><br><span class="line">  --etcd-cafile=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --etcd-certfile=/etc/kubernetes/pki/kubernetes.pem \\</span><br><span class="line">  --etcd-keyfile=/etc/kubernetes/pki/kubernetes-key.pem \\</span><br><span class="line">  --etcd-servers=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \\</span><br><span class="line">  --<span class="built_in">bind</span>-address=<span class="comment">##NODE_IP## \\</span></span><br><span class="line">  --secure-port=6443 \\</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/pki/kubernetes.pem \\</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/pki/kubernetes-key.pem \\</span><br><span class="line">  --insecure-port=0 \\</span><br><span class="line">  --audit-dynamic-configuration \\</span><br><span class="line">  --audit-log-maxage=15 \\</span><br><span class="line">  --audit-log-maxbackup=3 \\</span><br><span class="line">  --audit-log-maxsize=100 \\</span><br><span class="line">  --audit-log-mode=batch \\</span><br><span class="line">  --audit-log-truncate-enabled \\</span><br><span class="line">  --audit-log-batch-buffer-size=20000 \\</span><br><span class="line">  --audit-log-batch-max-size=2 \\</span><br><span class="line">  --audit-log-path=<span class="variable">$&#123;K8S_DIR&#125;</span>/kube-apiserver/audit.log \\</span><br><span class="line">  --audit-policy-file=/etc/kubernetes/audit-policy.yaml \\</span><br><span class="line">  --profiling \\</span><br><span class="line">  --anonymous-auth=<span class="literal">false</span> \\</span><br><span class="line">  --client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --<span class="built_in">enable</span>-bootstrap-token-auth \\</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \\</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-extra-headers-prefix=<span class="string">"X-Remote-Extra-"</span> \\</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \\</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \\</span><br><span class="line">  --service-account-key-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --authorization-mode=Node,RBAC \\</span><br><span class="line">  --runtime-config=api/all=<span class="literal">true</span> \\</span><br><span class="line">  --<span class="built_in">enable</span>-admission-plugins=NodeRestriction \\</span><br><span class="line">  --allow-privileged=<span class="literal">true</span> \\</span><br><span class="line">  --apiserver-count=3 \\</span><br><span class="line">  --event-ttl=168h \\</span><br><span class="line">  --kubelet-certificate-authority=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --kubelet-client-certificate=/etc/kubernetes/pki/kubernetes.pem \\</span><br><span class="line">  --kubelet-client-key=/etc/kubernetes/pki/kubernetes-key.pem \\</span><br><span class="line">  --kubelet-https=<span class="literal">true</span> \\</span><br><span class="line">  --kubelet-timeout=10s \\</span><br><span class="line">  --proxy-client-cert-file=/etc/kubernetes/pki/proxy-client.pem \\</span><br><span class="line">  --proxy-client-key-file=/etc/kubernetes/pki/proxy-client-key.pem \\</span><br><span class="line">  --service-cluster-ip-range=<span class="variable">$&#123;SERVICE_CIDR&#125;</span> \\</span><br><span class="line">  --service-node-port-range=<span class="variable">$&#123;NODE_PORT_RANGE&#125;</span> \\</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \\</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>–advertise-address：apiserver对外通告的IP（kubernetes服务后端节点 IP）；</li><li>–default-*-toleration-seconds：设置节点异常相关的阈值；</li><li>–max-*-requests-inflight：请求相关的最大阈值；</li><li>–etcd-*：访问etcd的证书和etcd服务器地址；</li><li>–experimental-encryption-provider-config：指定用于加密etcd中secret的配置；</li><li>–bind-address：https监听的IP，不能为127.0.0.1，否则外界不能访问它的安全端口6443；</li><li>–secret-port：https 监听端口；</li><li>–insecure-port=0：关闭监听 http 非安全端口(8080)；</li><li>–tls-*-file：指定 apiserver 使用的证书、私钥和 CA 文件；</li><li>–audit-*：配置审计策略和审计日志文件相关的参数；</li><li>–client-ca-file：验证 client (kue-controller-manager、kube-scheduler、kubelet、kube-proxy 等)请求所带的证书；</li><li>–enable-bootstrap-token-auth：启用 kubelet bootstrap 的 token 认证；</li><li>–requestheader-*：kube-apiserver 的 aggregator layer 相关的配置参数，proxy-client &amp; HPA 需要使用；</li><li>–requestheader-client-ca-file：用于签名 –proxy-client-cert-file 和 –proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；</li><li>如果 –requestheader-allowed-names 不为空，则–proxy-client-cert-file 证书的 CN 必须位于 allowed-names 中，默认为 aggregator;</li><li>–service-account-key-file：签名 ServiceAccount Token 的公钥文件，kube-controller-manager 的 –service-account-private-key-file 指定私钥文件，两者配对使用；</li><li>–runtime-config=api/all=true： 启用所有版本的 APIs，如 autoscaling/v2alpha1；</li><li>–authorization-mode=Node,RBAC、–anonymous-auth=false： 开启 Node 和 RBAC 授权模式，拒绝未授权的请求；</li><li>–enable-admission-plugins：启用一些默认关闭的 plugins；</li><li>–allow-privileged：运行执行 privileged 权限的容器；</li><li>–apiserver-count=3：指定 apiserver 实例的数量；</li><li>–event-ttl：指定 events 的保存时间；</li><li>–kubelet-<em>：如果指定，则使用 https 访问 kubelet APIs；需要为证书对应的用户(上面 kubernetes</em>.pem 证书的用户为 kubernetes) 用户定义 RBAC 规则，否则访问 kubelet API 时提示未授权；</li><li>–proxy-client-*：apiserver 访问 metrics-server 使用的证书；</li><li>–service-cluster-ip-range： 指定 Service Cluster IP 地址段；</li><li>–service-node-port-range： 指定 NodePort 的端口范围；</li></ul><div class="note success">            <ul><li>如果kube-apiserver机器没有运行kube-proxy，则还需要添加–enable-aggregator-routing=true参数；</li><li>requestheader-client-ca-file指定的CA证书，必须具有client auth and server auth</li></ul>          </div><h2 id="为各节点创建和分发kube-apiserver-systemd-unit文件"><a href="#为各节点创建和分发kube-apiserver-systemd-unit文件" class="headerlink" title="为各节点创建和分发kube-apiserver systemd unit文件"></a>为各节点创建和分发kube-apiserver systemd unit文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i &lt; 3; i++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    sed -e <span class="string">"s/##NODE_NAME##/<span class="variable">$&#123;NODE_NAMES[i]&#125;</span>/"</span> -e <span class="string">"s/##NODE_IP##/<span class="variable">$&#123;NODE_IPS[i]&#125;</span>/"</span> kube-apiserver.service.template &gt; kube-apiserver-<span class="variable">$&#123;NODE_IPS[i]&#125;</span>.service </span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>分发生成的systemd unit文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-apiserver-<span class="variable">$&#123;node_ip&#125;</span>.service root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/systemd/system/kube-apiserver.service</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="启动kube-apiserver服务"><a href="#启动kube-apiserver服务" class="headerlink" title="启动kube-apiserver服务"></a>启动kube-apiserver服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p <span class="variable">$&#123;K8S_DIR&#125;</span>/kube-apiserver"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl daemon-reload &amp;&amp; systemctl enable kube-apiserver &amp;&amp; systemctl restart kube-apiserver"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="检查kube-apiserver运行状态"><a href="#检查kube-apiserver运行状态" class="headerlink" title="检查kube-apiserver运行状态"></a>检查kube-apiserver运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl status kube-apiserver |grep 'Active:'"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="打印kube-apiserver写入etcd的数据"><a href="#打印kube-apiserver写入etcd的数据" class="headerlink" title="打印kube-apiserver写入etcd的数据"></a>打印kube-apiserver写入etcd的数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ETCDCTL_API=3 etcdctl \</span><br><span class="line">    --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">    --cacert=/opt/k8s/work/ca.pem \</span><br><span class="line">    --cert=/opt/k8s/work/etcd.pem \</span><br><span class="line">    --key=/opt/k8s/work/etcd-key.pem \</span><br><span class="line">    get /registry/ --prefix --keys-only</span><br></pre></td></tr></table></figure><h2 id="检查集群信息"><a href="#检查集群信息" class="headerlink" title="检查集群信息"></a>检查集群信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://127.0.0.1:8443</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br><span class="line"></span><br><span class="line">$ kubectl get all --all-namespaces</span><br><span class="line">NAMESPACE   NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">default     service/kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   12m</span><br><span class="line"></span><br><span class="line">$ kubectl get componentstatuses</span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line">etcd-0               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-2               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-1               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="检查kube-apiserver监听的端口"><a href="#检查kube-apiserver监听的端口" class="headerlink" title="检查kube-apiserver监听的端口"></a>检查kube-apiserver监听的端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpt|grep kube</span><br><span class="line">tcp        0      0 10.105.26.201:6443      0.0.0.0:*               LISTEN      26178/kube-apiserve</span><br></pre></td></tr></table></figure><ul><li>6443: 接收https请求的安全端口，对所有请求做认证和授权</li><li>由于关闭了非安全端口，故没有监听 8080</li></ul><h2 id="授予kube-apiserver访问kubelet-API的权限"><a href="#授予kube-apiserver访问kubelet-API的权限" class="headerlink" title="授予kube-apiserver访问kubelet API的权限"></a>授予kube-apiserver访问kubelet API的权限</h2><p>在执行kubectl exec、run、logs等命令时，apiserver会将请求转发到 kubelet的https端口。这里定义RBAC规则，授权apiserver使用的证书（kubernetes.pem）用户名（CN：kuberntes）访问kubelet API的权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding kube-apiserver:kubelet-apis \</span><br><span class="line">--clusterrole=system:kubelet-api-admin --user kubernetes</span><br></pre></td></tr></table></figure></p><h1 id="部署高可用kube-controller-manager集群"><a href="#部署高可用kube-controller-manager集群" class="headerlink" title="部署高可用kube-controller-manager集群"></a>部署高可用kube-controller-manager集群</h1><p>该集群包含3个节点，启动后将通过竞争选举机制产生一个leader节点，其它节点为阻塞状态。当leader节点不可用时，阻塞的节点将再次进行选举产生新的 leader节点，从而保证服务的可用性。</p><p>为保证通信安全，本文档先生成 x509 证书和私钥，kube-controller-manager在如下两种情况下使用该证书：</p><ul><li>与kube-apiserver的安全端口通信;</li><li>在安全端口(https，10252) 输出prometheus格式的metrics；</li></ul><h2 id="创建kube-controller-manager证书和私钥"><a href="#创建kube-controller-manager证书和私钥" class="headerlink" title="创建kube-controller-manager证书和私钥"></a>创建kube-controller-manager证书和私钥</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-controller-manager-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: &#123;</span><br><span class="line">        <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"10.105.26.201"</span>,</span><br><span class="line">      <span class="string">"10.105.26.202"</span>,</span><br><span class="line">      <span class="string">"10.105.26.203"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"names"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">        <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">        <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">        <span class="attr">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">        <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>hosts列表包含所有kube-controller-manager节点IP；</li><li>CN和O均为system:kube-controller-manager，kubernetes内置的 ClusterRoleBindings system:kube-controller-manager赋予kube-controller-manager工作所需的权限。</li></ul><p>生成证书和私钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/opt/k8s/work/ca.pem \</span><br><span class="line">  -ca-key=/opt/k8s/work/ca-key.pem \</span><br><span class="line">  -config=/opt/k8s/work/ca-config.json \</span><br><span class="line">  -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br></pre></td></tr></table></figure></p><p>将生成的证书和私钥分发到所有master节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-controller-manager*.pem root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/pki/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h2 id="创建和分发kubeconfig文件"><a href="#创建和分发kubeconfig文件" class="headerlink" title="创建和分发kubeconfig文件"></a>创建和分发kubeconfig文件</h2><p>kube-controller-manager使用kubeconfig文件访问apiserver，该文件提供了 apiserver地址、嵌入的CA证书和kube-controller-manager证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/k8s/work/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials system:kube-controller-manager \</span><br><span class="line">  --client-certificate=kube-controller-manager.pem \</span><br><span class="line">  --client-key=kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-context system:kube-controller-manager \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig</span><br></pre></td></tr></table></figure></p><p>分发kubeconfig到所有master节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-controller-manager.kubeconfig root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h2 id="创建kube-controller-manager-systemd-unit模版文件"><a href="#创建kube-controller-manager-systemd-unit模版文件" class="headerlink" title="创建kube-controller-manager systemd unit模版文件"></a>创建kube-controller-manager systemd unit模版文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-controller-manager.service.template &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=$&#123;K8S_DIR&#125;/kube-controller-manager</span><br><span class="line">ExecStart=/opt/k8s/bin/kube-controller-manager \\</span><br><span class="line">  --profiling \\</span><br><span class="line">  --cluster-name=kubernetes \\</span><br><span class="line">  --controllers=*,bootstrapsigner,tokencleaner \\</span><br><span class="line">  --kube-api-qps=1000 \\</span><br><span class="line">  --kube-api-burst=2000 \\</span><br><span class="line">  --leader-elect \\</span><br><span class="line">  --use-service-account-credentials\\</span><br><span class="line">  --concurrent-service-syncs=2 \\</span><br><span class="line">  --bind-address=##NODE_IP## \\</span><br><span class="line">  --secure-port=10252 \\</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/pki/kube-controller-manager.pem \\</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/pki/kube-controller-manager-key.pem \\</span><br><span class="line">  --port=0 \\</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\</span><br><span class="line">  --client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-allowed-names=&quot;&quot; \\</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-extra-headers-prefix=&quot;X-Remote-Extra-&quot; \\</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \\</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \\</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\</span><br><span class="line">  --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem \\</span><br><span class="line">  --experimental-cluster-signing-duration=8760h \\</span><br><span class="line">  --horizontal-pod-autoscaler-sync-period=10s \\</span><br><span class="line">  --concurrent-deployment-syncs=10 \\</span><br><span class="line">  --concurrent-gc-syncs=30 \\</span><br><span class="line">  --node-cidr-mask-size=24 \\</span><br><span class="line">  --service-cluster-ip-range=$&#123;SERVICE_CIDR&#125; \\</span><br><span class="line">  --pod-eviction-timeout=6m \\</span><br><span class="line">  --terminated-pod-gc-threshold=10000 \\</span><br><span class="line">  --root-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --service-account-private-key-file=/etc/kubernetes/pki/ca-key.pem \\</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \\</span><br><span class="line">  --logtostderr=true \\</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>–port=0：关闭监听非安全端口（http），同时 –address 参数无效，–bind-address 参数有效；</li><li>–secure-port=10252、–bind-address=0.0.0.0: 在所有网络接口监听 10252 端口的 https /metrics 请求；</li><li>–kubeconfig：指定 kubeconfig 文件路径，kube-controller-manager 使用它连接和验证 kube-apiserver；</li><li>–authentication-kubeconfig 和 –authorization-kubeconfig：kube-controller-manager 使用它连接 apiserver，对 client 的请求进行认证和授权。kube-controller-manager 不再使用 –tls-ca-file 对请求 https metrics 的 Client 证书进行校验。如果没有配置这两个 kubeconfig 参数，则 client 连接 kube-controller-manager https 端口的请求会被拒绝(提示权限不足)。</li><li>–cluster-signing-*-file：签名 TLS Bootstrap 创建的证书；</li><li>–experimental-cluster-signing-duration：指定 TLS Bootstrap 证书的有效期；</li><li>–root-ca-file：放置到容器 ServiceAccount 中的 CA 证书，用来对 kube-apiserver 的证书进行校验；</li><li>–service-account-private-key-file：签名 ServiceAccount 中 Token 的私钥文件，必须和 kube-apiserver 的 –service-account-key-file 指定的公钥文件配对使用；</li><li>–service-cluster-ip-range ：指定 Service Cluster IP 网段，必须和 kube-apiserver 中的同名参数一致；</li><li>–leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态；</li><li>–controllers=*,bootstrapsigner,tokencleaner：启用的控制器列表，tokencleaner 用于自动清理过期的 Bootstrap token；</li><li>–horizontal-pod-autoscaler-*：custom metrics 相关参数，支持 autoscaling/v2alpha1；</li><li>–tls-cert-file、–tls-private-key-file：使用 https 输出 metrics 时使用的 Server 证书和秘钥；</li><li>–use-service-account-credentials=true: kube-controller-manager 中各 controller 使用 serviceaccount 访问 kube-apiserver；</li></ul><h2 id="为各master节点创建和分发kube-controller-mananger-systemd-unit文件"><a href="#为各master节点创建和分发kube-controller-mananger-systemd-unit文件" class="headerlink" title="为各master节点创建和分发kube-controller-mananger systemd unit文件"></a>为各master节点创建和分发kube-controller-mananger systemd unit文件</h2><p>替换模板文件中的变量，为各节点创建systemd unit文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i &lt; 3; i++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    sed -e <span class="string">"s/##NODE_NAME##/<span class="variable">$&#123;NODE_NAMES[i]&#125;</span>/"</span> -e <span class="string">"s/##NODE_IP##/<span class="variable">$&#123;NODE_IPS[i]&#125;</span>/"</span> kube-controller-manager.service.template &gt; kube-controller-manager-<span class="variable">$&#123;NODE_IPS[i]&#125;</span>.service </span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>分发到所有 master 节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-controller-manager-<span class="variable">$&#123;node_ip&#125;</span>.service root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/systemd/system/kube-controller-manager.service</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h2 id="启动kube-controller-manager服务"><a href="#启动kube-controller-manager服务" class="headerlink" title="启动kube-controller-manager服务"></a>启动kube-controller-manager服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p <span class="variable">$&#123;K8S_DIR&#125;</span>/kube-controller-manager"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl daemon-reload &amp;&amp; systemctl enable kube-controller-manager &amp;&amp; systemctl restart kube-controller-manager"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="检查服务运行状态"><a href="#检查服务运行状态" class="headerlink" title="检查服务运行状态"></a>检查服务运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl status kube-controller-manager|grep Active"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="kube-controller-manager的权限"><a href="#kube-controller-manager的权限" class="headerlink" title="kube-controller-manager的权限"></a>kube-controller-manager的权限</h2><p>ClusteRole system:kube-controller-manager的权限很小，只能创建 secret、serviceaccount等资源对象，各controller的权限分散到 ClusterRole system:controller:XXX 中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kube-controller-manager</span></span><br><span class="line">Name:         system:kube-controller-manager</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                                  Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                                  -----------------  --------------  -----</span><br><span class="line">  secrets                                    []                 []              [create delete get update]</span><br><span class="line">  endpoints                                  []                 []              [create get update]</span><br><span class="line">  serviceaccounts                            []                 []              [create get update]</span><br><span class="line">  events                                     []                 []              [create patch update]</span><br><span class="line">  tokenreviews.authentication.k8s.io         []                 []              [create]</span><br><span class="line">  subjectaccessreviews.authorization.k8s.io  []                 []              [create]</span><br><span class="line">  configmaps                                 []                 []              [get]</span><br><span class="line">  namespaces                                 []                 []              [get]</span><br><span class="line">  *.*                                        []                 []              [list watch]</span><br></pre></td></tr></table></figure></p><p>需要在kube-controller-manager的启动参数中添加–use-service-account-credentials=true参数，这样main controller会为各controller创建对应的 ServiceAccount XXX-controller。内置的ClusterRoleBinding system:controller:XXX将赋予各XXX-controller ServiceAccount对应的 ClusterRole system:controller:XXX 权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get clusterrole|grep controller</span></span><br><span class="line">system:controller:attachdetach-controller                              74m</span><br><span class="line">system:controller:certificate-controller                               74m</span><br><span class="line">system:controller:clusterrole-aggregation-controller                   74m</span><br><span class="line">system:controller:cronjob-controller                                   74m</span><br><span class="line">system:controller:daemon-set-controller                                74m</span><br><span class="line">system:controller:deployment-controller                                74m</span><br><span class="line">system:controller:disruption-controller                                74m</span><br><span class="line">system:controller:endpoint-controller                                  74m</span><br><span class="line">system:controller:expand-controller                                    74m</span><br><span class="line">system:controller:generic-garbage-collector                            74m</span><br><span class="line">system:controller:horizontal-pod-autoscaler                            74m</span><br><span class="line">system:controller:job-controller                                       74m</span><br><span class="line">system:controller:namespace-controller                                 74m</span><br><span class="line">system:controller:node-controller                                      74m</span><br><span class="line">system:controller:persistent-volume-binder                             74m</span><br><span class="line">system:controller:pod-garbage-collector                                74m</span><br><span class="line">system:controller:pv-protection-controller                             74m</span><br><span class="line">system:controller:pvc-protection-controller                            74m</span><br><span class="line">system:controller:replicaset-controller                                74m</span><br><span class="line">system:controller:replication-controller                               74m</span><br><span class="line">system:controller:resourcequota-controller                             74m</span><br><span class="line">system:controller:route-controller                                     74m</span><br><span class="line">system:controller:service-account-controller                           74m</span><br><span class="line">system:controller:service-controller                                   74m</span><br><span class="line">system:controller:statefulset-controller                               74m</span><br><span class="line">system:controller:ttl-controller                                       74m</span><br><span class="line">system:kube-controller-manager                                         74m</span><br></pre></td></tr></table></figure></p><p>以deployment controller为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:controller:deployment-controller</span></span><br><span class="line">Name:         system:controller:deployment-controller</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                          Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                          -----------------  --------------  -----</span><br><span class="line">  replicasets.apps                   []                 []              [create delete get list patch update watch]</span><br><span class="line">  replicasets.extensions             []                 []              [create delete get list patch update watch]</span><br><span class="line">  events                             []                 []              [create patch update]</span><br><span class="line">  pods                               []                 []              [get list update watch]</span><br><span class="line">  deployments.apps                   []                 []              [get list update watch]</span><br><span class="line">  deployments.extensions             []                 []              [get list update watch]</span><br><span class="line">  deployments.apps/finalizers        []                 []              [update]</span><br><span class="line">  deployments.apps/status            []                 []              [update]</span><br><span class="line">  deployments.extensions/finalizers  []                 []              [update]</span><br><span class="line">  deployments.extensions/status      []                 []              [update]</span><br></pre></td></tr></table></figure></p><h2 id="查看当前的-leader-1"><a href="#查看当前的-leader-1" class="headerlink" title="查看当前的 leader"></a>查看当前的 leader</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    control-plane.alpha.kubernetes.io/leader: <span class="string">'&#123;"holderIdentity":"kube-m1_b95d689d-8b43-11e9-8cf3-3e6b5fecb6ef","leaseDurationSeconds":15,"acquireTime":"2019-06-10T05:51:00Z","renewTime":"2019-06-10T06:12:28Z","leaderTransitions":0&#125;'</span></span><br><span class="line">  creationTimestamp: <span class="string">"2019-06-10T05:51:00Z"</span></span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"2262"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager</span><br><span class="line">  uid: b95fd6a1-8b43-11e9-b331-3e6b5fecb6ef</span><br></pre></td></tr></table></figure><h1 id="部署高可用kube-scheduler集群"><a href="#部署高可用kube-scheduler集群" class="headerlink" title="部署高可用kube-scheduler集群"></a>部署高可用kube-scheduler集群</h1><p>该集群包含3个节点，启动后将通过竞争选举机制产生一个leader节点，其它节点为阻塞状态。当leader节点不可用后，剩余节点将再次进行选举产生新的 leader节点，从而保证服务的可用性。</p><p>为保证通信安全，本文档先生成x509证书和私钥，kube-scheduler在如下两种情况下使用该证书：</p><ul><li>与kube-apiserver的安全端口通信;</li><li>在安全端口(https，10251) 输出prometheus格式的metrics；</li></ul><h2 id="创建kube-scheduler证书和私钥"><a href="#创建kube-scheduler证书和私钥" class="headerlink" title="创建kube-scheduler证书和私钥"></a>创建kube-scheduler证书和私钥</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-scheduler-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">    <span class="attr">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"10.105.26.201"</span>,</span><br><span class="line">      <span class="string">"10.105.26.202"</span>,</span><br><span class="line">      <span class="string">"10.105.26.203"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"key"</span>: &#123;</span><br><span class="line">        <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"names"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">        <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">        <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">        <span class="attr">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">        <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>hosts列表包含所有kube-scheduler节点IP；</li><li>CN和O均为system:kube-scheduler，kubernetes内置的ClusterRoleBindings system:kube-scheduler将赋予kube-scheduler工作所需的权限；</li></ul><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=/opt/k8s/work/ca.pem \</span><br><span class="line">  -ca-key=/opt/k8s/work/ca-key.pem \</span><br><span class="line">  -config=/opt/k8s/work/ca-config.json \</span><br><span class="line">  -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br></pre></td></tr></table></figure><p>将生成的证书和私钥分发到所有master节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-scheduler*.pem root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/pki/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建和分发kubeconfig文件-1"><a href="#创建和分发kubeconfig文件-1" class="headerlink" title="创建和分发kubeconfig文件"></a>创建和分发kubeconfig文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/opt/k8s/work/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials system:kube-scheduler \</span><br><span class="line">  --client-certificate=kube-scheduler.pem \</span><br><span class="line">  --client-key=kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config <span class="built_in">set</span>-context system:kube-scheduler \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig</span><br></pre></td></tr></table></figure><p>分发kubeconfig到所有master节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-scheduler.kubeconfig root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建kube-scheduler配置文件"><a href="#创建kube-scheduler配置文件" class="headerlink" title="创建kube-scheduler配置文件"></a>创建kube-scheduler配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-scheduler.service.template &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=<span class="variable">$&#123;K8S_DIR&#125;</span>/kube-scheduler</span><br><span class="line">ExecStart=/opt/k8s/bin/kube-scheduler \\</span><br><span class="line">  --config=/etc/kubernetes/kube-scheduler.yaml \\</span><br><span class="line">  --<span class="built_in">bind</span>-address=<span class="comment">##NODE_IP## \\</span></span><br><span class="line">  --secure-port=10259 \\</span><br><span class="line">  --port=0 \\</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/pki/kube-scheduler.pem \\</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/pki/kube-scheduler-key.pem \\</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\</span><br><span class="line">  --client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \\</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-extra-headers-prefix=<span class="string">"X-Remote-Extra-"</span> \\</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \\</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \\</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \\</span><br><span class="line">  --v=2</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>–kubeconfig：指定kubeconfig文件路径，kube-scheduler使用它连接和验证kube-apiserver；</li><li>–leader-elect=true：集群运行模式，启用选举功能；被选为leader的节点负责处理工作，其它节点为阻塞状态；</li></ul><p>替换模版文件中的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i &lt; 3; i++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    sed -e <span class="string">"s/##NODE_NAME##/<span class="variable">$&#123;NODE_NAMES[i]&#125;</span>/"</span> -e <span class="string">"s/##NODE_IP##/<span class="variable">$&#123;NODE_IPS[i]&#125;</span>/"</span> kube-scheduler.yaml.template &gt; kube-scheduler-<span class="variable">$&#123;NODE_IPS[i]&#125;</span>.yaml</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>分发kube-scheduler配置文件到所有master节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-scheduler-<span class="variable">$&#123;node_ip&#125;</span>.yaml root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/kubernetes/kube-scheduler.yaml</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="创建kube-scheduler-systemd-unit模板文件"><a href="#创建kube-scheduler-systemd-unit模板文件" class="headerlink" title="创建kube-scheduler systemd unit模板文件"></a>创建kube-scheduler systemd unit模板文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; kube-scheduler.service.template &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=<span class="variable">$&#123;K8S_DIR&#125;</span>/kube-scheduler</span><br><span class="line">ExecStart=/opt/k8s/bin/kube-scheduler \\</span><br><span class="line">  --config=/etc/kubernetes/kube-scheduler.yaml \\</span><br><span class="line">  --<span class="built_in">bind</span>-address=<span class="comment">##NODE_IP## \\</span></span><br><span class="line">  --secure-port=10259 \\</span><br><span class="line">  --port=0 \\</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/pki/kube-scheduler.pem \\</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/pki/kube-scheduler-key.pem \\</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\</span><br><span class="line">  --client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \\</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/pki/ca.pem \\</span><br><span class="line">  --requestheader-extra-headers-prefix=<span class="string">"X-Remote-Extra-"</span> \\</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \\</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \\</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \\</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \\</span><br><span class="line">  --v=2</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="为各节点创建和分发kube-scheduler-systemd-unit文件"><a href="#为各节点创建和分发kube-scheduler-systemd-unit文件" class="headerlink" title="为各节点创建和分发kube-scheduler systemd unit文件"></a>为各节点创建和分发kube-scheduler systemd unit文件</h2><p>替换模板文件中的变量，为各节点创建 systemd unit 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i &lt; 3; i++ ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    sed -e <span class="string">"s/##NODE_NAME##/<span class="variable">$&#123;NODE_NAMES[i]&#125;</span>/"</span> -e <span class="string">"s/##NODE_IP##/<span class="variable">$&#123;NODE_IPS[i]&#125;</span>/"</span> kube-scheduler.service.template &gt; kube-scheduler-<span class="variable">$&#123;NODE_IPS[i]&#125;</span>.service </span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>分发systemd unit文件到所有master节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    scp kube-scheduler-<span class="variable">$&#123;node_ip&#125;</span>.service root@<span class="variable">$&#123;node_ip&#125;</span>:/etc/systemd/system/kube-scheduler.service</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h2 id="启动kube-scheduler服务"><a href="#启动kube-scheduler服务" class="headerlink" title="启动kube-scheduler服务"></a>启动kube-scheduler服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"mkdir -p <span class="variable">$&#123;K8S_DIR&#125;</span>/kube-scheduler"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl daemon-reload &amp;&amp; systemctl enable kube-scheduler &amp;&amp; systemctl restart kube-scheduler"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="检查服务运行状态-1"><a href="#检查服务运行状态-1" class="headerlink" title="检查服务运行状态"></a>检查服务运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node_ip <span class="keyword">in</span> <span class="variable">$&#123;NODE_IPS[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_ip&#125;</span>"</span></span><br><span class="line">    ssh root@<span class="variable">$&#123;node_ip&#125;</span> <span class="string">"systemctl status kube-scheduler|grep Active"</span></span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="查看当前的-leader-2"><a href="#查看当前的-leader-2" class="headerlink" title="查看当前的 leader"></a>查看当前的 leader</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl get endpoints kube-scheduler --namespace=kube-system  -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    control-plane.alpha.kubernetes.io/leader: <span class="string">'&#123;"holderIdentity":"kube-m1_d5bb5bf8-8b4a-11e9-acfe-3e6b5fecb6ef","leaseDurationSeconds":15,"acquireTime":"2019-06-10T06:41:55Z","renewTime":"2019-06-10T07:41:36Z","leaderTransitions":0&#125;'</span></span><br><span class="line">  creationTimestamp: <span class="string">"2019-06-10T06:41:55Z"</span></span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"8290"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler</span><br><span class="line">  uid: d6560c75-8b4a-11e9-b331-3e6b5fecb6ef</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统初始化&quot;&gt;&lt;a href=&quot;#系统初始化&quot; class=&quot;headerlink&quot; title=&quot;系统初始化&quot;&gt;&lt;/a&gt;系统初始化&lt;/h1&gt;&lt;h2 id=&quot;设置永久主机名&quot;&gt;&lt;a href=&quot;#设置永久主机名&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes证书说明</title>
    <link href="http://yoursite.com/2019/06/08/Kubernetes%E8%AF%81%E4%B9%A6%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2019/06/08/Kubernetes证书说明/</id>
    <published>2019-06-08T15:30:00.000Z</published>
    <updated>2021-07-20T07:44:15.333Z</updated>
    
    <content type="html"><![CDATA[<div class="note info">            <p>CFSSL是CloudFlare开源的一款PKI/TLS工具。CFSSL包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。</p>          </div><h6 id="安装CFSSL"><a href="#安装CFSSL" class="headerlink" title="安装CFSSL"></a>安装CFSSL</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure><h6 id="集群相关证书类型"><a href="#集群相关证书类型" class="headerlink" title="集群相关证书类型"></a>集群相关证书类型</h6><p>client certificate：用于服务端认证客户端，例如etcdctl、etcd proxy、fleetctl、docker客户端。</p><p>server certificate：服务端使用，客户端以此验证服务端身份，例如docker服务端、kube-apiserver。</p><p>peer certificate：双向证书，用于etcd集群成员间通信。</p><p>根据认证对象可以将证书分成三类：服务器证书server cert，客户端证书client cert，对等证书peer cert（表示既是server cert又是client cert），在kubernetes集群中需要的证书种类如下：</p><ul><li>etcd节点需要标识自己服务的server cert，也需要client cert与etcd集群其他节点交互，当然可以分别指定2个证书，也可以使用一个对等证书。</li><li>master节点需要标识apiserver服务的server cert，也需要client cert连接etcd集群，这里也使用一个对等证书。</li><li>kubectl，calico，kube-proxy只需要client cert，因此证书请求中hosts字段可以为空。</li><li>kubelet证书比较特殊，不是手动生成，它由node节点TLS BootStrap向apiserver请求，由master节点的controller-manager 自动签发，包含一个client cert和一个server cert。</li></ul><h6 id="创建CA配置文件"><a href="#创建CA配置文件" class="headerlink" title="创建CA配置文件"></a>创建CA配置文件</h6><p>配置证书生成策略，规定CA可以颁发哪种类型的证书<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ca-config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"signing"</span>: &#123;</span><br><span class="line">        <span class="attr">"default"</span>: &#123;</span><br><span class="line">            <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">            <span class="attr">"kubernetes"</span>: &#123;</span><br><span class="line">                <span class="attr">"usages"</span>: [</span><br><span class="line">                    <span class="string">"signing"</span>,</span><br><span class="line">                    <span class="string">"key encipherment"</span>,</span><br><span class="line">                    <span class="string">"server auth"</span>,</span><br><span class="line">                    <span class="string">"client auth"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>signing：表示该证书可用于签名其它证书，生成的ca.pem证书中CA=TRUE</li><li>server auth：表示client可以用该该证书对server提供的证书进行验证</li><li>client auth：表示server可以用该该证书对client提供的证书进行验证</li></ul><h6 id="创建CA证书签名请求"><a href="#创建CA证书签名请求" class="headerlink" title="创建CA证书签名请求"></a>创建CA证书签名请求</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ca-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: &#123;</span><br><span class="line">        <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">4096</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">            <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">            <span class="attr">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ca"</span>: &#123;</span><br><span class="line">        <span class="attr">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CN：Common Name，kube-apiserver从证书中提取该字段作为请求的用户名 (User Name)，浏览器使用该字段验证网站是否合法</li><li>O：Organization，kube-apiserver从证书中提取该字段作为请求用户所属的组 (Group)</li><li>kube-apiserver将提取的User、Group作为RBAC授权的用户标识</li><li>请不要修改证书配置的CN、O字段，这两个字段名称比较特殊，大多数为system:开头，实际上是为了匹配RBAC规则</li></ul><h6 id="生成CA证书和私钥"><a href="#生成CA证书和私钥" class="headerlink" title="生成CA证书和私钥"></a>生成CA证书和私钥</h6><p>生成CA所必需的文件ca-key.pem（私钥）和ca.pem（证书），还会生成ca.csr（证书签名请求），用于交叉签名或重新签名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">CA</span><br><span class="line">├── ca-config.json</span><br><span class="line">├── ca.csr</span><br><span class="line">├── ca-csr.json</span><br><span class="line">├── ca-key.pem</span><br><span class="line">└── ca.pem</span><br><span class="line"></span><br><span class="line">0 directories, 5 files</span><br></pre></td></tr></table></figure></p><h6 id="apiserver-TLS-认证端口需要的证书"><a href="#apiserver-TLS-认证端口需要的证书" class="headerlink" title="apiserver TLS 认证端口需要的证书"></a>apiserver TLS 认证端口需要的证书</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">kube-apiserver-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="attr">"hosts"</span>: [</span><br><span class="line">        <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"10.105.26.201"</span>,</span><br><span class="line">        <span class="string">"10.105.26.202"</span>,</span><br><span class="line">        <span class="string">"10.105.26.203"</span>,</span><br><span class="line">        <span class="string">"10.254.0.1"</span>,</span><br><span class="line">        <span class="string">"kubernetes"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"key"</span>: &#123;</span><br><span class="line">        <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">            <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">            <span class="attr">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hosts字段指定授权使用该证书的IP和域名列表，这里列出了master节点IP、kubernetes服务的IP和域名。</li><li>kubernetes服务IP是apiserver自动创建的，一般是–service-cluster-ip-range参数指定的网段的第一个IP。</li></ul><h6 id="controller-manager-连接-apiserver-需要使用的证书"><a href="#controller-manager-连接-apiserver-需要使用的证书" class="headerlink" title="controller manager 连接 apiserver 需要使用的证书"></a>controller manager 连接 apiserver 需要使用的证书</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kube-controller-manager-csr.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="string">"10.105.26.201"</span>,</span><br><span class="line">    <span class="string">"10.105.26.202"</span>,</span><br><span class="line">    <span class="string">"10.105.26.203"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hosts列表包含所有kube-controller-manager节点IP。</li><li>CN和O均为system:kube-controller-manager，kubernetes内置的ClusterRoleBindings system:kube-controller-manager赋予kube-controller-manager工作所需的权限。</li></ul><h6 id="scheduler连接apiserver需要使用的证书"><a href="#scheduler连接apiserver需要使用的证书" class="headerlink" title="scheduler连接apiserver需要使用的证书"></a>scheduler连接apiserver需要使用的证书</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">kube-scheduler-csr.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">  <span class="attr">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="string">"10.105.26.201"</span>,</span><br><span class="line">    <span class="string">"10.105.26.202"</span>,</span><br><span class="line">    <span class="string">"10.105.26.203"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hosts列表包含所有kube-scheduler节点IP。</li><li>CN和O均为system:kube-scheduler，kubernetes内置的ClusterRoleBindings system:kube-scheduler将赋予kube-scheduler工作所需的权限。</li></ul><h6 id="proxy组件连接apiserver需要使用的证书"><a href="#proxy组件连接apiserver需要使用的证书" class="headerlink" title="proxy组件连接apiserver需要使用的证书"></a>proxy组件连接apiserver需要使用的证书</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kube-proxy-csr.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">    <span class="attr">"hosts"</span>: [],</span><br><span class="line">    <span class="attr">"key"</span>: &#123;</span><br><span class="line">        <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="attr">"ST"</span>: <span class="string">"JiangSu"</span>,</span><br><span class="line">            <span class="attr">"L"</span>: <span class="string">"SuZhou"</span>,</span><br><span class="line">            <span class="attr">"O"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">            <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CN：指定该证书的User为system:kube-proxy。</li><li>预定义的RoleBinding system:node-proxier将User system:kube-proxy与Role system:node-proxier绑定，该Role授予了调用kube-apiserver Proxy相关API的权限。</li><li>该证书只会被kube-proxy当做client证书使用，所以hosts字段为空。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note info&quot;&gt;
            &lt;p&gt;CFSSL是CloudFlare开源的一款PKI/TLS工具。CFSSL包含一个命令行工具和一个用于签名，验证并且捆绑TLS证书的HTTP API服务。使用Go语言编写。&lt;/p&gt;
          &lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Harbor彻底删除镜像</title>
    <link href="http://yoursite.com/2019/05/16/Harbor%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/05/16/Harbor彻底删除镜像/</id>
    <published>2019-05-16T01:10:00.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<p>Harbor私有仓库运行一段时间后，仓库中存有大量镜像，会占用太多的存储空间。直接通过Harbor界面删除相关镜像，并不会自动删除存储中的文件和镜像。需要停止Harbor服务，执行垃圾回收命令，进行存储空间清理和回收。</p><h1 id="先在Harbor-UI中删除不需要的镜像"><a href="#先在Harbor-UI中删除不需要的镜像" class="headerlink" title="先在Harbor UI中删除不需要的镜像"></a>先在Harbor UI中删除不需要的镜像</h1><p><img src="/images/pasted-16.png" alt="upload successful"></p><p><img src="/images/pasted-17.png" alt="upload successful"></p><h1 id="停止Harbor服务，执行垃圾回收命令"><a href="#停止Harbor服务，执行垃圾回收命令" class="headerlink" title="停止Harbor服务，执行垃圾回收命令"></a>停止Harbor服务，执行垃圾回收命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br><span class="line">docker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect --dry-run /etc/registry/config.yml \\使用--dry-run参数运行容器，预览运行效果，但不删除任何数据</span><br><span class="line">docker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect  /etc/registry/config.yml \\不使用--dry-run参数，将删除相关的文件和镜像</span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure><h1 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h1><ul><li><p>统计目录/data/registry/docker/registry/v2/blobs&amp;repositories，对比之前大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /data/registry/docker/registry/v2/blobs&amp;repositories</span><br></pre></td></tr></table></figure></li><li><p>重新上传之前删除的镜像，如没成功删除会报镜像已存在。</p></li></ul><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>搭建镜像仓库是容器云最核心的步骤之一。基本上最近几年大家都在自己的容器集群中搭建了镜像仓库。作为开源项目，Docker发布的Registry(V1版本)和最后发布了一份Distribution(V2版本)都在解决这个事情。但是不管是当初快速迭代的时候没有仔细考虑，还是迭代速度太快欠下来的技术债，反正是把我们这些实际应用者郁闷了良久。因为真正运营起一套容器云系统之后，会产生大量的镜像，这些镜像的管理就会摆上日程。一般用了没多久，就发现在单机上可以轻易删除镜像的操作在镜像仓库上尽然没有提供。当然在社区发现此问题后在第二个版本中，已经提供了相关的删除方案。当时因为其中细节有趣，我拿出来讲讲，让各位看官能顺着文字知道个前后因果。</p><p>在Distribution的代码库中查看ROADMAP.md中有明确的说明删除操作的利弊。首先，镜像内容是存储在一层虚拟文件系统(VFS)之上，由多个文件块(Blobs)、描述清单文件(Manifests)和 标签文件（tags）组成，因为镜像设计是多层的。所以这些文件会互相依赖，在没有确认文件块(Blob)是否被其他镜像使用的情况下，直接删除会让仓库不完整。所以一般的做法是只做删除标记，而不是真删除，通过垃圾回收机制来遍历当前仓库的有向关系图(DAG)，然后在删除没有被引用的文件块。</p><p>目前Docker Distribution属于维护阶段，已经再把实现标准往OCI社区迁移。所以未来大家应该以OCI镜像作为基准。通过<a href="https://github.com/docker/distribution/pull/2076" target="_blank" rel="noopener">代码补丁</a>来实现支持OCI版本的镜像仓库。</p><p>如何有效的删除镜像的方法也是有的，大致分为4种方法，请参考：</p><p>Reference Counting- 引用计数。</p><p>Lock the World GC- 全局垃圾回收。</p><p>Generational GC- 两代垃圾回收。</p><p>Centralized Oracle- 中央数据库。</p><p>每种方案都有利弊。所以在实现过程中一定要多考虑和实践。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Harbor私有仓库运行一段时间后，仓库中存有大量镜像，会占用太多的存储空间。直接通过Harbor界面删除相关镜像，并不会自动删除存储中的文件和镜像。需要停止Harbor服务，执行垃圾回收命令，进行存储空间清理和回收。&lt;/p&gt;
&lt;h1 id=&quot;先在Harbor-UI中删除不
      
    
    </summary>
    
    
      <category term="Harbor" scheme="http://yoursite.com/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>集群常用设置</title>
    <link href="http://yoursite.com/2019/05/15/%E9%9B%86%E7%BE%A4%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/05/15/集群常用设置/</id>
    <published>2019-05-15T15:35:00.000Z</published>
    <updated>2021-07-20T07:44:15.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器CentOS系统安装完毕后的基本配置"><a href="#服务器CentOS系统安装完毕后的基本配置" class="headerlink" title="服务器CentOS系统安装完毕后的基本配置"></a>服务器CentOS系统安装完毕后的基本配置</h1><p>使用root用户在管理节点和计算节点上进行以下操作：</p><ul><li><p>修改/etc/profile.d/perl-homedir.sh配置文件，以免每次登录用户，自动在家目录下生成perl5文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/PERL_HOMEDIR=1/PERL_HOMEDIR=0/'</span> /etc/profile.d/perl-homedir.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$(perl -Mlocal::lib=$HOME/.perl5)"'</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/sudoers配置文件，将自己的用户（例如 train）变成超级管理员用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -i.bak -e <span class="string">'while (&lt;&gt;) &#123; if (/^root/) &#123; print; print "train   ALL=(ALL)       NOPASSWD:ALL\n"; last; &#125; else &#123; print &#125; &#125;'</span> /etc/sudoers</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/selinux/config配置文件，永久关闭linux的一个安全机制，开启该安全机制会对很多操作造成阻碍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/'</span> /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></li><li><p>修改/etc/ssh/sshd_config配置文件，使openssh远程登录更安全，更快速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/#RSAAuthentication/RSAAuthentication/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/#PubkeyAuthentication/PubkeyAuthentication/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/#AuthorizedKeysFile/AuthorizedKeysFile/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*PermitRootLogin.*/PermitRootLogin no/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*Protocol\s+2.*/Protocol 2/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*ClientAliveInterval.*/ClientAliveInterval 60/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*ClientAliveCountMax.*/ClientAliveCountMax 10/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/.*UseDNS.*/UseDNS no/'</span> /etc/ssh/sshd_config</span><br><span class="line">perl -p -i -e <span class="string">'s/GSSAPIAuthentication yes/GSSAPIAuthentication no/'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure></li><li><p>增加系统资源权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/^\*.*\n$//'</span> /etc/security/limits.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/security/limits.conf</span><br><span class="line">*       soft    nofile  10240</span><br><span class="line">*       hard    nofile  102400</span><br><span class="line">*       soft    stack   10240</span><br><span class="line">*       hard    stack   102400</span><br><span class="line">*       soft    core    unlimited</span><br><span class="line">*       hard    core    unlimited</span><br><span class="line">*       soft    nproc   10240</span><br><span class="line">*       hard    nproc   102400</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h1 id="配置集群中各服务器的主机名和IP地址"><a href="#配置集群中各服务器的主机名和IP地址" class="headerlink" title="配置集群中各服务器的主机名和IP地址"></a>配置集群中各服务器的主机名和IP地址</h1><p>使用root用户在管理节点 和计算节点服务器上对infiniband网口进行配置，修改 /etc/sysconfig/network-scripts/ifcfg-ib0 配置文件内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=none</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.1.12</span><br><span class="line">PREFIX=24</span><br><span class="line">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure></p><p>修改好ifcfg文件后，重启网络服务，使生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p><p>各节点服务器在infiniband网络之间的联通需要在控制节点node1上安装一些相关的系统软件，并启用相应服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install opensm* opensm-devel* infiniband-diags perftest* gperf* opensm*</span><br><span class="line">systemctl restart opensm.service</span><br><span class="line">systemctl <span class="built_in">enable</span> rdma.service</span><br><span class="line">systemctl <span class="built_in">enable</span> opensm.service</span><br></pre></td></tr></table></figure></p><p>然后将所有节点服务器的 /etc/hosts 文件内容修改成同样的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /etc/hosts</span><br><span class="line">192.168.1.12    master</span><br><span class="line">192.168.1.13    node01</span><br><span class="line">192.168.1.14    node02</span><br><span class="line">192.168.1.15    node03</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h1 id="将控制节点的以太网共享给计算节点"><a href="#将控制节点的以太网共享给计算节点" class="headerlink" title="将控制节点的以太网共享给计算节点"></a>将控制节点的以太网共享给计算节点</h1><p>控制节点通过电信100M宽带连接外网，通过网线将master控制节点连接到电信网关（光猫和路由器合一的电信盒子）上。设置网口自动使用DHCP方法分配IP地址即可。在外网可以正常连接的情况，可以将该网络通过infiniband网卡共享给其它计算节点。</p><p>在master控制节点上使用root用户进行操作：</p><ul><li>开启NAT转发</li><li>开放DNS使用的53端口并重启防火墙，否则可能导致内网服务器虽然设置正确的DNS，但是依然无法进行域名解析。</li><li><p>控制节点上是在eth0网口连接外网，对其网络进行共享。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> firewall-cmd --permanent --zone=public --add-masquerade</span><br><span class="line"></span><br><span class="line"> firewall-cmd --zone=public --add-port=53/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">'net.ipv4.ip_forward=1'</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"> sysctl -p</span><br><span class="line"> firewall-cmd --permanent --direct --passthrough ipv4 -t nat -I POSTROUTING -o eth0 -j MASQUERADE -s 12.12.12.0/24</span><br><span class="line"> systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></li></ul><p>在计算节点上对infiniband网卡进行IP设置时，将网关设置成提供网络的主机IP即可，即将网关设置成master管理节点的IP地址。</p><h1 id="将控制节点的存储共享给计算节点"><a href="#将控制节点的存储共享给计算节点" class="headerlink" title="将控制节点的存储共享给计算节点"></a>将控制节点的存储共享给计算节点</h1><p>在控制节点master服务器上，修改NFS配置文件/etc/sysconfig/nfs配置文件，打开所有带有PORT的注释行，表示使用相应的防火墙端口，并修改防火墙配置，开放对应端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">perl -p -i -e <span class="string">'s/^#(.*PORT)/$1/'</span> /etc/sysconfig/nfs</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=32803/udp --permanent</span><br><span class="line">firewall-cmd --add-port=32803/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=32769/udp --permanent</span><br><span class="line">firewall-cmd --add-port=32769/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=892/udp --permanent</span><br><span class="line">firewall-cmd --add-port=892/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=662/udp --permanent</span><br><span class="line">firewall-cmd --add-port=662/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=2020/udp --permanent</span><br><span class="line">firewall-cmd --add-port=2020/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=875/udp --permanent</span><br><span class="line">firewall-cmd --add-port=875/tcp --permanent</span><br><span class="line"></span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></p><p>然后，在控制节点master服务器上，启动NFS服务，并设置成开机启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rpcbind.service</span><br><span class="line">systemctl restart nfs.service</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs.service</span><br></pre></td></tr></table></figure></p><p>继续，在控制节点master服务器上， 修改/etc/exports文件内容，添加被共享的文件夹信息，并使配置生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/exports</span><br><span class="line">/disk   192.168.1.0/24(rw,sync,no_root_squash,no_subtree_check)</span><br><span class="line">/opt    192.168.1.0/24(rw,sync,no_root_squash,no_subtree_check)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure></p><p>在各计算节点服务器上，使用root用户修改配置文件/etc/fstab，对master的共享文件夹进行挂载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir /disk</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/fstab</span><br><span class="line">192.168.1.12:/disk        /disk   nfs     defaults        0       0</span><br><span class="line">192.168.1.12:/opt /opt    nfs     defaults        0       0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure></p><h1 id="在集群计算机上创建新用户"><a href="#在集群计算机上创建新用户" class="headerlink" title="在集群计算机上创建新用户"></a>在集群计算机上创建新用户</h1><p>首先，生成文件/disk/users.txt。该文件每行一个待生成的用户名。</p><p>然后，在所有节点服务器中进行操作，生成用户并使create_random_passwd.pl命令赋予随机密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /disk</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    useradd <span class="variable">$i</span> 2&gt; /dev/null</span><br><span class="line">    ./create_random_passwd.pl <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>在控制节点master服务器中进行操作：在大容量存储对应的共享文件夹中建立新用户的专属文件夹；使用root用户生成新用户的ssh密钥对数据和授权文件信息并放入到各新用户的家目录下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/bin/rm /disk/ssh_info/ -rf</span><br><span class="line">mkdir -p /disk/ssh_info/</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mkdir /disk/ssh_info//<span class="variable">$i</span> /disk/<span class="variable">$i</span></span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /disk/<span class="variable">$i</span></span><br><span class="line">    chmod 700 /disk/<span class="variable">$i</span></span><br><span class="line">    ssh-keygen -t dsa -P <span class="string">''</span> -f /disk/ssh_info/<span class="variable">$i</span>/id_dsa</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /disk/ssh_info/<span class="variable">$i</span></span><br><span class="line">    mkdir /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    /bin/cp -a /disk/ssh_info/<span class="variable">$i</span>/* /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chmod 700 /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    cat /disk/ssh_info/<span class="variable">$i</span>/id_dsa.pub &gt;&gt; /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chmod 600 /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>在各个计算节点服务器中使用root用户将上一步生成的ssh密钥对数据和授权文件信息放入到计算节点服务器中各新用户的家目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /disk</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    useradd <span class="variable">$i</span> 2&gt; /dev/null</span><br><span class="line">    ./create_random_passwd.pl <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat users.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mkdir /home/<span class="variable">$i</span>/.ssh </span><br><span class="line">    /bin/cp -a /disk/ssh_info/<span class="variable">$i</span>/* /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    chmod 700 /home/<span class="variable">$i</span>/.ssh</span><br><span class="line">    cat /disk/ssh_info/<span class="variable">$i</span>/id_dsa.pub &gt;&gt; /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chown -R <span class="variable">$i</span>:<span class="variable">$i</span> /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line">    chmod 600 /home/<span class="variable">$i</span>/.ssh/authorized_keys</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>create_random_passwd.pl程序代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="comment">#use strict;</span></span><br><span class="line"><span class="keyword">use</span> Getopt::Long;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $usage = &lt;&lt;USAGE;</span><br><span class="line">Usage:</span><br><span class="line">    $0 [options] username</span><br><span class="line"></span><br><span class="line">    使用root用户执行该程序，输入用户名，则能调用passwd命令给该用户创建一个随机密码。并将用户名及其密码输出到标准输出。</span><br><span class="line">    --<span class="keyword">length</span> &lt;<span class="keyword">int</span>&gt;    default:<span class="number">10</span></span><br><span class="line">    设置生成密码的字符长度。</span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line"><span class="keyword">if</span> (@ARGV==<span class="number">0</span>) &#123; <span class="keyword">die</span> $usage &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $length;</span><br><span class="line">GetOptions(</span><br><span class="line">    <span class="string">"length:i"</span> =&gt; \$length,</span><br><span class="line">);</span><br><span class="line">$length ||= <span class="number">10</span>;</span><br><span class="line"><span class="keyword">my</span> @cha = (<span class="string">'!'</span>, <span class="string">'@'</span>, <span class="string">'#'</span>, <span class="string">'$'</span>, <span class="string">'%'</span>, <span class="string">'^'</span>, <span class="string">'&amp;'</span>, <span class="string">'*'</span>, <span class="string">'.'</span>, <span class="string">'_'</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="number">0</span>..<span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">push</span> @cha, $_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (a..z) &#123;</span><br><span class="line">    <span class="keyword">push</span> @cha, $_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (A..Z) &#123;</span><br><span class="line">    <span class="keyword">push</span> @cha, $_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $passwd;</span><br><span class="line"><span class="keyword">for</span> (<span class="number">1</span>..$length) &#123;</span><br><span class="line">    <span class="keyword">my</span> $cha_num = <span class="keyword">rand</span>(@cha);</span><br><span class="line">    $passwd .= $cha[$cha_num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"$ARGV[0]\t$passwd\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $cmdString = <span class="string">"echo \'$passwd\' | passwd --stdin $ARGV[0] &amp;&gt; /dev/null"</span>;</span><br><span class="line">(<span class="keyword">system</span> $cmdString) == <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">"Faield to excute: $cmdString, $!\n"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="远程桌面软件vncserver安装和使用"><a href="#远程桌面软件vncserver安装和使用" class="headerlink" title="远程桌面软件vncserver安装和使用"></a>远程桌面软件vncserver安装和使用</h1><p>由于控制节点master是连接到了电信网关上，没有固定IP地址，推荐使用vnc来对内网服务器使用图形化桌面方法进行控制。</p><p>首先，使用root用户在master服务器上进行操作，安装vncserver软件并开放相应的防火墙5901，5902，5903端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install vcn vnc-server</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=pulic --add-port=5901/tcp --permanent</span><br><span class="line">firewall-cmd --zone=pulic --add-port=5902/tcp --permanent</span><br><span class="line">firewall-cmd --zone=pulic --add-port=5903/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></p><p>然后，使用普通用户（例如，train）开启vncserver服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vncserver</span><br><span class="line"><span class="comment"># 第一次启动需要输入密码</span></span><br></pre></td></tr></table></figure></p><p>进行其它vnc操作并修改桌面分辨率，提供更好的vnc体验：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看当前开启的vncserver桌面列表</span><br><span class="line">vncserver -list</span><br><span class="line"></span><br><span class="line">查看第一个vncserver桌面的端口号</span><br><span class="line">cat ~/.vnc/node1\:1.log</span><br><span class="line"></span><br><span class="line">关闭第一个vncserver桌面 </span><br><span class="line">vncserver -<span class="built_in">kill</span> :1</span><br><span class="line"></span><br><span class="line">修改vncserver桌面的分辨率</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; .vnc/config</span><br><span class="line">geometry=2000x1052</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">关闭后再次启动vncserver桌面，则分辨率变得更好了</span><br><span class="line">vncserve</span><br></pre></td></tr></table></figure></p><p>为了让vnc能在外网对master进行控制。需要将master控制节点服务器和公网服务器使用ssh进行连接，开启反向隧道，并进行端口转发，在master服务器上进行操作。以下命令将master服务器VNC服务对应的5901端口映射到公网服务器xxx.xx.xxx.xx的4497端口上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -f -R 4497:localhost:5901 train@xxx.xx.xxx.xx</span><br></pre></td></tr></table></figure></p><p>注意，以上命令需要在公网服务器xxx.xx.xxx.xx上拥有train用户的密码，才能ssh连接成功；并且，还需要使用该公网服务器的root用户开启4497防火墙端口，同时在ssh配置文件设置允许端口转发，才能使vnc访问生效。</p><p>最后，在windows系统下下载vncviewer软件，然后安装并打开软件，输入xxx.xx.xxx.xx:4497，再输入之前设置的密码，即可访问远程桌面。</p><h1 id="在控制节点上控制计算节点的开机和关机"><a href="#在控制节点上控制计算节点的开机和关机" class="headerlink" title="在控制节点上控制计算节点的开机和关机"></a>在控制节点上控制计算节点的开机和关机</h1><p>在控制节点上，对计算节点可以使用ssh连接并导入shutdown指令的方法进关机。基于此原理，编写名为poweroff的Perl程序来对指定的节点进行关机。该程序代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $usage = &lt;&lt;USAGE;</span><br><span class="line">Usage:</span><br><span class="line">    $0 node1<span class="number">0</span> node11 node12 ...</span><br></pre></td></tr></table></figure></p><p>使用此命令关闭目标节点。该命令后可以输入1个或多个主机名，关闭相应的计算节点。若命令后输入的主机名中有一个是all，则会关闭所有的计算节点（从node11到node20）。此外，支持node11-node15这样中间带有中划线的输入方法，表示多个连续的节点。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line">    $0 node11 node13-node16 node2<span class="number">0</span></span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line"><span class="keyword">if</span> (@ARGV==<span class="number">0</span>)&#123;<span class="keyword">die</span> $usage&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @node = <span class="keyword">qw</span>/node1<span class="number">0</span> node11 node12 node13 node14 node15 node16 node17 node18 node19 node2<span class="number">0</span>/;</span><br><span class="line"><span class="keyword">my</span> %node;</span><br><span class="line"><span class="keyword">foreach</span> (@node) &#123; $node&#123;$_&#125; = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> %target;</span><br><span class="line"><span class="keyword">foreach</span> (@ARGV) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_ eq <span class="string">"all"</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (@node) &#123; $target&#123;$_&#125; = <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elsif</span> (<span class="regexp">m/(\d+)-node(\d+)/</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($1 .. $2) &#123;</span><br><span class="line">            $target&#123;<span class="string">"node$_"</span>&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">exists</span> $node&#123;$_&#125;) &#123;</span><br><span class="line">            $target&#123;$_&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span> STDERR <span class="string">"Warning: $_不是能控制的目标节点。\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">sort</span> <span class="keyword">keys</span> %target) &#123;</span><br><span class="line">    &amp;guanji($_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">guanji</span> </span>&#123;</span><br><span class="line">    <span class="keyword">print</span> STDERR <span class="string">"正在检测到 $_ 的连接\n"</span>;</span><br><span class="line">    <span class="keyword">my</span> $ping = <span class="string">`ping $_ -c 1`</span>;</span><br><span class="line">    <span class="keyword">if</span> ($ping =~ <span class="regexp">m/Unreachable/</span>) &#123;</span><br><span class="line">        <span class="keyword">print</span> STDERR <span class="string">"Warning: $_连接失败，可能已经处于关机状态。\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">my</span> $cmdString = <span class="string">"ssh $_ 'sudo shutdown -h now' &amp;&gt; /dev/null"</span>;</span><br><span class="line">        <span class="keyword">system</span> $cmdString;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"对主机 $_ 已经发送关机指令\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在控制节点node1上，可以使用<a href="http://www.chenlianfu.com/?p=2874" target="_blank" rel="noopener">wol软件基于网络唤醒的方法对计算节点进行开机</a>。基于此原理，编写名为 kaiji 的Perl程序对指定节点进行开机。该程序代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $usage = &lt;&lt;USAGE;</span><br><span class="line">Usage:</span><br><span class="line">    $0 node1<span class="number">0</span> node11 node12 ...</span><br></pre></td></tr></table></figure></p><p>使用此命令开启目标节点。该命令后可以输入1个或多个主机名，开启相应的计算节点。若命令后输入的主机名中有一个是all，则会开启所有的计算节点（从node11到node20）。此外，支持node11-node15这样中间带有中划线的输入方法，表示多个连续的节点。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line">    $0 node11 node13-node16 node2<span class="number">0</span></span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line"><span class="keyword">if</span> (@ARGV==<span class="number">0</span>)&#123;<span class="keyword">die</span> $usage&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> @node = <span class="keyword">qw</span>/node1<span class="number">0</span> node11 node12 node13 node14 node15 node16 node17 node18 node19 node2<span class="number">0</span>/;</span><br><span class="line"><span class="keyword">my</span> %node = (<span class="string">"node10"</span> =&gt; <span class="string">"00:e0:ec:27:e9:f0"</span>,</span><br><span class="line"><span class="string">"node11"</span> =&gt; <span class="string">"e8:61:1f:11:e9:4b"</span>,</span><br><span class="line"><span class="string">"node12"</span> =&gt; <span class="string">"e8:61:1f:11:e8:3f"</span>,</span><br><span class="line"><span class="string">"node13"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:80"</span>,</span><br><span class="line"><span class="string">"node14"</span> =&gt; <span class="string">"e8:61:1f:1b:ed:84"</span>,</span><br><span class="line"><span class="string">"node15"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:9e"</span>,</span><br><span class="line"><span class="string">"node16"</span> =&gt; <span class="string">"e8:61:1f:1b:ed:0e"</span>,</span><br><span class="line"><span class="string">"node17"</span> =&gt; <span class="string">"e8:61:1f:1b:ed:b4"</span>,</span><br><span class="line"><span class="string">"node18"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:94"</span>,</span><br><span class="line"><span class="string">"node19"</span> =&gt; <span class="string">"e8:61:1f:1b:ec:5a"</span>,</span><br><span class="line"><span class="string">"node20"</span> =&gt; <span class="string">"e8:61:1f:1b:eb:d0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> %target;</span><br><span class="line"><span class="keyword">foreach</span> (@ARGV) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_ eq <span class="string">"all"</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (@node) &#123; $target&#123;$_&#125; = <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elsif</span> (<span class="regexp">m/(\d+)-node(\d+)/</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($1 .. $2) &#123;</span><br><span class="line">            $target&#123;<span class="string">"node$_"</span>&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">exists</span> $node&#123;$_&#125;) &#123;</span><br><span class="line">            $target&#123;$_&#125; = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">print</span> STDERR <span class="string">"Warning: $_不是能控制的目标节点。\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">sort</span> <span class="keyword">keys</span> %target) &#123;</span><br><span class="line">        &amp;kaiji($_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">kaiji</span> </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"对主机 $_ 已经发送开机指令\n"</span>;</span><br><span class="line">        <span class="keyword">my</span> $cmdString = <span class="string">"/opt/sysoft/wol-0.7.1/bin/wol --host=10.10.10.255 $node&#123;$_&#125;"</span>;</span><br><span class="line">        <span class="keyword">system</span> $cmdString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器CentOS系统安装完毕后的基本配置&quot;&gt;&lt;a href=&quot;#服务器CentOS系统安装完毕后的基本配置&quot; class=&quot;headerlink&quot; title=&quot;服务器CentOS系统安装完毕后的基本配置&quot;&gt;&lt;/a&gt;服务器CentOS系统安装完毕后的基本配置&lt;/
      
    
    </summary>
    
      <category term="HPC" scheme="http://yoursite.com/categories/HPC/"/>
    
    
  </entry>
  
  <entry>
    <title>在Centos7部署SGE</title>
    <link href="http://yoursite.com/2019/05/15/%E5%9C%A8Centos7%E9%83%A8%E7%BD%B2SGE/"/>
    <id>http://yoursite.com/2019/05/15/在Centos7部署SGE/</id>
    <published>2019-05-15T14:41:00.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置防火墙，放行SGE所需端口"><a href="#设置防火墙，放行SGE所需端口" class="headerlink" title="设置防火墙，放行SGE所需端口"></a>设置防火墙，放行SGE所需端口</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># firewall-cmd --add-port=992/udp --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --add-port=6444/tcp --permanent</span></span><br><span class="line"><span class="comment"># firewall-cmd --add-port=6445/tcp --permanent</span></span><br><span class="line"><span class="comment"># systemctl restart firewalld.service</span></span><br></pre></td></tr></table></figure><h1 id="从SGE官网下载最新版本的SGE源码包并进行编译和安装"><a href="#从SGE官网下载最新版本的SGE源码包并进行编译和安装" class="headerlink" title="从SGE官网下载最新版本的SGE源码包并进行编译和安装"></a>从SGE官网下载最新版本的SGE源码包并进行编译和安装</h1><h2 id="安装依赖的系统软件"><a href="#安装依赖的系统软件" class="headerlink" title="安装依赖的系统软件"></a>安装依赖的系统软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install csh java-1.8.0-openjdk java-1.8.0-openjdk-devel gcc ant automake hwloc-devel openssl-devel libdb-devel pam-devel libXt-devel motif-devel ncurses-libs ncurses-devel</span></span><br><span class="line"><span class="comment"># yum install ant-junit junit javacc</span></span><br></pre></td></tr></table></figure><h2 id="下载SGE软件并进行编译"><a href="#下载SGE软件并进行编译" class="headerlink" title="下载SGE软件并进行编译"></a>下载SGE软件并进行编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://arc.liv.ac.uk/downloads/SGE/releases/8.1.9/sge-8.1.9.tar.gz -P ~/software/</span><br><span class="line">$ tar zxf ~/software/sge-8.1.9.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> sge-8.1.9/<span class="built_in">source</span></span><br><span class="line">$ ./scripts/bootstrap.sh</span><br><span class="line">$ ./aimk -no-herd -no-java</span><br></pre></td></tr></table></figure><h2 id="将编译好的SGE安装到指定的文件夹"><a href="#将编译好的SGE安装到指定的文件夹" class="headerlink" title="将编译好的SGE安装到指定的文件夹"></a>将编译好的SGE安装到指定的文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /opt/sysoft/sge</span></span><br><span class="line"><span class="comment"># export SGE_ROOT=/opt/sysoft/sge</span></span><br><span class="line"><span class="comment"># ./scripts/distinst -local -allall -noexit</span></span><br><span class="line"><span class="comment"># cd ../../ &amp;&amp; rm sge-8.1.9/ -rf</span></span><br><span class="line"><span class="comment"># echo 'export SGE_ROOT=/opt/sysoft/sge' &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="comment"># echo 'PATH=$PATH:/opt/sysoft/sge/bin/:/opt/sysoft/sge/bin/lx-amd64/' &gt;&gt; ~/.bashrc</span></span><br><span class="line"><span class="comment"># source ~/.bashrc</span></span><br></pre></td></tr></table></figure><h1 id="部署SGE前设置主机名"><a href="#部署SGE前设置主机名" class="headerlink" title="部署SGE前设置主机名"></a>部署SGE前设置主机名</h1><p>部署SGE前，需要设置好各个节点的主机名，需要修改3个文件。修改配置文件 /etc/sysconfig/network 内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=master</span><br></pre></td></tr></table></figure></p><p>修改配置文件 /proc/sys/kernel/hostname 内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master</span><br></pre></td></tr></table></figure></p><p>修改配置文件 /etc/hosts 内容（注意删除掉127.0.0.1和localhost的行）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.30.1 master</span><br><span class="line">192.168.30.2 node1</span><br><span class="line">192.168.30.3 node2</span><br><span class="line">192.168.30.4 node3</span><br></pre></td></tr></table></figure></p><h1 id="在所有节点上部署SGE"><a href="#在所有节点上部署SGE" class="headerlink" title="在所有节点上部署SGE"></a>在所有节点上部署SGE</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SGE_ROOT</span></span><br><span class="line">./install_qmaster</span><br></pre></td></tr></table></figure><p>运行部署命令后，会进入交互式界面。基本上全部都按Enter键使用默认设置即可。需要注意的事项是：</p><div class="note warning">            <ol><li>有一步骤是启动Grid Engine qmasster服务，可能会启动不了导致失败。原因是多次运行该命令进行部署，第一次会成功运行qmaster daemon，以后重新运行该程序进行部署则会失败。需要删除相应的sge_qmaster进程再进行部署。 </li><li>启动Grid Engine qmasster服务，要提供部署SGE的节点主机名信息，按y和Enter键使用一个文件来提供主机信息，输入文件路径/etc/hosts提供主机信息。</li></ol>          </div><p>只有先进行一个控制节点部署后，才能对各个计算节点进行部署。计算节点的部署比较简单，交互过程全部按Enter即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install_execd</span><br></pre></td></tr></table></figure></p><h1 id="启动SGE软件"><a href="#启动SGE软件" class="headerlink" title="启动SGE软件"></a>启动SGE软件</h1><p>部署完毕后，若需要使用SGE软件，则执行如下命令载入SGE的环境变量信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /opt/sysoft/sge/default/common/settings.sh</span><br></pre></td></tr></table></figure></p><p>或将该信息添加到~/.bashrc从而永久生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'source /opt/sysoft/sge/default/common/settings.sh'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>启动SGE软件方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/sysoft/sge/default/common/sgemaster    <span class="comment"># 控制节点启动</span></span><br><span class="line">$ /opt/sysoft/sge/default/common/sgeexecd     <span class="comment"># 计算节点启动</span></span><br></pre></td></tr></table></figure></p><p>查看SGE软件运行日志文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Qmaster:      /opt/sysoft/sge/default/spool/qmaster/messages</span><br><span class="line">Exec daemon:  /opt/sysoft/sge/default/spool/&lt;hostname&gt;/messages</span><br></pre></td></tr></table></figure></p><h1 id="使用SGE软件"><a href="#使用SGE软件" class="headerlink" title="使用SGE软件"></a>使用SGE软件</h1><p>部署完毕SGE后，会生成一个默认主机用户组@allhosts，它包含所有的执行节点；生成一个默认的all.q队列名，它包含所有节点所有计算资源。默认的队列包含的计算资源是最大的。 通过使用命令qconf -mq queuename来对队列进行配置。修改hostlist来配置该队列可以使用执行主机；修改slots来配置各台执行主机可使用的线程数。从而对队列的计算资源进行设置。</p><p>使用qconf命令对SGE进行配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">qconf -ae hostname</span><br><span class="line">    添加执行主机</span><br><span class="line">qconf -de hostname</span><br><span class="line">    删除执行主机</span><br><span class="line">qconf -sel</span><br><span class="line">    显示执行主机列表</span><br><span class="line"></span><br><span class="line">qconf -ah hostname</span><br><span class="line">    添加管理主机</span><br><span class="line">qconf -dh hostname</span><br><span class="line">    删除管理主机</span><br><span class="line">qconf -sh</span><br><span class="line">    显示管理主机列表</span><br><span class="line"></span><br><span class="line">qconf -as hostname</span><br><span class="line">    添加提交主机</span><br><span class="line">qconf -ds hostname</span><br><span class="line">    删除提交主机</span><br><span class="line">qconf -ss</span><br><span class="line">    显示提交主机列表</span><br><span class="line"></span><br><span class="line">qconf -ahgrp groupname</span><br><span class="line">    添加主机用户组</span><br><span class="line">qconf -mhgrp groupname</span><br><span class="line">    修改主机用户组</span><br><span class="line">qconf -shgrp groupname</span><br><span class="line">    显示主机用户组成员</span><br><span class="line">qconf -shgrpl</span><br><span class="line">    显示主机用户组列表</span><br><span class="line"></span><br><span class="line">qconf -aq queuename</span><br><span class="line">    添加集群队列</span><br><span class="line">qconf -dq queuename</span><br><span class="line">    删除集群队列</span><br><span class="line">qconf -mq queuename</span><br><span class="line">    修改集群队列配置</span><br><span class="line">qconf -sq queuename</span><br><span class="line">    显示集群队列配置</span><br><span class="line">qconf -sql</span><br><span class="line">    显示集群队列列表</span><br><span class="line"></span><br><span class="line">qconf -ap PE_name</span><br><span class="line">    添加并行化环境</span><br><span class="line">qconf -mp PE_name</span><br><span class="line">    修改并行化环境</span><br><span class="line">qconf -dp PE_name</span><br><span class="line">    删除并行化环境</span><br><span class="line">qconf -sp PE_name</span><br><span class="line">    显示并行化环境</span><br><span class="line">qconf -spl</span><br><span class="line">    显示并行化环境名称列表</span><br><span class="line"></span><br><span class="line">qstat -f</span><br><span class="line">    显示执行主机状态</span><br><span class="line">qstat -u user</span><br><span class="line">    查看用户的作业</span><br><span class="line">qhost</span><br><span class="line">    显示执行主机资源信息</span><br></pre></td></tr></table></figure></p><p>使用qsub提交作业<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">qsub简单示例：</span><br><span class="line">$ qsub -V -cwd -o stdout.txt -e stderr.txt run.sh</span><br><span class="line"></span><br><span class="line">其中run.sh中包含需要运行的程序，其内容示例为如下三行：</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#$ -S /bin/bash</span></span><br><span class="line">perl -e <span class="string">'print "abc\n";print STDERR "123\n";'</span></span><br><span class="line"></span><br><span class="line">qsub的常用参数：</span><br><span class="line">-V</span><br><span class="line">    将当前shell中的环境变量输出到本次提交的任务中。</span><br><span class="line">-cwd</span><br><span class="line">    在当前工作目录下运行程序。默认设置下，程序的运行目录是当前用户在其计算节点的家目录。</span><br><span class="line">-o</span><br><span class="line">    将标准输出添加到指定文件尾部。默认输出文件名是<span class="variable">$job_name</span>.o<span class="variable">$job_id</span>。</span><br><span class="line">-e</span><br><span class="line">    将标准错误输出添加到指定文件尾部。默认输出文件名是<span class="variable">$job_name</span>.e<span class="variable">$job_id</span>。</span><br><span class="line">-q</span><br><span class="line">    指定投递的队列，若不指定，则会尝试寻找最小负荷且有权限的队列开始任务。</span><br><span class="line">-S</span><br><span class="line">    指定运行run.sh中命令行的软件，默认是tcsh。推荐使用bash，设置该参数的值为 /bin/bash 即可，或者在run.sh文件首部添加一行<span class="comment">#$ -S /bin/bash。若不设置为bash，则会在标准输出中给出警告信息：Warning: no access to tty (Bad file descriptor)。</span></span><br><span class="line">-hold_jid</span><br><span class="line">    后接多个使用逗号分隔的job_id，表示只有在这些job运行完毕后，才开始运行此任务。</span><br><span class="line">-N</span><br><span class="line">    设置任务名称。默认的job name为qsub的输入文件名。</span><br><span class="line">-p</span><br><span class="line">    设置任务优先级。其参数值范围为 -1023 ~ 1024 ，该值越高，越优先运行。但是该参数设置为正数需要较高的权限，系统普通用户不能设置为正数。</span><br><span class="line">-j y|n</span><br><span class="line">    设置是否将标准输出和标准错误输出流合并到 -o 参数结果中。</span><br><span class="line">-pe</span><br><span class="line">    设置并行化环境。</span><br></pre></td></tr></table></figure></p><p>任务提交后的管理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ qstat -f</span><br><span class="line">    查看当前用户在当前节点提交的所有任务，任务的状态有4中情况：qw，等待状态，刚提交任务的时候是该状态，一旦有计算资源了会马上运行；hqw，该任务依赖于其它正在运行的job，待前面的job执行完毕后再开始运行，qsub提交任务的时候使用-hold_jid参数则会是该状态；Eqw，投递任务出错；r，任务正在运行；s，被暂时挂起，往往是由于优先级更高的任务抢占了资源；dr，节点挂掉后，删除任务就会出现这个状态，只有节点重启后，任务才会消失。</span><br><span class="line"></span><br><span class="line">$ qstat -j jobID</span><br><span class="line">    按照任务id查看</span><br><span class="line"></span><br><span class="line">$ qstat -u user</span><br><span class="line">    按照用户查看</span><br><span class="line"></span><br><span class="line">$ qdel -j jobID</span><br><span class="line">    删除任务</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设置防火墙，放行SGE所需端口&quot;&gt;&lt;a href=&quot;#设置防火墙，放行SGE所需端口&quot; class=&quot;headerlink&quot; title=&quot;设置防火墙，放行SGE所需端口&quot;&gt;&lt;/a&gt;设置防火墙，放行SGE所需端口&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="HPC" scheme="http://yoursite.com/categories/HPC/"/>
    
    
  </entry>
  
  <entry>
    <title>cobbler批量部署系统</title>
    <link href="http://yoursite.com/2019/05/12/cobbler%E6%89%B9%E9%87%8F%E9%83%A8%E7%BD%B2%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/05/12/cobbler批量部署系统/</id>
    <published>2019-05-12T14:24:53.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="关闭防火墙和selinux"><a href="#关闭防火墙和selinux" class="headerlink" title="关闭防火墙和selinux"></a>关闭防火墙和selinux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># sed -i s#SELINUX=enforcing#SELINUX=disabled# /etc/selinux/config</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl disable firewalld</span></span><br></pre></td></tr></table></figure><h2 id="修改网卡信息"><a href="#修改网卡信息" class="headerlink" title="修改网卡信息"></a>修改网卡信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># nmcli connection modify eth0 ipv4.addresses 192.168.221.10/24 ipv4.gateway 192.168.221.2 ipv4.dns 192.168.221.2 ipv4.method manual connection.autoconnect yes connection.interface-name eth0</span></span><br></pre></td></tr></table></figure><h2 id="安装cobbler相关程序包"><a href="#安装cobbler相关程序包" class="headerlink" title="安装cobbler相关程序包"></a>安装cobbler相关程序包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># yum install cobbler cobbler-web pykickstart httpd dhcp tftp-server -y</span></span><br></pre></td></tr></table></figure><h2 id="启动cobbler和httpd服务"><a href="#启动cobbler和httpd服务" class="headerlink" title="启动cobbler和httpd服务"></a>启动cobbler和httpd服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># systemctl start httpd cobblerd</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl enable httpd cobblerd</span></span><br></pre></td></tr></table></figure><h2 id="检查cobbler配置"><a href="#检查cobbler配置" class="headerlink" title="检查cobbler配置"></a>检查cobbler配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># cobbler check</span></span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line"> </span><br><span class="line">1 : The <span class="string">'server'</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than localhost, or kickstarting features will not work.  This should be a resolvable hos</span><br><span class="line">tname or IP <span class="keyword">for</span> the boot server as reachable by all machines that will use it.2 : For PXE to be functional, the <span class="string">'next_server'</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than 127.0.0.1, and should match the IP of the boot serve</span><br><span class="line">r on the PXE network.3 : change <span class="string">'disable'</span> to <span class="string">'no'</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line">4 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="string">'cobbler get-loaders'</span> to download them, or, <span class="keyword">if</span> you only want to handle x86/x86_64 </span><br><span class="line">netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="string">'cobbler get-loaders'</span> <span class="built_in">command</span> is the easiest way to resolve these requirements.5 : <span class="built_in">enable</span> and start rsyncd.service with systemctl</span><br><span class="line">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class="line">7 : The default password used by the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) is still <span class="built_in">set</span> to <span class="string">'cobbler'</span> and sh</span><br><span class="line">ould be changed, try: <span class="string">"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'"</span> to generate new one</span><br><span class="line">8 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class="line"> </span><br><span class="line">Restart cobblerd and <span class="keyword">then</span> run <span class="string">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure><h1 id="Cobbler相关问题"><a href="#Cobbler相关问题" class="headerlink" title="Cobbler相关问题"></a>Cobbler相关问题</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>修改/etc/cobbler/settings文件中的server参数的值为提供cobbler服务的主机相应的IP地址或主机名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># cp /etc/cobbler/settings&#123;,.ori&#125;</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/server: 127.0.0.1/server: 192.168.221.10/' /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>修改/etc/cobbler/settings文件中的next_server参数的值为提供PXE服务的主机相应的IP地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/next_server: 127.0.0.1/next_server: 192.168.221.10/' /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep "server: 192.168.221.10" /etc/cobbler/settings</span></span><br><span class="line">next_server: 192.168.221.10</span><br><span class="line">server: 192.168.221.10</span><br></pre></td></tr></table></figure></p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>修改/etc/xinetd.d/tftp文件中的disable参数修改为 disable = no<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># cp /etc/xinetd.d/tftp&#123;,.bak&#125;</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/disable.*= yes/disable                 = no/g' /etc/xinetd.d/tftp</span></span><br></pre></td></tr></table></figure></p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>执行 cobbler get-loaders 命令即可；否则，需要安装syslinux程序包，而后复制/usr/share/syslinux/{pxelinux.0,memu.c32}等文件至/var/lib/cobbler/loaders/目录中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># cobbler get-loaders</span></span><br><span class="line">task started: 2018-08-30_170803_get_loaders</span><br><span class="line">task started (id=Download Bootloader Content, time=Thu Aug 30 17:08:03 2018)</span><br><span class="line">downloading https://cobbler.github.io/loaders/README to /var/lib/cobbler/loaders/README</span><br><span class="line">downloading https://cobbler.github.io/loaders/COPYING.elilo to /var/lib/cobbler/loaders/COPYING.elilo</span><br><span class="line">downloading https://cobbler.github.io/loaders/COPYING.yaboot to /var/lib/cobbler/loaders/COPYING.yaboot</span><br><span class="line">downloading https://cobbler.github.io/loaders/COPYING.syslinux to /var/lib/cobbler/loaders/COPYING.syslinux</span><br><span class="line">downloading https://cobbler.github.io/loaders/elilo-3.8-ia64.efi to /var/lib/cobbler/loaders/elilo-ia64.efi</span><br><span class="line">downloading https://cobbler.github.io/loaders/yaboot-1.3.17 to /var/lib/cobbler/loaders/yaboot</span><br><span class="line">downloading https://cobbler.github.io/loaders/pxelinux.0-3.86 to /var/lib/cobbler/loaders/pxelinux.0</span><br><span class="line">downloading https://cobbler.github.io/loaders/menu.c32-3.86 to /var/lib/cobbler/loaders/menu.c32</span><br><span class="line">downloading https://cobbler.github.io/loaders/grub-0.97-x86.efi to /var/lib/cobbler/loaders/grub-x86.efi</span><br><span class="line">downloading https://cobbler.github.io/loaders/grub-0.97-x86_64.efi to /var/lib/cobbler/loaders/grub-x86_64.efi</span><br><span class="line">*** TASK COMPLETE ***</span><br></pre></td></tr></table></figure></p><h2 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># systemctl start rsyncd</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># systemctl enable rsyncd</span></span><br><span class="line">问题6</span><br></pre></td></tr></table></figure><h2 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># yum install debmirror -y</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># vi /etc/debmirror.conf</span></span><br><span class="line"><span class="comment">#@dists="sid";</span></span><br><span class="line"><span class="comment">#@arches="i386";</span></span><br></pre></td></tr></table></figure><h2 id="问题7"><a href="#问题7" class="headerlink" title="问题7"></a>问题7</h2><p>生成密码来取代默认的密码，前者为干扰码，后者为真正的密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># openssl passwd -1 -salt 'jay.cheng' '123456'</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$jay</span>.chen<span class="variable">$1Ktf4J</span>.R.RsFfY3mz63Ro/</span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i s/'default_password_crypted:.*'/'default_password_crypted: "$1$jay.chen$1Ktf4J.R.RsFfY3mz63Ro\/"'/g /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep -n default_pass /etc/cobbler/settings</span></span><br><span class="line">101:default_password_crypted: <span class="string">"<span class="variable">$1</span><span class="variable">$jay</span>.chen<span class="variable">$1Ktf4J</span>.R.RsFfY3mz63Ro/"</span></span><br></pre></td></tr></table></figure></p><h2 id="问题8"><a href="#问题8" class="headerlink" title="问题8"></a>问题8</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># yum install -y fence-agents</span></span><br></pre></td></tr></table></figure><h2 id="由cobbler管理DHCP和防止循环装系统"><a href="#由cobbler管理DHCP和防止循环装系统" class="headerlink" title="由cobbler管理DHCP和防止循环装系统"></a>由cobbler管理DHCP和防止循环装系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/manage_dhcp: 0/manage_dhcp: 1/g' /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep -n manage_dhcp /etc/cobbler/settings</span></span><br><span class="line">242:manage_dhcp: 1</span><br><span class="line">269:<span class="comment"># if using cobbler with manage_dhcp, put the IP address</span></span><br><span class="line">355:<span class="comment"># Note that if manage_dhcp and manage_dns are disabled, the respective</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># sed -i 's/pxe_just_once: 0/pxe_just_once: 1/' /etc/cobbler/settings</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># grep -n pxe_just_once /etc/cobbler/settings</span></span><br><span class="line">292:pxe_just_once: 1</span><br></pre></td></tr></table></figure><h2 id="重启cobbler服务后，再次运行检查配置命令"><a href="#重启cobbler服务后，再次运行检查配置命令" class="headerlink" title="重启cobbler服务后，再次运行检查配置命令"></a>重启cobbler服务后，再次运行检查配置命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler cobbler]<span class="comment"># systemctl restart cobblerd.service</span></span><br><span class="line">[root@cobbler cobbler]<span class="comment"># cobbler check</span></span><br><span class="line">No configuration problems found.  All systems go.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;关闭防火墙和selinux&quot;&gt;&lt;a href=&quot;#关闭防火墙和selinux&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>构建标准且人性化镜像</title>
    <link href="http://yoursite.com/2019/05/02/%E6%9E%84%E5%BB%BA%E6%A0%87%E5%87%86%E4%B8%94%E4%BA%BA%E6%80%A7%E5%8C%96%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2019/05/02/构建标准且人性化镜像/</id>
    <published>2019-05-02T13:48:00.000Z</published>
    <updated>2021-07-20T07:44:15.333Z</updated>
    
    <content type="html"><![CDATA[<h6 id="正确的FROM合适的镜像"><a href="#正确的FROM合适的镜像" class="headerlink" title="正确的FROM合适的镜像"></a>正确的FROM合适的镜像</h6><p>很多新手一上来就是FROM centos然后RUN 一堆yum install的，这样还停留在虚拟机的角度。可以FROM alpine或者干脆拿官方的改，alpine初期的时候问题蛮多的，很多人建议使用alpine做基础镜像最好是测试好再上线，现在alpine的快速发展，这种现象很少了。</p><h6 id="不要用imageID或者latest标签"><a href="#不要用imageID或者latest标签" class="headerlink" title="不要用imageID或者latest标签"></a>不要用imageID或者latest标签</h6><p>id的话不便于长期发展，而latest标签无法回滚。</p><h6 id="不要重复造轮子"><a href="#不要重复造轮子" class="headerlink" title="不要重复造轮子"></a>不要重复造轮子</h6><p>现在dockerhub上有很多的镜像了，很多人还是喜欢造轮子，造出来的镜像层又多，无用的文件又停留在层理，主进程还不是业务进程，还不支持传入环境变量来让用户选择场景和传入配置信息启动。</p><p>如果你的是一个java应用，那么你应该使用java作为基础应用，如果你是tomcat应用，你应该使用tomcat作为基础应用，而不是按照虚拟机的思维，把Java装好，然后装应用；tomcat也一样，装java，装tomcat，装应用。</p><h6 id="镜像大小"><a href="#镜像大小" class="headerlink" title="镜像大小"></a>镜像大小</h6><p>之前我举例的ADD添加源码包和RUN rm -f删掉ADD的源码包，虽说最终起来的容器看不到源码包。实际上文件还停留在镜像的层里，所以尽量合并和减少层防止层保持住文件。</p><p>最后一些零散的建议和常见错误</p><ul><li>编写entrypoint脚本让启动更人性化</li><li>同时如果是初期上docker到生产，考虑到排错啥的，可以在官方dockerfile里添加一些常见的排错命</li><li>尽量使用ENV和ARG让人不改或者少改Dockerfile即可做构建对应版本的镜像</li><li>容器时间不对的话可以安装包tzdate，声明变量TZ即可声明时区，或者构建的时候带上/etc/localtime或者运行的时候挂载宿主机的/etc/localtime。</li><li>如果是编译型语言，妥善利用多阶段构建（后面容器无法运行排错的时候会讲解多阶构建）</li><li>代码里应该要注意优雅退出。收到信号的时候释放东西啥的。</li></ul><h6 id="代码，war，jar，go编译的二进制到底应不应该放在镜像里？"><a href="#代码，war，jar，go编译的二进制到底应不应该放在镜像里？" class="headerlink" title="代码，war，jar，go编译的二进制到底应不应该放在镜像里？"></a>代码，war，jar，go编译的二进制到底应不应该放在镜像里？</h6><p>其实现在的java和php，还有go啥的依赖的运行环境基本不会变，变更发布新版本也就只有代码，war，jar和go编译的二进制，为此可以两种做法:</p><ul><li>全部打包到镜像里</li><li>不变的层做个镜像，启动利用entrypoint脚本接受传入的git分支或者war包啥的内网下载直链下载到容器里或者启动直接挂载nfs里的war包或者代码啥的启动</li></ul><p>很多人都是传统的第一种思维，看到第二种的时候直接张口说这样不行。如果后续接触到了k8s会发现k8s有个initContainers，谷歌也说了可以利用initContainers去初始化或者克隆git代码。</p><p>其实两种均可，例如第一种，在没有gc原生docker下，每一次发布都会老版本镜像存在，虽说层共享，但是最后的代码层的容量还是占据了宿主机容量的。</p><p>第二种每次启动都需要下载，需要网速，如果是内网可以尝试，代码或者war包啥的都是在容器层，不会吃宿主机多大容量。实在接受不了可以运维给研发做个这种通用镜像给他们用。</p><p>最后是推荐一个漠然大佬的示例，漠然大佬的github上很多镜像下载量很多，可以去他github看，这里我放下他的java的应用示例 <a href="https://github.com/Gozap/dockerfile" target="_blank" rel="noopener">https://github.com/Gozap/dockerfile</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;正确的FROM合适的镜像&quot;&gt;&lt;a href=&quot;#正确的FROM合适的镜像&quot; class=&quot;headerlink&quot; title=&quot;正确的FROM合适的镜像&quot;&gt;&lt;/a&gt;正确的FROM合适的镜像&lt;/h6&gt;&lt;p&gt;很多新手一上来就是FROM centos然后RUN 一堆yu
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>exec与entrypoint使用脚本</title>
    <link href="http://yoursite.com/2019/05/02/exec%E4%B8%8Eentrypoint%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2019/05/02/exec与entrypoint使用脚本/</id>
    <published>2019-05-02T13:31:00.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多有状态的官方镜像的ENTRYPOINT都是使用了一个脚本。例如redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY docker-entrypoint.sh /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [<span class="string">"redis-server"</span>]</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># first arg is `-f` or `--some-option`</span></span><br><span class="line"><span class="comment"># or first arg is `something.conf`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;1#-&#125;</span>"</span> != <span class="string">"<span class="variable">$1</span>"</span> ] || [ <span class="string">"<span class="variable">$&#123;1%.conf&#125;</span>"</span> != <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -- redis-server <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">find . \! -user redis -<span class="built_in">exec</span> chown redis <span class="string">'&#123;&#125;'</span> +</span><br><span class="line"><span class="built_in">exec</span> gosu redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>最终运行的是docker-entrypoint.sh redis-server</p><p>第一个if的逻辑是如果docker run 选项 redis -x 或者–xx或者xxx.conf，就把脚本收到的$@改编成redis-server $@,例如我们可同docker run -d redis –port 7379修改启动的容器里的redis端口。如果我们传入的command不是-开头的也不是.conf结尾的字符，例如是date，则会跑到最后的逻辑执行我们的date命令不会启动redis-server</p><p>第二个if这里，如果满足第一个if或者直接默认的cmd下而且容器里用户uid是0，则把属主不是redis的文件改成redis用户，然后切成redis用户去启动redis-server。</p><p>我们可以看到entrypoint能在业务进程启动前做很多事情。而且优秀的镜像都离不开entrypoint脚本，能够根据用户传入的变量和command来切换启动的场景和配置。</p><p>前面说了，主进程一定要是业务进程，这里怎么是个脚本呢，那业务进程不就不是pid为1了吗？ 这里用了exec来退位让贤，最终redis-server还是pid为1的。可以简单几个命令讲解下exec的作用。</p><p>写个test.sh脚本，在脚本里用pstree -p，运行脚本bash test.sh查看进程层次</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>发现pstree是在我们脚本bash(1998)的子进程</p><p>然后在脚本最后面加一行exec pstree -p看看输出</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>我们发现bash进程运行的时候pid是2022，然后第二个pstree上升到了2022这一层次了，假设pid为a的命令或者二进制exec执行了命令b，那b就接替了a的pid。如果说我们entrypoint或者cmd使用脚本，那么我们一定要在脚本最后启动业务进程的时候前面加个exec让脚本退位让贤。</p><p>最后环境变量写配置文件涉及到修改，还有一些判断是否初次启动的有下面一些工具或者套路。</p><ul><li>xmlstarlet 处理xml</li><li>pip安装shyaml 处理yaml</li><li>jq读取json</li><li>nodejs的npm安装json可以修改json文件</li><li>处理excel或者csv使用in2csv，csvkit 提供了 in2csv，csvcut，csvjoin，csvgrep</li><li>touch -d “@0”写在构建的最后一个RUN里把时间戳设置为1970-1-1，然后用stat命令判断</li><li>if [ “$(stat -c “%Y” “${CONF_INSTALL}/conf/server.xml”)” -eq “0” ]; then</li><li>另外entrypoint脚本COPY进去的时候注意可执行权限，如果Windows上传到Linux构建会因为entrpoint脚本没带权限无法运行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在很多有状态的官方镜像的ENTRYPOINT都是使用了一个脚本。例如redis&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile STOPSIGNAL</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-STOPSIGNAL/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-STOPSIGNAL/</id>
    <published>2019-05-02T13:20:00.000Z</published>
    <updated>2021-07-20T07:44:15.333Z</updated>
    
    <content type="html"><![CDATA[<p>格式，缺省信号为SIGTERM<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br><span class="line">------</span><br><span class="line">STOPSIGNAL SIGTERM</span><br><span class="line">STOPSIGNAL 9</span><br></pre></td></tr></table></figure></p><p>可以是kill -l的信号名字也可以信号数字:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure></p><p>docker run的选项可以覆盖镜像定义的STOPSIGNAL信号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--stop-signal string           Signal to stop a container (default <span class="string">"SIGTERM"</span>)</span><br></pre></td></tr></table></figure></p><p>在docker stop停止运行容器的时候指定发送给容器里pid为1角色的信号。默认超时10秒，超时则发送kill强杀进程。一般业务进程都是pid为1，所有官方的进程都会处理收到的SIGTERM信号进行优雅收尾退出。</p><p>前面说过了如果CMD是/bin/sh格式的话，主进程是一个sh -c的进程，shell不用trap处理的话是无法转发信号的。下面我举个例子</p><p>例子是是网上找的，两种CMD方式启动的redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y install redis-server &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD /usr/bin/redis-server</span><br><span class="line">----------------------------</span><br><span class="line">FROM ubuntu:14.04</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get -y install redis-server &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [<span class="string">"/usr/bin/redis-server"</span>]</span><br></pre></td></tr></table></figure></p><p>构建两种镜像，然后docker run -d img_name，然后docker stop这俩镜像启动的容器会发现exec的redis能在docker stop的时候收到信号优雅退出Received SIGTERM, scheduling shutdown<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1] 11 Feb 08:13:01.633 * The server is now ready to accept connections on port 6379</span><br><span class="line">[1 | signal handler] (1455179074) Received SIGTERM, scheduling shutdown...</span><br><span class="line">[1] 11 Feb 08:24:34.259 <span class="comment"># User requested shutdown...</span></span><br><span class="line">[1] 11 Feb 08:24:34.259 * Saving the final RDB snapshot before exiting.</span><br><span class="line">[1] 11 Feb 08:24:34.262 * DB saved on disk</span><br><span class="line">[1] 11 Feb 08:24:34.262 <span class="comment"># Redis is now ready to exit, bye bye...</span></span><br></pre></td></tr></table></figure></p><p>而/bin/sh的形式的redis在docker stop后去docker logs看日志会发现根本没有优雅退出，类似于强制杀掉一样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5] 11 Feb 08:12:40.109 * The server is now ready to accept connections on port 6379</span><br></pre></td></tr></table></figure></p><p>这是因为/bin/sh形式启动的redis主进程是一个sh，shell不会转发信号，所以最后sh被超时的docker stop发送了kill信号杀掉，整个容器生存周期结束，redis没有触发signal handler。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;格式，缺省信号为SIGTERM&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile VOLUME</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-VOLUME/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-VOLUME/</id>
    <published>2019-05-02T13:13:00.000Z</published>
    <updated>2021-07-20T07:44:15.331Z</updated>
    
    <content type="html"><![CDATA[<h6 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h6><p>两种写法，无区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [<span class="string">"/data"</span>,<span class="string">"/mysql"</span>]</span><br><span class="line">VOLUME /var/<span class="built_in">log</span> /var/db</span><br></pre></td></tr></table></figure></p><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。</p><p>为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;VOLUME&quot;&gt;&lt;a href=&quot;#VOLUME&quot; class=&quot;headerlink&quot; title=&quot;VOLUME&quot;&gt;&lt;/a&gt;VOLUME&lt;/h6&gt;&lt;p&gt;两种写法，无区别&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile ENTRYPOINT</title>
    <link href="http://yoursite.com/2019/05/02/Dockerfile-ENTRYPOINT/"/>
    <id>http://yoursite.com/2019/05/02/Dockerfile-ENTRYPOINT/</id>
    <published>2019-05-02T13:01:00.000Z</published>
    <updated>2021-07-20T07:44:15.332Z</updated>
    
    <content type="html"><![CDATA[<h6 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h6><p>和CMD用法也一样两种格式，唯一要注意的就是区别，CMD和ENTRYPOINT只有一个或者两者都有都可以，容器最终运行的命令为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; &lt;CMD&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>alpine的root目录是没有文件的，所以ls /root没有输出，我们用选项去覆盖住entrypoint可以看到输出了date。注意一点是覆盖entrypoint的时候镜像的CMD会被忽略，我们真要调试的时候需要加command的话，可以在docker run的镜像后面加command和arg。</p><p>上面例子可以很形象的证明了是这个关系，最终运行的是<strong><entrypoint> <cmd></cmd></entrypoint></strong>，同时不光在docker run的时候覆盖掉CMD，也可以覆盖掉默认的entrypoint。很多时候我们可以主进程bash或者sh进去手动启动看看。老版本接触不多，不确定老版本有没有–entrypoint的选项。</p><p>最后如果是/bin/sh的entrypoint会忽略掉CMD和docker run的command参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;ENTRYPOINT&quot;&gt;&lt;a href=&quot;#ENTRYPOINT&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT&quot;&gt;&lt;/a&gt;ENTRYPOINT&lt;/h6&gt;&lt;p&gt;和CMD用法也一样两种格式，唯一要注意的就是区别，CMD和ENTRYPOIN
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Dockerfile" scheme="http://yoursite.com/tags/Dockerfile/"/>
    
  </entry>
  
</feed>
